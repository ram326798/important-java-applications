														CAR POOLING
Requirement 1:
The users of the system are going to be general public who own cars. They are classified as members in our system.
a.	Create a Member Class with the following attributes:
Member Field name	Type
id	Long
firstName	String
lastName	String
email	String
contactNumber	String
license Number	String
licenseStartDate	Date (java.util)
licenseExpiryDate	Date (java.util)

 
b.	Mark all the attributes as private
c.	Create / Generate appropriate Getters & Setters
d.	Add a default constructor and a parameterized constructor to take in all attributes.
e.	When the “member” object is printed, it should display the following details:
Member: firstname, lastname
Member contact details: contactNumber, email
f.	Two members are considered same if they have same email and contactNumber. Implement the logic in the appropriate function. (Case – Insensitive)
 
The Input to your program would be details of two members, You need to display their details as given in "e" and use the function to compare the two members and display if the members are same or unique. Refer to Sample IO.
 
Hint:
The template code hints at which methods are to be implemented to complete the requirement.
 
Sample Input and Output 1:
[All text in bold corresponds to input and the rest corresponds to output.]
Member1 :
id:
1
first name:
Arun
last name:
Kumar
email:
arun123@gmail.com
contact number:
9878767655
license number:
TN38QW1232343
license start date:
12-12-2010
license expiry date:
13-12-2020
Member2 :
id:
2
first name:
Mohamed
last name:
Safiq
email:
safiq1243@gmail.com
contact number:
9667826601
license number:
TN33VA1238743
license start date:
01-05-2013
license expiry date:
01-04-2125

Member 1
Name: Arun , Kumar
Member contact details: 9878767655 ,arun123@gmail.com

Member 2
Name: Mohamed , Safiq
Member contact details: 9667826601 ,safiq1243@gmail.com
Member 1 and Member 2 are different

Sample Input and Output 2:
[All text in bold corresponds to input and the rest corresponds to output.]

Member1 :
id:
1
first name:
Sam
last name:
Nath
email:
Sam123@gmail.com
contact number:
9456738498
license number:
TN45AS123456
license start date:
12-12-2010
license expiry date:
13-12-2021
Member2 :
id:
2
first name:
Swamy
last name:
Nathan
email:
Sam123@gmail.com
contact number:
9456738498
license number:
TN54DF321456
license start date:
01-05-2012
license expiry date:
01-05-2123

Member 1
Name: Sam , Nath
Member contact details: 9456738498 ,Sam123@gmail.com

Member 2
Name: Swamy , Nathan
Member
g.	
h.	 contact details: 9456738498 ,Sam123@gmail.com
Member 1 is same as Member 2

          


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Main {
    
    public static void main(String[] args) throws IOException, ParseException {
        
        Long id;
        String firstName,lastName,email,contactNumber,licenseNumber;
        Date licenseStartDate,licenseExpiryDate;
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        Member member[]=new Member[2];
        int i;
        for(i=0;i<2;i++) {
            System.out.println("Member"+(i+1)+" :");
            System.out.println("id: ");
            id = Long.parseLong(br.readLine());
            System.out.println("first name: ");
            firstName = br.readLine();
            System.out.println("last name: ");
            lastName = br.readLine();
            System.out.println("email: ");
            email = br.readLine();
            System.out.println("contact number: ");
            contactNumber = br.readLine();
            System.out.println("license number: ");            
            licenseNumber = br.readLine();
            System.out.println("license start date: ");
            licenseStartDate = dateFormat.parse(br.readLine());
            System.out.println("license expiry date: ");
            licenseExpiryDate = dateFormat.parse(br.readLine());
            // Populate the Member Array
            member[i]=new Member(id,firstName,lastName,email,contactNumber,licenseNumber,licenseStartDate,licenseExpiryDate);
            
            
        }
        for(i=0;i<2;i++) {
System.out.println("\nMember "+(i+1));
System.out.println("Name: "+member[i].getFirstName()+" , "+member[i].getLastName());
System.out.println("Member contact details: "+member[i].getContactNumber()+" , "+member[i].getEmail());
}
        
        if(member[0].getEmail().equals(member[1].getEmail())&&member[0].getContactNumber().equals(member[1].getContactNumber()))
         
            System.out.println("Member 1 is same as Member 2");
        else
            System.out.println("Member 1 and Member 2 are different");
    }
}





import java.util.Date;


public class Member {
private Long id;
    private String firstName,lastName,email,contactNumber,licenseNumber;
    private Date licenseStartDate,licenseExpiryDate;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public String getLicenseNumber() {
return licenseNumber;
}
public void setLicenseNumber(String licenseNumber) {
this.licenseNumber = licenseNumber;
}
public Date getLicenseStartDate() {
return licenseStartDate;
}
public void setLicenseStartDate(Date licenseStartDate) {
this.licenseStartDate = licenseStartDate;
}
public Date getLicenseExpiryDate() {
return licenseExpiryDate;
}
public void setLicenseExpiryDate(Date licenseExpiryDate) {
this.licenseExpiryDate = licenseExpiryDate;
}
public Member(Long id, String firstName, String lastName, String email,
String contactNumber, String licenseNumber, Date licenseStartDate,
Date licenseExpiryDate) {
super();
this.id = id;
this.firstName = firstName;
this.lastName = lastName;
this.email = email;
this.contactNumber = contactNumber;
this.licenseNumber = licenseNumber;
this.licenseStartDate = licenseStartDate;
this.licenseExpiryDate = licenseExpiryDate;
}
    

}

 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Requirement 2:

The next most important entity of the system is Car.

 a)   Create a Car Class with the following attributes:
Member Field name	Type
id	Long
name	String
model	String
makeYear	Integer
company	String
comfortLevel	Integer
b)    Mark all the attributes as private

 c)   Create / Generate appropriate Getters & Setters

 d)   Add a default constructor and a parameterized constructor to take in all attributes.

 e)   One Member can pool one or many cars that he / she owns. To accommodate this, Create a MemberCar class with following attributes
Member Field name	Type
id	Long
member	Member
car	Car
carRegistrationNumber	String
carColor	String
Create / generate appropriate Getters & Setters and constructors.

f)    Add a static findMember method in Member class which takes id as input and returns the Member or null object if the member object is not found.

 g)   Add a static findCar method in Car class which takes id as input and returns the Car or null object if the car object is not found.

 h)   Introduce an Arraylist (carList) in the member class which holds the list of member-car objects. Include appropriate getters and setters. Given a member, Display the number of cars the member owns along with registration number of each car separated by a line.

Input Output Format:
Refer Sample I/O for formatting specifications.


Sample Input and Output:
[All text in bold corresponds to input and the rest corresponds to output.]

Menu:
 1) Add a Member
 2) Add a Car
 3) Assign Car to Member (Assume valid data is supplied)
 4) Cars Owned
 5) Exit
1
id:
6
first name:
arun
last name:
kumar
email:
arun@gmail.com
contact number:
9089786756
license number:
TN12ER3423
license start date:
13-12-1998
license expiry date:
12-12-2008
Menu:
 1) Add a Member
 2) Add a Car
 3) Assign Car to Member (Assume valid data is supplied)
 4) Cars Owned
 5) Exit
2
id:
5
name:
Verna
model:
CRDI
makeYear:
2008
company:
Hyundai
comfort level:
8
Menu:
 1) Add a Member
 2) Add a Car
 3) Assign Car to Member (Assume valid data is supplied)
 4) Cars Owned
 5) Exit
3
member car id
12
member id
3
car id
5
car registration
TN38BR9689
color
White
Menu:
 1) Add a Member
 2) Add a Car
 3) Assign Car to Member (Assume valid data is supplied)
 4) Cars Owned
 5) Exit
3
member car id
13
member id
6
car id
2
car registration
TN66AB4214
color
Brown
Menu:
 1) Add a Member
 2) Add a Car
 3) Assign Car to Member (Assume valid data is supplied)
 4) Cars Owned
 5) Exit
4
member id
6
Number of cars : 1
Registration Numbers :
TN66AB4214
Menu:
 1) Add a Member
 2) Add a Car
 3) Assign Car to Member (Assume valid data is supplied)
 4) Cars Owned
 5) Exit
5
     



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class Main {
    
    public static void main(String[] args) throws IOException {
        
        ArrayList<Member> memberList = new ArrayList<Member>();
        ArrayList<Car> carList = new ArrayList<Car>();        
        ArrayList<MemberCar> memberCarList = new ArrayList<MemberCar>();
        
        initData(memberList,carList);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        while(true){
    String menu = "Menu: \n 1) Add a Member \n 2) Add a Car \n 3) Assign Car to Member (Assume valid data is supplied) \n 4) Cars Owned \n 5) Exit";
    System.out.println(menu);
    int option = Integer.parseInt(br.readLine());
    if(option == 1) {
        Member m = addMember(br);
        memberList.add(m);
    }
    if(option == 2) {
        Car c = addCar(br);
        carList.add(c);
    }
    if(option == 3) {
        assignCar(br,memberList,carList);
    }
    if(option == 4) {
        System.out.println("member id");
        String memid = br.readLine();            
        carsOwned(memid,memberList);
    }
            if(option == 5){
             System.exit(0);
                break;
            }
}
        
    }
    
    //Dont change the specification of this method
    public static void carsOwned(String memberId, ArrayList<Member> memberList) {
     int cnt=0;
     Long id=Long.parseLong(memberId);
     String carreg[]=new String[50];
     //StringBuilder br = new StringBuilder();
     for(Member m : memberList)
     {
     if(m.getId()==id)
     {
     List<MemberCar> mr= m.getCarList();
     for(MemberCar mc : mr)
     {
     cnt++;
     }
     
     int trck=0;
     for(MemberCar mc : mr)
     {
     carreg[trck]=mc.getCarRegistrationNumber();
     trck++;
     }
     } 
     }
     System.out.println("Number of cars : "+cnt);
System.out.println("Registration Numbers :");
for(int i=0;i<cnt;i++)
{
System.out.println(carreg[i]);
}
    }
    
    public static void assignCar(BufferedReader br, ArrayList<Member> memberList, ArrayList<Car> carList) {
        Long memberId, carId;
        String id, regNum,color;
        try {
            System.out.println("member car id");
            id = br.readLine();
            System.out.println("member id");
            memberId = Long.parseLong(br.readLine());
            System.out.println("car id");
            carId = Long.parseLong(br.readLine());
            System.out.println("car registration");
            regNum = br.readLine();
            System.out.println("color");
            color = br.readLine();
            Car c = Car.findCar(carId, carList);
            Member m = Member.findMember(memberId,memberList);
            MemberCar mc = new MemberCar(carId, c ,m , regNum, color);
            if(m.getCarList() == null) {
                m.setCarList( new ArrayList<MemberCar>());
            }
            m.getCarList().add(mc);
            
        }
        catch(Exception e) {
            System.out.println("Could not assign");
        }                
    }
    
    public static Car addCar(BufferedReader br) {
        
        String id, name, model,makeYear,company,comfortLevel;
        Car c = null;
        try {
            System.out.println("id: ");
            id = br.readLine();
            System.out.println("name: ");
            name = br.readLine();
            System.out.println("model: ");
            model = br.readLine();
            System.out.println("makeYear: ");
            makeYear = br.readLine();
            System.out.println("company: ");
            company = br.readLine();
            System.out.println("comfort level: ");
            comfortLevel = br.readLine();
            c = new Car(Long.parseLong(id),name,model,Integer.parseInt(makeYear),company,Integer.parseInt(comfortLevel));
            
        }
        catch(Exception e) {
            System.out.println("Could not create Car");
        }
        return c;
        
    }
    
    public static Member addMember(BufferedReader br) {
        String id,firstName,lastName,email,contactNumber,licenseNumber,licenseStartDate,licenseExpiryDate; 
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Member m = null;
        try {
            System.out.println("id: ");
            id = br.readLine();
            System.out.println("first name: ");
            firstName = br.readLine();
            System.out.println("last name: ");
            lastName = br.readLine();
            System.out.println("email: ");
            email = br.readLine();
            System.out.println("contact number: ");
            contactNumber = br.readLine();
            System.out.println("license number: ");            
            licenseNumber = br.readLine();
            System.out.println("license start date: ");
            licenseStartDate = br.readLine();
            System.out.println("license expiry date: ");
            licenseExpiryDate = br.readLine();      
            m = new Member(Long.parseLong(id),firstName,lastName,email,contactNumber,licenseNumber,
                    sdf.parse(licenseStartDate),sdf.parse(licenseExpiryDate));
        }
        catch(Exception e) {
           System.out.println("Unable to create member"); 
        }
        return m;

                
    }

    public static void initData(ArrayList<Member> memberList, ArrayList<Car> carList) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        try {
            memberList.add(new Member(1L,"joe","root","joe.root@a.com","1234567890","AH1",sdf.parse("12-12-2001"),sdf.parse("12-12-2010")));
            memberList.add(new Member(2L,"ben","stokes","ben.stokes@a.com","2345678901","AH2",sdf.parse("12-12-2002"),sdf.parse("12-12-2011")));
            memberList.add(new Member(3L,"virat","kohli","virat.kohli@a.com","3456789012","AH3",sdf.parse("12-12-2003"),sdf.parse("12-12-2012")));
            
            carList.add(new Car(1L,"i10","sports",2007,"Hyundai",8));
            carList.add(new Car(1L,"alto","kx1",2008,"Maruti",6));
            carList.add(new Car(1L,"polo","topline",2010,"Volks",5));
            carList.add(new Car(1L,"kwid","lxi",2010,"Renault",5));
            
        }
        catch(Exception e) {
            System.out.println("Could not init Data");
        }
        
    }
    
}



import java.util.List;


public class Car {
private Long id;
private String name;
private String model;
private int makeYear;
private String company;
private int comfortLevel;
public static Car findCar(Long id,List<Car> clist)
{
for(Car c : clist)
{
if(c.getId()==id)
{
return c;
}
}
return null;
}
public Car()
{
}
public Car(Long id, String name, String model, int makeYear,
String company, int comfortLevel) {
super();
this.id = id;
this.name = name;
this.model = model;
this.makeYear = makeYear;
this.company = company;
this.comfortLevel = comfortLevel;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getModel() {
return model;
}
public void setModel(String model) {
this.model = model;
}
public int getMakeYear() {
return makeYear;
}
public void setMakeYear(int makeYear) {
this.makeYear = makeYear;
}
public String getCompany() {
return company;
}
public void setCompany(String company) {
this.company = company;
}
public int getComfortLevel() {
return comfortLevel;
}
public void setComfortLevel(int comfortLevel) {
this.comfortLevel = comfortLevel;
}
}






import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Member {
private Long id;
private String firstName;
private String lastName;
private String email;
private String contactNumber;
private String licenseNumber;
private Date licenseStartDate;
private Date licenseExpiryDate; 
private ArrayList<MemberCar> carList = new ArrayList<MemberCar>();
public List<MemberCar> getCarList() {
return carList;
}

public void setCarList(ArrayList<MemberCar> carList) {
this.carList = carList;
}

public static Member findMember(Long id,List<Member> mlist)
{
for(Member m : mlist)
{
if(m.getId()==id)
{
return m;
}
}
return null;
}
@Override
public String toString() {
return "Name: "+getFirstName()+" , "+getLastName()+"\nMember contact details: "+getContactNumber() +" , " +getEmail();
}
public Member()
{
}
public Member(Long id, String firstName, String lastName, String email,
String contactNumber, String licenseNumber, Date licenseStartDate,
Date licenseExpiryDate) {
super();
this.id = id;
this.firstName = firstName;
this.lastName = lastName;
this.email = email;
this.contactNumber = contactNumber;
this.licenseNumber = licenseNumber;
this.licenseStartDate = licenseStartDate;
this.licenseExpiryDate = licenseExpiryDate;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public String getLicenseNumber() {
return licenseNumber;
}
public void setLicenseNumber(String licenseNumber) {
this.licenseNumber = licenseNumber;
}
public Date getLicenseStartDate() {
return licenseStartDate;
}
public void setLicenseStartDate(Date licenseStartDate) {
this.licenseStartDate = licenseStartDate;
}
public Date getLicenseExpiryDate() {
return licenseExpiryDate;
}
public void setLicenseExpiryDate(Date licenseExpiryDate) {
this.licenseExpiryDate = licenseExpiryDate;
}
}
















public class MemberCar {
private Long id;
private Car car;
private Member member;
private String carRegistrationNumber;
private String carColor; 
public MemberCar()
{
}
public MemberCar(Long id, Car car,Member member,
String carRegistrationNumber, String carColor) {
super();
this.id = id;
this.member = member;
this.car = car;
this.carRegistrationNumber = carRegistrationNumber;
this.carColor = carColor;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public Member getMember() {
return member;
}
public void setMember(Member member) {
this.member = member;
}
public Car getCar() {
return car;
}
public void setCar(Car car) {
this.car = car;
}
public String getCarRegistrationNumber() {
return carRegistrationNumber;
}
public void setCarRegistrationNumber(String carRegistrationNumber) {
this.carRegistrationNumber = carRegistrationNumber;
}
public String getCarColor() {
return carColor;
}
public void setCarColor(String carColor) {
this.carColor = carColor;
}
}


    
Car Pooling System - Requirement 3

You are a very active member of a Nature Club in your organization. In one of the meetings, it was discussed to build a car pooling system to help cut down the pollution. Being very active and tech savvy, you wish to contribute towards the development of system. One of the members being an architect has understood the requirement and would be sharing you with smaller requirements.

Requirement 3:
There are always typical human entry errors that need to be validated so that the data being saved in the system is valid and can be used for later processing. Simple Rules that needs to be taken care:

 a)    Validate Car registration pattern.  A typical registration pattern would be
                2 chars-2 numbers – 2 chars – 4 numbers [TN-07-AS-1273]. Assume all characters are upper case.

 b)   Convert it to appropriate registration pattern –
During entry, some of them have used different alpha numeric characters as separator and the case sensitivity of characters have been left out. Ensure these two are fixed and the format given in (sub question) “a” is returned as output. Assume valid inputs are provided.

 c)   Check for validity of driving license with respect to date – Every Driving license is valid for 10 years. Assume today’s date as 15-06-2017. Check if the given driving license is valid.

Input Output Format:

Refer Sample I/O for formatting specifications.

Sample I/O 1:
[All text in bold corresponds to input and the rest corresponds to output.]

Menu:
1) Valid Car registration Number
2) Convert Car registration Number
3) Valid Driving License
Enter choice
1
car registration number
TN38BR9689
TN38BR9689 is Invalid

Sample I/O 2:
[All text in bold corresponds to input and the rest corresponds to output.]

Menu:
1) Valid Car registration Number
2) Convert Car registration Number
3) Valid Driving License
Enter choice
1
car registration number
TN-38-BR-9689
TN-38-BR-9689 is Valid

Sample I/O 3:
[All text in bold corresponds to input and the rest corresponds to output.]

Menu:
1) Valid Car registration Number
2) Convert Car registration Number
3) Valid Driving License
Enter choice
2
car registration number
TN@38*BR@9689
TN-38-BR-9689

Sample I/O 4:
[All text in bold corresponds to input and the rest corresponds to output.]

Menu:
1) Valid Car registration Number
2) Convert Car registration Number
3) Valid Driving License
Enter choice
3
driving license issue date
29-12-1990
26 years old license - expired

Sample I/O 5:
[All text in bold corresponds to input and the rest corresponds to output.]

Menu:
1) Valid Car registration Number
2) Convert Car registration Number
3) Valid Driving License
Enter choice
3
driving license issue date
29-12-2010
6 years old license – valid





import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.text.SimpleDateFormat;

import java.time.LocalDate;

import java.time.Period;

import java.time.format.DateTimeFormatter;

import java.util.Calendar;

import java.util.GregorianCalendar;

import java.util.regex.Matcher;

import java.util.regex.Pattern;

public class Main {

public static void main(String[] args) throws IOException {

String menu = "Menu:\n 1) Valid Car registration Number\n 2) Convert Car registration Number\n "

+ "3) Valid Driving License";

//TN-07-AS-1273

System.out.println(menu);

System.out.println("Enter choice");

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

int x = Integer.parseInt(br.readLine());

String regnum = "",input="";

switch(x) {

case 1: {

System.out.println("car registration number");

regnum = br.readLine();

validateRegNum(regnum);

break;

}

case 2: {

System.out.println("car registration number");

regnum = br.readLine();

convertRegNum(regnum);

break;

}

case 3: {

System.out.println("driving license issue date");

input = br.readLine();

validateDrivingLicense(input);

break;

}

}

}

public static void validateRegNum(String reg) {

if(reg.substring(2,3).equals("-")&&reg.substring(5,6).equals("-")&&reg.substring(8, 9).equals("-"))

System.out.println(reg+" is Valid");

else

System.out.println(reg+" is Invalid");

}

public static void convertRegNum(String reg) {

System.out.println(reg.subSequence(0, 2)+"-"+reg.subSequence(3, 5)+"-"+reg.subSequence(6, 8)+"-"+reg.substring(9));

}

public static void validateDrivingLicense(String inp) {

DateTimeFormatter dtf =DateTimeFormatter.ofPattern("dd-MM-yyyy");

LocalDate date1=LocalDate.parse(inp,dtf);

LocalDate date2=LocalDate.parse("15-06-2017",dtf);

Period p=Period.between(date1,date2);

if(p.getYears()<=10)

System.out.println(p.getYears()+" years old license - valid");

else

System.out.println(p.getYears()+" years old license - expired");

}

}

 Page of
Car Pooling System - Requirement 4
 
You are a very active member of a Nature Club in your organization. In one of the meetings, it was discussed to build a car pooling system to help cut down the pollution. Being very active and tech savvy, you wish to contribute towards the development of system. One of the members being an architect has understood the requirement and would be sharing you with smaller requirements.
Requirement 4:

Very soon you discover that there are different classes of Cars that can be pooled. Each class of cars does share some common properties as well as some specific properties. Represent the above requirement in Object Orientation. Mark the base class as abstract.

 a.   Use the Car class created in Requirement 2. Retain attributes id and name. Lets’ ignore rest of the attributes for this requirement. Make the appropriate access modifier change to enable the attributes to be accessible to child classes.

 Car

Member Field name	Type
id	Long
name	String
  b.   Create 3 child classes with Car as base class and the following attributes.

HatchBack
Member Field name	Type
powerWindowsEnabled	Boolean
automaticGear	Boolean
 Sedan
Member Field name	Type
absEnabled	Boolean
bootSpace	Integer
 UtilityCar
Member Field name	Type
rearCoolingVents	Boolean
 
 c.   Mark the access modifiers appropriately, and create constructors using super keyword.

d.    Create an abstract method calculateDriveCost() which takes a km covered as double and returns the cost in rupees as double. (rounded to 0 decimal places)
Hint: Use Overriding.

The formula for computing it as follows:


Rule	Cost (Rs)
Hatchback without automatic gear	10
Hatchback with automatic gear	12
Sedan	15
Sedan with bootspace > 600	15 and 20% additional cost
Utility	18
Input Output Format:

Refer Sample I/O for formatting specifications.


Sample I/O 1:
[All text in bold corresponds to input and the rest corresponds to output.]

id
1
name
i20
type
sedan
distance
20
abs enabled
false
boot space
350
Cost is Rs 300

Sample I/O 2:
[All text in bold corresponds to input and the rest corresponds to output.]

id
2
name
Verna
type
hatchback
distance
10
power windows
true
automatic
false
Cost is Rs 100

Sample I/O 3:
[All text in bold corresponds to input and the rest corresponds to output.]

id
3
name
Mahindra SUV
type
utility
distance
10
rear cooling vents
false
Cost is Rs 180






abstract public class Car {
private Long id;
private String name;
public Car(Long id, String name) {
super();
this.id = id;
this.name = name;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
abstract Double calculateDriveCost(Double dist);

}


class HatchBack extends Car {
Boolean powerWindowsEnabled,automaticGear;

public Boolean getPowerWindowsEnabled() {
return powerWindowsEnabled;
}

public void setPowerWindowsEnabled(Boolean powerWindowsEnabled) {
this.powerWindowsEnabled = powerWindowsEnabled;
}

public Boolean getAutomaticGear() {
return automaticGear;
}

public void setAutomaticGear(Boolean automaticGear) {
this.automaticGear = automaticGear;
}

public HatchBack(Long id, String name, Boolean powerWindowsEnabled,
Boolean automaticGear) {
super(id, name);
this.powerWindowsEnabled = powerWindowsEnabled;
this.automaticGear = automaticGear;
}
@Override
Double calculateDriveCost(Double dist)
 {
 if(automaticGear)
 {
 return (double)dist*12.0;
 }
 else
 {
 return (double)dist*10.0;
 }
 
 
 }

}



public  class Sedan extends Car {
Boolean absEnabled;
Integer bootSpace;
public Boolean getAbsEnabled() {
return absEnabled;
}
public void setAbsEnabled(Boolean absEnabled) {
this.absEnabled = absEnabled;
}
public Integer getBootSpace() {
return bootSpace;
}
public void setBootSpace(Integer bootSpace) {
this.bootSpace = bootSpace;
}
public Sedan(Long id, String name, Boolean absEnabled, Integer bootSpace) {
super(id, name);
this.absEnabled = absEnabled;
this.bootSpace = bootSpace;
}
@Override
Double calculateDriveCost(Double dist)
 {
Double c;
if(bootSpace>600)
{
c=(15.0*dist);
c=c+(0.2*c);
return c;
}
else
{
c=15.0*dist;
return c;
}
 }

}


public  class UtilityCar extends Car {
Boolean rearCooloingVents;

public Boolean getRearCooloingVents() {
return rearCooloingVents;
}

public void setRearCooloingVents(Boolean rearCooloingVents) {
this.rearCooloingVents = rearCooloingVents;
}

public UtilityCar(Long id, String name, Boolean rearCooloingVents) {
super(id, name);
this.rearCooloingVents = rearCooloingVents;
}
@Override
Double calculateDriveCost(Double dist)
 {
 return dist*18.0;
 }

}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    
    public static void main(String[] args) throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.println("id");
        Long id = Long.parseLong(br.readLine());
        System.out.println("name");
        String name = br.readLine();
        System.out.println("type");
        String ct = br.readLine();
        System.out.println("distance");
        Double dist = Double.parseDouble(br.readLine());

        Car carObj = null;
        if(ct.equals("hatchback")) {
            System.out.println("power windows");
            Boolean pw = Boolean.parseBoolean(br.readLine());
            System.out.println("automatic");
            Boolean am = Boolean.parseBoolean(br.readLine());            
            carObj = new HatchBack(id,name,pw,am);
        }
        else if(ct.equals("sedan")) {
            System.out.println("abs enabled");
            Boolean pw = Boolean.parseBoolean(br.readLine());
            System.out.println("boot space");
            Integer am = Integer.parseInt(br.readLine());            
            carObj = new Sedan(id,name,pw,am);
        }
        else {
            System.out.println("rear cooling vents");
            Boolean pw = Boolean.parseBoolean(br.readLine());
            carObj = new UtilityCar(id,name,pw);
            
        }

        System.out.println("Cost is Rs "+Math.round(carObj.calculateDriveCost(dist)));
        
   
    }
    
}

Page of
Car Pooling System - Requirement 5
 
You are a very active member of a Nature Club in your organization. In one of the meetings, it was discussed to build a car pooling system to help cut down the pollution. Being very active and tech savvy, you wish to contribute towards the development of system. One of the members being an architect has understood the requirement and would be sharing you with smaller requirements.
Requirement 5:
Create a custom checked Exception “InvalidEmailException” with custom error message. "InvalidEmailException: Invalid Email for the user".
Read member details from Input (Console). One line would consist details relating one member in comma separated format. Create member objects for each line and add it to an arraylist.
a.       A valid email has an @ and ends with “.com / .org”. During the parse, if an email id is invalid, Raise the custom exception and dont add  the entity into the list.
b.      Sort the arraylist of members based on firstname ( hint: Use Comparable).

Sample Input and Output:
[All text in bold corresponds to input and the rest corresponds to output.]

Enter the number of Members:
5
Enter the member details:
1,joe,root,joe.root@a.com,1234567890,AH1,12-12-2001,12-12-2010
2,ben,stokes,ben.stokes!a.com,2345678901,AH2,12-12-2002,12-12-2011
InvalidEmailException: Invalid Email for ben
3,virat,kohli,virat.kohli@a.com,3456789012,AH3,12-12-2003,12-12-2012
4,ravi,varma,ravi.varma@a.in,4357689010,AH4,11-10-2003,12-10-2013
InvalidEmailException: Invalid Email for ravi
5,mahendra,bagubali,mahi.bali@abc.com,1234798012,AH5,10-02-2003,12-02-2015

The member details are:
1,joe,root,joe.root@a.com,1234567890
5,mahendra,bagubali,mahi.bali@abc.com,1234798012
3,virat,kohli,virat.kohli@a.com,3456789012







import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;


public class Main {
    public static void main(String[] args) throws NumberFormatException, IOException  {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter the number of Members:");
        int i,n = Integer.parseInt(br.readLine());
        System.out.println("Enter the member details:");
        ArrayList<Member> memberList = new ArrayList<Member>();
        
        for(i=0;i<n;i++) {
            
            try {
                String s = br.readLine();
                memberList.add(Member.createInstance(s));
            }
            catch(InvalidEmailException e) {
                System.out.println(e);
            } 
            catch(Exception e){
             
            }
            
        }
        System.out.println("");
        System.out.println("The member details are:");
        Collections.sort(memberList);
        for(Member m: memberList) {
            System.out.println(m.getId()+","+m.getFirstName()+","+m.getLastName()+","+m.getEmail()+","+m.getContactNumber());
        }
        
        
    }
    
    
    

    
}















public class InvalidEmailException extends Exception {

public InvalidEmailException(String s) {
super(s);
// TODO Auto-generated constructor stub
}

}














import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;


public class Member implements Comparable<Member>{

private long id;
private String firstName,lastName,email,contactNumber,licenseNumber;
private Date licenseStartDate,licenseExpiryDate;
public long getId() {
return id;
}
public void setId(long id) {
this.id = id;
}
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public String getLicenseNumber() {
return licenseNumber;
}
public void setLicenseNumber(String licenseNumber) {
this.licenseNumber = licenseNumber;
}
public Date getLicenseStartDate() {
return licenseStartDate;
}
public void setLicenseStartDate(Date licenseStartDate) {
this.licenseStartDate = licenseStartDate;
}
public Date getLicenseExpiryDate() {
return licenseExpiryDate;
}
public void setLicenseExpiryDate(Date licenseExpiryDate) {
this.licenseExpiryDate = licenseExpiryDate;
}
public Member() {
super();
// TODO Auto-generated constructor stub
}
public Member(long id, String firstName, String lastName, String email,
String contactNumber, String licenseNumber, Date licenseStartDate,
Date licenseExpiryDate) {
super();
this.id = id;
this.firstName = firstName;
this.lastName = lastName;
this.email = email;
this.contactNumber = contactNumber;
this.licenseNumber = licenseNumber;
this.licenseStartDate = licenseStartDate;
this.licenseExpiryDate = licenseExpiryDate;
}
public static Member createInstance(String s) throws NumberFormatException, ParseException, InvalidEmailException {
// TODO Auto-generated method stub
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
String str[]=s.split(",");
Member m=null;
if(str[3].contains("@")&&(str[3].endsWith(".com")||str[3].endsWith(".org")))
  m=new Member(Long.parseLong(str[0]), str[1], str[2],str[3], str[4], str[5], sdf.parse(str[6]), sdf.parse(str[7]));
else
throw new InvalidEmailException("Invalid Email for "+str[1]);
return m;
}
@Override
public int compareTo(Member m) {
// TODO Auto-generated method stub
return firstName.compareTo(m.getFirstName());
}
}

       Page of
Car Pooling System - Requirement 6
 
You are a very active member of a Nature Club in your organization. In one of the meetings, it was discussed to build a car pooling system to help cut down the pollution. Being very active and tech savvy, you wish to contribute towards the development of system. One of the members being an architect has understood the requirement and would be sharing you with smaller requirements.
Requirement 6:

You need to migrate the existing data into your newly designed system, write a utility program that reads memberCar details in the given format and builds an arraylist.
Assumption: In your template code, the member and car details would be prefilled to you. You can assume only those members and cars would be used for evaluation.
Currently you have three arraylists, one of type member objects (prefilled in template code), one of type car objects (prefilled in template code) and the membercar arraylist constructed by you.
-          Write a function groupByColor which takes all three arraylists and returns a hashmap with car color as key and list of menberCars as value.

Pre-filled member details:
1,joe,root,joe.root@a.com,1234567890,AH1,12-12-2001,12-12-2010
2,ben,stokes,ben.stokes@a.com,2345678901,AH2,12-12-2002,12-12-2011
3,virat,kohli,virat.kohli@a.com,3456789012,AH3,12-12-2003,12-12-2012

Pre-filled car details:
1,i10,sports,2007,Hyundai,8
2,alto,kx1,2008,Maruti,6
3,polo,topline,2010,Volks,5
4,kwid,lxi,2010,Renault,5


Sample Input and Output:
[All text in bold corresponds to input and the rest corresponds to output.]

Color to search
white
Number of member cars
3
Enter the member car details
1,1,2,TN66AB4214,brown
2,1,1,TN38BR9689,white
3,2,4,TN61EB4004,white
white car registration numbers:
TN38BR9689
TN61EB4004



public class Car {

private long id;
private String name,model,company;
private int makeYear,comfortLevel;
public long getId() {
return id;
}
public void setId(long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getModel() {
return model;
}
public void setModel(String model) {
this.model = model;
}
public String getCompany() {
return company;
}
public void setCompany(String company) {
this.company = company;
}
public int getMakeYear() {
return makeYear;
}
public void setMakeYear(int makeYear) {
this.makeYear = makeYear;
}
public int getComfortLevel() {
return comfortLevel;
}
public void setComfortLevel(int comfortLevel) {
this.comfortLevel = comfortLevel;
}
public Car() {
super();
// TODO Auto-generated constructor stub
}
public Car(long id, String name, String model, 
int makeYear,String company, int comfortLevel) {
super();
this.id = id;
this.name = name;
this.model = model;
this.company = company;
this.makeYear = makeYear;
this.comfortLevel = comfortLevel;
}
}
















import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;


public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        ArrayList<Member> memberList = new ArrayList<Member>();
        ArrayList<Car> carList = new ArrayList<Car>();        
        ArrayList<MemberCar> memberCarList = new ArrayList<MemberCar>();
        initData(memberList, carList);
        System.out.println("Color to search");
        String color = br.readLine();
        System.out.println("Number of member cars");
        int i,n = Integer.parseInt(br.readLine());
        System.out.println("Enter the member car details");
        for(i=0;i<n;i++) {
            String s = br.readLine();
            memberCarList.add(MemberCar.createInstance(s, memberList, carList));            
        }
        HashMap<String,ArrayList<MemberCar>> hm = MemberCar.groupByColor(memberCarList);
        System.out.println(color+" car registration numbers:");
        for(MemberCar mc: hm.get(color)) {
            System.out.println(mc.getCarRegistrationNumber());
        }        
    }    
    
    
    public static void initData(ArrayList<Member> memberList, ArrayList<Car> carList) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        try {
            memberList.add(new Member(1L,"joe","root","joe.root@a.com","1234567890","AH1",sdf.parse("12-12-2001"),sdf.parse("12-12-2010")));
            memberList.add(new Member(2L,"ben","stokes","ben.stokes@a.com","2345678901","AH2",sdf.parse("12-12-2002"),sdf.parse("12-12-2011")));
            memberList.add(new Member(3L,"virat","kohli","virat.kohli@a.com","3456789012","AH3",sdf.parse("12-12-2003"),sdf.parse("12-12-2012")));
            
            carList.add(new Car(1L,"i10","sports",2007,"Hyundai",8));
            carList.add(new Car(1L,"alto","kx1",2008,"Maruti",6));
            carList.add(new Car(1L,"polo","topline",2010,"Volks",5));
            carList.add(new Car(1L,"kwid","lxi",2010,"Renault",5));
            
        }
        catch(Exception e) {
            System.out.println("Could not init Data");
        }
        
    }
    
}















import java.util.ArrayList;
import java.util.Date;


public class Member {
private long id;
private String firstName,lastName,email,contactNumber,licenseNumber;
private Date licenseStartDate,licenseExpiryDate;
private ArrayList<MemberCar> carList;
public long getId() {
return id;
}
public void setId(long id) {
this.id = id;
}
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public ArrayList<MemberCar> getCarList() {
return carList;
}
public void setCarList(ArrayList<MemberCar> carlist) {
this.carList = carlist;
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public String getLicenseNumber() {
return licenseNumber;
}
public void setLicenseNumber(String licenseNumber) {
this.licenseNumber = licenseNumber;
}
public Date getLicenseStartDate() {
return licenseStartDate;
}
public void setLicenseStartDate(Date licenseStartDate) {
this.licenseStartDate = licenseStartDate;
}
public Date getLicenseExpiryDate() {
return licenseExpiryDate;
}
public void setLicenseExpiryDate(Date licenseExpiryDate) {
this.licenseExpiryDate = licenseExpiryDate;
}
public Member() {
super();
// TODO Auto-generated constructor stub
}
public Member(long id, String firstName, String lastName, String email,
String contactNumber, String licenseNumber, Date licenseStartDate,
Date licenseExpiryDate) {
super();
this.id = id;
this.firstName = firstName;
this.lastName = lastName;
this.email = email;
this.contactNumber = contactNumber;
this.licenseNumber = licenseNumber;
this.licenseStartDate = licenseStartDate;
this.licenseExpiryDate = licenseExpiryDate;
}
}



















import java.util.ArrayList;
import java.util.HashMap;


public class MemberCar {

private long id;
private Member member;
private Car car;
private String carRegistrationNumber,carColor;
public long getId() {
return id;
}
public void setId(long id) {
this.id = id;
}
public Member getMember() {
return member;
}
public void setMember(Member member) {
this.member = member;
}
public Car getCar() {
return car;
}
public void setCar(Car car) {
this.car = car;
}
public String getCarRegistrationNumber() {
return carRegistrationNumber;
}
public void setCarRegistrationNumber(String carRegistrationNumber) {
this.carRegistrationNumber = carRegistrationNumber;
}
public String getCarColor() {
return carColor;
}
public void setCarColor(String carColor) {
this.carColor = carColor;
}
public MemberCar(long id,  Car car,Member member,
String carRegistrationNumber, String carColor) {
super();
this.id = id;
this.member = member;
this.car = car;
this.carRegistrationNumber = carRegistrationNumber;
this.carColor = carColor;
}
public MemberCar() {
super();
// TODO Auto-generated constructor stub
}
public static MemberCar createInstance(String s,ArrayList<Member> memberList, ArrayList<Car> carList) {
String str[]=s.split(",");
Member member=null;
for(Member m:memberList){
if(m.getId()==Long.parseLong(str[1]))
member=m;
}
Car car=null;
for(Car c:carList){
if(c.getId()==Long.parseLong(str[2]))
car=c;
}
MemberCar mc=new MemberCar(Long.parseLong(str[0]), car, member, str[3], str[4]);
// TODO Auto-generated method stub
return mc;
}
public static HashMap<String, ArrayList<MemberCar>> groupByColor(ArrayList<MemberCar> memberCarList) {
HashMap<String, ArrayList<MemberCar>> map=new HashMap<>();
for(MemberCar mc:memberCarList){
String color=mc.getCarColor();
if(map.containsKey(color)){
ArrayList<MemberCar> list=map.get(color);
list.add(mc);
}
else{
ArrayList<MemberCar> list=new ArrayList<>();
list.add(mc);
map.put(color, list);
}
}
// TODO Auto-generated method stub
return map;
}
}

 Page of
Validate customer details
 
There are always typical human entry errors that need to be validated so that the data saved in the system are valid and can be used for later processing. Simple Rules that need to be taken care:

Create a Class named as Main, which contains the following methods, 

No	Method Name
1	public static void parseName(BufferedReader br)
2	public static void isValidEmail(BufferedReader br)
3	public static void playContactNumber(BufferedReader br)
4	public  static void userLifeTime(BufferedReader br)

parseName ( ):
The customer name contains first name and last name separated by any “special character”. Given a name, display the first and last name.
Examples of Special character like:  ' , ' , '@' , '#' , . . . . . (NOTE: There can be any special character).

isValidEmail ( ):
Check if the email address entered is valid. A Valid email address would end with 3 domains (com, org, net) and would contain a “@”.

playContactNumber ( ):
Every contact number would be in the format (ISD Code-STD Code-Number). The size of the fields would be (3 digits – 4 digits – 10 digits). Given a contact number, find the sum of last 10 digits until it reaches to a single digit. Print the digit.

userLifeTime ( ):
Given a “createdOn” Date, print number of minutes before which the user was created. Assume the current date to be ‘28-07-2017 09:00’.
Date format : "dd/MM/yyyy HH:mm";

Example for LifeTime calculation:
If the createdOn date is "28-07-2017 08:20", then the life time is 40 minutes.
 

Sample Input and Output: 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
1 
Enter name: 
John%Abraham*Lincoln 
John Abraham Lincoln 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
1 
Enter name: 
Marc;Farnando 
Marc Farnando 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
2 
Enter E-mail id: 
john.com 
Email is invalid 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
2 
Enter E-mail id: 
john@.com 
Email is invalid 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
2 
Enter E-mail id: 
john@a.com 
Email id is valid 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
3 
Enter contact number: 
844-7485-44784578459 
Contact number invalid 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
3 
Enter contact number: 
58-847-8547123654 
Contact number invalid 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
3 
Enter contact number: 
847-7845-9557898865 
Sum of contact number: 7 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
4 
Enter Created on date(dd-MM-yyyy HH:mm): 
25-07-2017 10:30 
Life time is: 4230 minutes 
Menu 
1. Parse Name 
2. Valid Email 
3. Play Contact Number 
4. User Lifetime 
5. Exit 
5






import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;


public class Main {

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String sb = "Menu\n1. Parse Name\n2. Valid Email\n3. Play Contact Number\n4. User Lifetime\n5. Exit";
        while(true)
        {
            System.out.println(sb);
            
            int inp = Integer.parseInt(br.readLine());
            switch(inp) {
                case 1: 
                    //fill code here.
                 
                 
                 parseName(br);
                 
                 
                    break;
                
                case 2: 
                    //fill code here.
                 
                 isValidEmail(br);
                    break;
                
                case 3: 
                    //fill code here.
                 playContactNumber(br);
                    break;
                
                case 4: 
                    //fill code here.
                 userLifeTime(br);
                    break;
                    
                case 5:
                    //fill code here.
                 System.exit(0);
            }
        }
    }
    
    public static void parseName(BufferedReader br) throws Exception
    {
        System.out.println("Enter name:");
        String name = br.readLine();
//fill code here.
       char ch[]=name.toCharArray();
       for(int i=0;i<ch.length;i++)
       {
        if(!Character.isAlphabetic(ch[i]))
        {
        System.out.println(" ");
        }
        else
        System.out.print(ch[i]);
       }
       System.out.println();
    }
    public static void isValidEmail(BufferedReader br) throws Exception
    {
        System.out.println("Enter E-mail id:");
        String email = br.readLine();
        if(email.contains("@")&&(email.endsWith(".com")||email.endsWith(".org")||email.endsWith(".net")))
            {
         String a[]=email.split("@");
         if(a[1].length()>4)
         
         
         System.out.println("Email id is valid");
            
        else
            System.out.println("Email is invalid");
    }
    else
      System.out.println("Email is invalid");
}
  
    
    
    public static void playContactNumber(BufferedReader br) throws Exception
    {
       
        System.out.println("Enter contact number:");
        String number = br.readLine();
        int k=0;
//fill code here.
        if((number.matches("[0-9]{3}[-]{1}[0-9]{4}[-]{1}[0-9]{10}"))&&(number.length()==19))
        { for(int i=9;i<number.length();i++)
        {
         k=k+Integer.parseInt(number.substring(i,i+1));
         while(k>9)
         {
         k=k%10+k/10;
         }
         }
        
        System.out.println("Sum of contact number: "+k);
        
    }
    else
  System.out.println("Contact number invalid");
    }

    public  static void userLifeTime(BufferedReader br) throws Exception
    {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm");
        Date startDate = sdf.parse("28-07-2017 09:00");
        System.out.println("Enter Created on date(dd-MM-yyyy HH:mm):");
        //fill code here.
        String k=br.readLine();
        Date endDate=sdf.parse(k);
        long s=Math.abs(startDate.getTime()-endDate.getTime());
        System.out.println("Life time is: "+(s/60000)+" minutes");
        
    }
    
}

 Page of
p { margin-bottom: 0.25cm; border: medium none; padding: 0cm; direction: ltr; line-height: 120%; text-align: left; }a:link { }
Client Interview Preparation

 
You are on the verge of completing your training and being on-boarded to your first project. Before on-boarding, you are required to take up a client interview. Your academy wants to ensure that you clear the interview with flying colors. In a quick brainstorming, they thought every project would have an end user (Customer and Address). So they decided to frame questions based on these two classes.



Customer Comparison

Create a class named as Customer, which contains following private variables/ attributes, 
Member Field name	Type
id	Long
name	String
gender	Character (M/F)
email	String
contactNumber	String
createdOn	Date (time in 24 hrs clock) dd/MM/yyyy HH:mm:ss
	 



Mark all the attributes as private
Create / Generate appropriate Getters & Setters.
Add a default constructor and a parameterized constructor to take in all attributes.
When the “customer” object is printed, it should display the following details: (override toString method)
•	Customer: name
•	Customer contact details: contactNumber, email
Two members are considered same if they have same email and contactNumber. Implement the logic in the appropriate function. (override equals method)

Input format:
By default, there are only two customers. More details in Sample IO.

Output format:
If both the customers are same then print "Customer 1 is same as Customer 2" without quotes.
Otherwise, print "Customer 1 and Customer 2 are different" without quotes.
Refer Sample Input and Outputs.

HINT:
Please print customer id in the Main class.
The toString method should print as specified in the problem statement [ Name and contact details alone]

Sample Input and Output 1:
Customer1 :
id: 
45
name: 
John
Gender: 
M
email: 
john@a.com
contact number: 
+997-4854-7485965123
createdOn: 
12/10/2016 09:30:00
Customer2 :
id: 
12
name: 
Marc
Gender: 
M
email: 
marc@a.com
contact number: 
+997-4854-7485965123
createdOn: 
11/10/2016 10:00:00
Customer id 45
Customer: John
Customer contact details:+997-4854-7485965123, john@a.com
Customer id 12
Customer: Marc
Customer contact details:+997-4854-7485965123, marc@a.com
Customer 1 and Customer 2 are different

Sample Input and Output 2:
Customer1 :
id: 
12
name: 
James William
Gender: 
M
email: 
james@a.com
contact number: 
+88-7489-9958748512
createdOn: 
15/02/2017 10:00:00
Customer2 :
id: 
78
name: 
James Camron
Gender: 
M
email: 
james@a.com
contact number: 
+88-7489-9958748512
createdOn: 
03/03/2017 16:30:00
Customer id 12
Customer: James William
Customer contact details:+88-7489-9958748512, james@a.com
Customer id 78
Customer: James Camron
Customer contact details:+88-7489-9958748512, james@a.com
Customer 1 is same as Customer 2





import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

public class Main {
    
    public static void main(String[] args) throws IOException, ParseException {
        
        String id,name,email,contactNumber,createdOn,gender; 
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int i;
        
        ArrayList<Customer> customerList = new ArrayList<>();
        for(i=0;i<2;i++) {
            System.out.println("Customer"+(i+1)+" :");
            System.out.println("id: ");
            id = br.readLine();
            System.out.println("name: ");
            name = br.readLine();
            System.out.println("Gender: ");
            gender = br.readLine();
            System.out.println("email: ");
            email = br.readLine();
            System.out.println("contact number: ");
            contactNumber = br.readLine();
            System.out.println("createdOn: ");            
            createdOn = br.readLine(); 
            Date d = sdf.parse(createdOn);
            Customer c = new Customer(Long.parseLong(id),name,gender.charAt(0),email,contactNumber,d);
            customerList.add(c);
        }
        
        for(Customer c : customerList)
        {
         System.out.println("Customer id "+c.getId());
         System.out.println(c);
        }
        
        Iterator<Customer> iter1=customerList.iterator(); 
        Customer c1=iter1.next();
        Customer c2=iter1.next(); 
        //fill code here.
        if(c1.equals(c2)) {
            System.out.println("Customer 1 is same as Customer 2");
        }
        else {
            System.out.println("Customer 1 and Customer 2 are different");
        }
        
    }
    
}













import java.util.Date;


public class Customer {

@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result
+ ((contactNumber == null) ? 0 : contactNumber.hashCode());
result = prime * result + ((email == null) ? 0 : email.hashCode());
return result;
}

@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
Customer other = (Customer) obj;
if (contactNumber == null) {
if (other.contactNumber != null)
return false;
} else if (!contactNumber.equals(other.contactNumber))
return false;
if (email == null) {
if (other.email != null)
return false;
} else if (!email.equals(other.email))
return false;
return true;
}

@Override
public String toString() {
return "Customer: "+getName()+"\nCustomer contact details:"+getContactNumber()+", "+getEmail();
}
private Long id; 
private String name; 
private char gender; 
private String email; 
private String contactNumber; 
private Date createdOn;
public Customer()
{
}
public Customer(Long id, String name, char gender, String email,
String contactNumber, Date createdOn) {
super();
this.id = id;
this.name = name;
this.gender = gender;
this.email = email;
this.contactNumber = contactNumber;
this.createdOn = createdOn;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public char getGender() {
return gender;
}
public void setGender(char gender) {
this.gender = gender;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public Date getCreatedOn() {
return createdOn;
}
public void setCreatedOn(Date createdOn) {
this.createdOn = createdOn;
}
}

 Page of
Overloading - Payment
 
With all the software systems that are being built, one of the widely used utilities in the financial sector is payments through various channels. The widely used channels are OnlineBanking, CreditCard and Wallet. The banks generate revenue by charging a small margin as part of the usage. Create a class called PaymentUtil. Overload a method “makePayment” as given below in the specification and calculate the total payment amount.

Create a class named as PaymentUtil, which contains following Overload methods,

No	Method Name	Method Description
1	public Double makePayment(Map<String,Float> bankTax,String bankName,Double amount)	This method calculates the total amount (amount + service tax amount). Here the tax percent gets varied depending on the bank. Fetch the corresponding service tax from a map collection by bank name. Map<String bankName, Float serviceTax>
This map is prefilled. Only banks present in the map would be part of input.
2	public Double makePayment(Double amount)	This method calculates the total amount (include service tax and value added tax(VAT). First, calculate the service tax amount and then calculate the VAT amount.
[ VAT % is applied on total amount+service tax ]
3	public Double makePayment(Double amount, Float discountPercent)	This method calculates the total amount, which is a discount from the amount with parameterized discount percentage.

Create the class named as Main, which contains the main method. Input and output operations will be done in the main method.
It calls various methods in PaymentUtil class to perform the task.

The following data will be placed inside the static block in the Main class 
onlineBankingMap.put("ICICI", 4.2f);
onlineBankingMap.put("IBRD", 3f);
onlineBankingMap.put("IFC", 4.9f);
onlineBankingMap.put("HSBC", 3.9f);

That data will provide in template code.

Problem Specification:
Overload a method “makePayment” as given in the specification and calculate the total payment amount.
The bank name is case insensitive.
The service tax for credit card is 5.2%.
The VAT for the credit card is 2.3%.
The discount  percentege for Wallet is 20.2%.

Input and Output format:
Refer Sample Input and Output.

Sample Input and Output: 
1. Online banking
2. Credit card
3. Wallet
Enter the choice:
1
Enter the user name:
ICICI74484
Enter the password:
Mu7485
Enter the amount:
12560
Enter the bank name:
icici
Total amount(Inclusive of Service Tax): 13087.52

Sample Input and Output 2: 
1. Online banking
2. Credit card
3. Wallet
Enter the choice:
2
Enter the account number:
8458 9665 7485 2256
Enter the pin:
8451
Enter the amount:
16300
Total amount(Inclusive of Service Tax and VAT): 17541.99

Sample Input and Output 3: 
1. Online banking
2. Credit card
3. Wallet
Enter the choice:
3
Enter the user name:
HSBC7457
Enter the password:
Yu67488
Enter the amount:
28500
Discounted amount: 22743.00
 





import java.io.*;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

public class Main {

    static Float discount = 20.2f;
    static Map<String, Float> onlineBanking;
    static
    {
        onlineBanking = new HashMap<>();
        onlineBanking.put("ICICI", 4.2f);
        onlineBanking.put("IBRD", 3f);
        onlineBanking.put("IFC", 4.9f);
        onlineBanking.put("HSBC", 3.9f);
    }
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        Double amount;
        
        Double totalPayment;
        PaymentUtil paymentUtil = new PaymentUtil();
        String userName,password;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("1. Online banking\n").append("2. Credit card\n").append("3. Wallet\n")
                .append("Enter the choice:");
        System.out.println(stringBuilder.toString());
        Integer choice = new Integer(br.readLine());
        DecimalFormat df = new DecimalFormat("#.00");
        switch(choice)
        {
            case 1:
                
                System.out.println("Enter the user name:");
                userName = br.readLine();
                System.out.println("Enter the password:");
                password = br.readLine();
                System.out.println("Enter the amount:");
                amount = new Double(br.readLine());
                System.out.println("Enter the bank name:");
                String bankName = br.readLine();
                System.out.println("Total amount(Inclusive of Service Tax): "+df.format(paymentUtil.makePayment(onlineBanking, bankName, amount)));    
                break;
            case 2:
                String accNo;
                Integer pin;
                System.out.println("Enter the account number:");
                accNo = (br.readLine());
                System.out.println("Enter the pin:");
                pin = new Integer(br.readLine());
                System.out.println("Enter the amount:");
                amount = new Double(br.readLine());
                System.out.println("Total amount(Inclusive of Service Tax and VAT): "+df.format(paymentUtil.makePayment(amount)));
                break;
            case 3:
               System.out.println("Enter the user name:");
                userName = br.readLine();
                System.out.println("Enter the password:");
                password = br.readLine();
                System.out.println("Enter the amount:");
                amount = new Double(br.readLine());
                System.out.println("Discounted amount: "+df.format(paymentUtil.makePayment(amount, discount)));
                break;
        }
    }
    
}

import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class PaymentUtil {
    
    public Double makePayment(Map<String,Float> bankTax,String bankName,Double amount)
    {
        
        Set<String> keys = bankTax.keySet();
        double amnt=0;
        for(String s : keys)
        {
         if(s.equalsIgnoreCase(bankName))
         {
         amnt=bankTax.get(s);
         }
        } 
        return amount+(amount*(amnt/100));
    }
    
    public Double makePayment(Double amount)
    {
        Float serviceTax = 5.2f;
        Float vat = 2.3f;
        
        double d1=amount+(amount*serviceTax/100);
        return d1+(d1*(vat/100));
        
    }
    
    public Double makePayment(Double amount, Float discountPercent)
    {
        return amount-(amount*(discountPercent/100));
    }
    
}



Page of
Find customer by id and state
 
Create a class named as Customer, which contains following private variable/ attributes, 
 
 
Member Field name	Type
id	Long
name	String
gender	Character (M/F)
email	String
contactNumber	String
createdOn	Date (time in 24 hrs clock) dd/MM/yyyy HH:mm:ss
address	Address


Mark all the attributes as private
Create / Generate appropriate Getters & Setters.
Add a default constructor and a parameterized constructor to take in all attributes.
Implement the following methods in the Customer class:
 
No	Method Name	Method Description
1	public Customer findCustomerById(List<Customer> customerList, Long id)	In this method, that takes up an id and returns a matching customer object. If the object is not found then return null.
2	public List<Customer> findCustomerListByState(List<Customer> customerList, String state)	In this method, given a state as a parameter, print the list of customers who belong to the state.
 

Create a class named as Address, which contains following private variable/ attributes, 

Member Field name	Type
street	String
city	String
state	String
country	String
zipCode	Integer

Include appropriate getters and setters.
Add a default constructor and a parameterized constructor to take in all attributes.
 
The customer details will be populated in a static block in this class(provide in the template code).
Refer Sample Input and Output.
Use the following format for specified output.
"%-15s %-20s %-15s %-15s %s\n", "Name", "Email", "City", "Country", "Zipcode"

Problem Specification:
If the customer with the id is not found then print "No Customer with that id" without quotes.
If none of the customer belongs to the state then print "No customer belongs that state" without quotes.

Sample Input and Output 1:
Menu
1. Find customer by id
2. Find customer by states
Enter the choice:
1
Enter the Id to find customer:
5
Customer Name: Tedmond
Gender: M
Email: tedmond@a.com
Contact Number: +88-7844-8854799658
Street: Port Townsend
City: Tacoma
State: Washington
Country: USA
Zip code: 98412
 

Sample Input and Output 2:
Menu
1. Find customer by id
2. Find customer by states
Enter the choice:
2
Enter the state:
Texas
Name	Email	Contact no	Street	City	Country	Zipcode
Aekerman	aekerman@a.com
+78-7485-9555874846	Avenue	Plano	USA	75025
Madeleine	madeleine@a.com
+78-9855-7488742136	Parc St	Lubbock	USA	79404
Raymond	raymond@a.com
+89-7748-8859112478	Wall Street	Texas City	USA	77591
 
 





main

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
public class Main {

    static List<Customer> customerList;
    static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    static
    {
        customerList = new ArrayList<>();
        try
        {
        customerList.add(new Customer(1, "John Smith",'M', "johnsmith@a.com", "+98-7488-8554744596",sdf.parse("15/02/2017 16:30:00"),
                new Address("15th St","Buffalo", "New York", "USA", 14220)));
        customerList.add(new Customer(2, "Aekerman",'M', "aekerman@a.com","+78-7485-9555874846",sdf.parse("18/03/2017 15:45:00"),
                new Address("Avenue","Plano", "Texas", "USA", 75025)));
        customerList.add(new Customer(3, "Madeleine",'F', "madeleine@a.com", "+78-9855-7488742136",sdf.parse("22/02/2017 16:45:00"),
                new Address("Parc St","Lubbock", "Texas", "USA", 79404)));
        customerList.add(new Customer(4, "Edrick",'M', "edrick@a.com", "+99-8787-7844859978",sdf.parse("15/03/2017 15:45:00"),
                new Address("145th St","Wasilla", "Alaska", "USA", 99629)));
        customerList.add(new Customer(5, "Tedmond", 'M', "tedmond@a.com", "+88-7844-8854799658",sdf.parse("15/03/2017 15:45:00"),
                new Address("Port Townsend","Tacoma", "Washington", "USA", 98412)));
        customerList.add(new Customer(6, "Nelson",'M', "nelson@a.com", "+88-7848-8857488956",sdf.parse("17/05/2017 10:35:00"),
                new Address("1st St","Akron", "Ohio", "USA", 44304)));
        customerList.add(new Customer(7, "Dalton", 'M', "dalton@a.com", "+88-8879-8854741124",sdf.parse("01/05/2017 17:25:00"),
                new Address("Lake city", "Newburgh", "New York", "USA", 12550)));
        customerList.add(new Customer(8, "Raymond", 'M', "raymond@a.com", "+89-7748-8859112478",sdf.parse("17/06/2017 08:45:00"),
                new Address("Wall Street","Texas City", "Texas", "USA", 77591)));
        customerList.add(new Customer(9, "Rosemary", 'F', "rosemary@a.com", "+89-7844-8857489958", sdf.parse("22/04/2017 16:15:00"),
                new Address("Georgetown","Olympia", "Washington", "USA", 98506)));
        customerList.add(new Customer(10, "Ruford", 'M', "ruford@a.com", "+88-7485-8597448596", sdf.parse("12/02/2017 09:05:00"),
                new Address("Baker street", "Miles City", "Montana", "USA", 59301)));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    public static void main(String[] args) throws Exception {
        
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Menu\n1. Find customer by id\n2. Find customer by states\nEnter the choice:");
        switch(new Integer(bufferedReader.readLine()))
        {
            case 1:
                System.out.println("Enter the Id to find customer:");
                Customer c=new Customer().findCustomerById(customerList, new Integer(bufferedReader.readLine()));
                if(c!=null)
                {
                 System.out.println("Customer Name: "+c.getName());
                 System.out.println("Gender: "+c.getGender());
                 System.out.println("Email: "+c.getEmail());
                 System.out.println("Contact Number: "+c.getContactNumber());
                 System.out.println("Street: "+c.getAddress().getStreet());
                 System.out.println("City: "+c.getAddress().getCity());
                 System.out.println("State: "+c.getAddress().getState());
                 System.out.println("Country: "+c.getAddress().getCountry());
                 System.out.println("Zip code: "+c.getAddress().getZipCode());
                }
                else
                    System.out.println("No Customer with that id");
                break;
            case 2:
                System.out.println("Enter the state:");
                List<Customer> clist=new Customer().findCustomerListByState(customerList, bufferedReader.readLine());
                if(!(clist.isEmpty()))
                {
                    System.out.format("%-15s %-20s %-20s %-15s %-15s %-15s %s\n","Name","Email", "Contact no","Street","City","Country","Zipcode");
                    for(Customer c1:clist){
                     System.out.format("%-15s %-20s %-20s %-15s %-15s %-15s %d\n",c1.getName(),c1.getEmail(), c1.getContactNumber(),c1.getAddress().getStreet(),c1.getAddress().getCity(),c1.getAddress().getCountry(),c1.getAddress().getZipCode());
                    }
                }
                else
                    System.out.println("No customer belongs that state");
                break;
        }
        
    }
    
}


customer

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


public class Customer {
private int id;
private String name;
private Character gender;
private String email;
private String contactNumber;
private Date createdOn;
private Address address;
public Address getAddress() {
return address;
}
public void setAddress(Address address) {
this.address = address;
}
public Customer(int id, String name, Character gender, String email,
String contactNumber, Date createdOn, Address address) {
super();
this.id = id;
this.name = name;
this.gender = gender;
this.email = email;
this.contactNumber = contactNumber;
this.createdOn = createdOn;
this.address = address;
}
@Override
public String toString() {
return "Customer: "+name+"\nCustomer contact details:"+contactNumber+", "+email;
}
public Customer() {
super();
// TODO Auto-generated constructor stub
}
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public Character getGender() {
return gender;
}
public void setGender(Character gender) {
this.gender = gender;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public Date getCreatedOn() {
return createdOn;
}
public void setCreatedOn(Date createdOn) {
this.createdOn = createdOn;
}
public static Customer findCustomerById(List<Customer> customerList, int id){
Customer c=null;
for(Customer c1:customerList){
if(c1.getId()==id)
c=c1;
}
return c;
}
public static List<Customer> findCustomerListByState(List<Customer> customerList, String state){
List<Customer> clist=new ArrayList<Customer>();
for(Customer c:customerList){
if(c.getAddress().getState().equalsIgnoreCase(state))
clist.add(c);
}
return clist;
}
}


address

public class Address {

private String street,city,state,country;
private int zipCode;
public String getStreet() {
return street;
}
public void setStreet(String street) {
this.street = street;
}
public String getCity() {
return city;
}
public void setCity(String city) {
this.city = city;
}
public String getState() {
return state;
}
public void setState(String state) {
this.state = state;
}
public String getCountry() {
return country;
}
public void setCountry(String country) {
this.country = country;
}
public int getZipCode() {
return zipCode;
}
public void setZipCode(int zipCode) {
this.zipCode = zipCode;
}
public Address(String street, String city, String state, String country,
int zipCode) {
super();
this.street = street;
this.city = city;
this.state = state;
this.country = country;
this.zipCode = zipCode;
}
public Address() {
super();
// TODO Auto-generated constructor stub
}
}

   Page of
Batch Processing
 
Usually, As part of batch processing jobs, a CSV or TXT file is read, relevant objects are created and database is populated with CSV contents.
Create the list of customer objects with the CSV content provided in the sample IO. 
Create a class named as Customer, which contains following private variable/ attributes,   
 
Member Field name	Type
id	Long
name	String
gender	Character (M/F)
email	String
contactNumber	String
createdOn	Date (time in 24 hrs clock) dd/MM/yyyy HH:mm:ss
	 
 

Mark all the attributes as private
Create / Generate appropriate Getters & Setters.
Add a default constructor and a parameterized constructor to take in all attributes.
In the Customer class, implement the following methods.

No	Method Name	Method Description
1	public static List<Customer> populateCustomers(List<String> csvList)	In this method, given parameter is the list of customer details in a string format where each data is separated by a comma. Parse the string and create a customer arrayList.
2	public static List<Customer> findCustomerNameFromList(List<Customer> customers, String subString)	In this method, given part of customer name, search the customer list based on name and return the customer list with matching names.


Input format:
The first input consists of an integer that corresponds  to the number of customer  n.
The next n line of the input consists of a string that corresponds to the customer details, which is separated  by a comma.
Input sequence:
id, name, gender, email, contactNumber, createdOn.
The last input is the substring that used to search the specified customers.

Output format:
Refer Sample Input and Output.

HINT:
The implementation can either be done in the BO class or static method in the customer class.
In real time projects, its done in the BO Class and a fallback is given the customer class as static method.
Ensure the static methods in the Customer class is present.
The implementation can be in the BO layer with the static methods calling the methods in BO layer.

Main - Customer class static methods - CustomerBO methods.




Sample Input and Output:   
Enter the number of customer:
5
Enter the customer 1 detail:
12,John Smith,M,johnsmith@a.com,+85-7489-8596478596,12/12/2016 12:30:00
Enter the customer 2 detail:
15,Tedmond,M,tedmond@a.com,+45-9857-5266987485,14/01/2017 04:30:00
Enter the customer 3 detail:
11,Dalton,M,dalton@a.com,+48-8967-7485947558,12/02/2017 20:00:00
Enter the customer 4 detail:
5,Raymond,M,raymond@a.com,+88-8745-8554712569,28/01/2017 10:30:00
Enter the customer 5 detail:
9,Ruford,M,ruford@a.com,+88-4859-7714589633,01/04/2017 17:45:00
Id	Name	Gender	Email	Contact no 	Created on
12	John Smith	M	johnsmith@a.com
+85-7489-8596478596	12/12/2016 12:30:00
15	Tedmond	M	tedmond@a.com
+45-9857-5266987485	14/01/2017 04:30:00
11	Dalton	M	dalton@a.com
+48-8967-7485947558	12/02/2017 20:00:00
5	Raymond	M	raymond@a.com
+88-8745-8554712569	28/01/2017 10:30:00
9	Ruford	M	ruford@a.com
+88-4859-7714589633	01/04/2017 17:45:00
Enter the substring to search from customer list:
mon
Id	Name	Gender	Email	Contact no	Created on
15	Tedmond	M	tedmond@a.com
+45-9857-5266987485	14/01/2017 04:30:00
5	Raymond	M	raymond@a.com
+88-8745-8554712569	28/01/2017 10:30:00
                                                
 







import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Customer {

    private Long id;
    private String name;
    private Character gender;
    private String email;
    private String contactNumber;
    private Date createdOn;
public Customer(Long id, String name, Character gender, String email,
String contactNumber, Date createdOn) {
super();
this.id = id;
this.name = name;
this.gender = gender;
this.email = email;
this.contactNumber = contactNumber;
this.createdOn = createdOn;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public Character getGender() {
return gender;
}
public void setGender(Character gender) {
this.gender = gender;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public Date getCreatedOn() {
return createdOn;
}
public void setCreatedOn(Date createdOn) {
this.createdOn = createdOn;
}
    

//Generate getters and setters.
public static List<Customer> populateCustomers(List<String> csvList) throws NumberFormatException, ParseException{
List<Customer> a = new ArrayList<Customer>();
SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:SS");
for(int i=0;i<csvList.size();i++){
String b[] = csvList.get(i).split(",");
Customer c = new Customer(Long.parseLong(b[0]), b[1], b[2].charAt(0), b[3], b[4], sdf.parse(b[5]));
a.add(c);
}
return a;
}
      
public static List<Customer> findCustomerNameFromList(List<Customer> customers, String subString){
List<Customer> a = new ArrayList<Customer>();
for(int i=0;i<customers.size();i++){
if(customers.get(i).name.contains(subString)){
a.add(customers.get(i));
}
}
return a;
}
}


























import java.text.SimpleDateFormat;
import java.util.*;
public class CustomerAddressBO {
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    public List<Customer> populateCustomers(List<String> csvList) throws Exception
    {
        //fill code here.
     List<Customer> a = new ArrayList<Customer>();
SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:SS");
for(int i=0;i<csvList.size();i++){
String b[] = csvList.get(i).split(",");
Customer c = new Customer(Long.parseLong(b[0]), b[1], b[2].charAt(0), b[3], b[4], sdf.parse(b[5]));
a.add(c);
}
return a;
    }
    public List<Customer> findCustomerNameFromList(List<Customer>customers,String subString) throws Exception
    {
        //fill code here.
     List<Customer> a = new ArrayList<Customer>();
for(int i=0;i<customers.size();i++){
if(customers.get(i).getName().contains(subString)){
a.add(customers.get(i));
}
}
return a;
    }
    
    
}





















import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class Main {
    
    public static void main(String[] args) throws Exception {
        
        CustomerAddressBO customerAddressBO = new CustomerAddressBO();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter the number of customer:");
        int n = new Integer(br.readLine());
        List<String> csvList = new ArrayList<>();
        
        for(int i = 0; i<n ;i++)
        {
            System.out.println("Enter the customer "+(i+1)+" detail:");
            String a = br.readLine();
            csvList.add(a);
        }
        List<Customer> customers = Customer.populateCustomers(csvList);
        displayCustomerDetails(customers);
        System.out.println("Enter the substring to search from customer list:");
        String a = br.readLine();
        List<Customer> customers1 = Customer.findCustomerNameFromList(customers, a);
        displayCustomerDetails(customers1);
    }
    public static void displayCustomerDetails(List<Customer> customers)
    {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        System.out.format("%-5s %-15s %-5s %-25s %-20s %s\n", "Id","Name","Gender","Email","Contact no","Created on");
        //fill code here.
        for(Customer c:customers){
         System.out.format("%-5s %-15s %-5s %-25s %-20s %s\n", c.getId(),c.getName(),c.getGender(),c.getEmail(),c.getContactNumber(),sdf.format(c.getCreatedOn()));
        }
    }
}

   Page of
Customer & Hashmaps
 
Create a class named as Customer, which contains following private variables/ attributes,

 
Member Field name	Type
id	Long
name	String
gender	Character (M/F)
email	String
contactNumber	String
createdOn	Date (time in 24 hrs clock) dd/MM/yyyy HH:mm:ss
address	Address


Mark all the attributes as private
Create / Generate appropriate Getters & Setters.
Add a default constructor and a parameterized constructor to take in all attributes.

No	Method Name	Method Description
1	public static HashMap<String, Integer> convertCsvToMap(List<String> csvDetails)	This method returns a Hashmap <String state, Integer count>. The key would be the state name and count would be the number of customers in the particular state
2	public static List<Customer> getCustomerListFromMap(Map<String, Integer> customerMap)	This method returns the customer list, which is sorted (Ascending) based on both state and name. State – sorted based on string ascending order. Customer – sorted based on name ascending order.

Create a class named as Address, which contains following private variable/ attributes, 
 
Member Field name	Type
street	String
city	String
state	String
country	String
zipCode	Integer 

Include appropriate getters and setters.
Add a default constructor and a parameterized constructor to take in all attributes.

Hint: You can get all the keys from hashmap and create a sorted list.
State – sorted based on string ascending order.
Customer – sorted based on name ascending order.

Please add the address data member from the template code.
Also for the second function, Use the arraylist as a static variable or additional attribute.


Input Format:

The first input consists of an integer that corresponds to the number of customers n.
The next n input consists of a string that corresponds to the customer details, which is separated by the comma (,).
Input sequence - id,name,email,state,country.

Output Format:

The first list format is,
"%-15s %s\n","State","No of customer(s)"

Second list:
The Format for the output is,
"%-5s %-15s %-5s %-20s %-20s %-15s %-15s %-15s %s\n", "Id", "Name", "Gender", "Email",  "Created on", "City", "State", "Country", "Zipcode"

Sample Input and Output:
Enter the number of customer:
10
Enter the customer 1 details:
1,John Smith,M,johnsmith@a.com,+89-7485-8578974885,15/01/2016 10:30:00,112th St,Utica,New York,USA,13455
Enter the customer 2 details:
2,Aekerman,M,aekerman@a.com,+99-7489-8857945569,14/02/2016 16:30:00,Avenue,Austin,Texas,USA,88596
Enter the customer 3 details:
3,Madeleine,F,madeleine@a.com,+88-7859-7748599989,25/01/2016 10:00:00,155th St,Plano,Texas,USA,56684
Enter the customer 4 details:
4,Edrick,M,edrick@a.com,+99-7482-4115233987,18/12/2016 07:30:00,111th St,Sitka,Alaska,USA,66584
Enter the customer 5 details:
5,Tedmond,M,tedmond@a.com,+77-8599-4225610074,05/01/2016 08:30:00,Parc St,Olympia,Washington,USA,85574
Enter the customer 6 details:
6,Nelson,M,nelson@a.com,+78-7488-4221258447,02/01/2017 10:30:00,5th St,Dayton,Ohio,USA,84587
Enter the customer 7 details:
7,Dalton,M,dalton@a.com,+78-8547-8555479512,15/01/2017 20:30:00,North St,Buffallo,New York,USA,25664
Enter the customer 8 details:
8,Raymond,M,raymond@a.com,+89-7484-8577458895,25/02/2017 10:30:00,15th St,Waco,Texas,USA,7858
Enter the customer 9 details:
9,Rosemary,F,rosemary@a.com,+88-4888-7485998741,20/02/2017 12:30:00,15th St,Tacoma,Washington,USA,87458
Enter the customer 10 details:
10,Ruford,M,ruford@a.com,+84-422-9887485995,22/03/2017 9:30:00,9th St,Butte,Montana,USA,22458
State	No of customer(s)
Alaska	1
Montana	1
New York	2
Ohio	1
Texas	3
Washington	2
Id	Name	Gender	Email	Created on	City	State	Country	Zipcode
4	Edrick	M	edrick@a.com
18/12/2016 07:30:00	Sitka	Alaska	USA	66584
10	Ruford	M	ruford@a.com
22/03/2017 09:30:00	Butte	Montana	USA	22458
7	Dalton	M	dalton@a.com
15/01/2017 20:30:00	Buffallo	New York	USA	25664
1	John Smith	M	johnsmith@a.com
15/01/2016 10:30:00	Utica	New York	USA	13455
6	Nelson	M	nelson@a.com
02/01/2017 10:30:00	Dayton	Ohio	USA	84587
2	Aekerman	M	aekerman@a.com
14/02/2016 16:30:00	Austin	Texas	USA	88596
3	Madeleine	F	madeleine@a.com
25/01/2016 10:00:00	Plano	Texas	USA	56684
8	Raymond	M	raymond@a.com
25/02/2017 10:30:00	Waco	Texas	USA	7858
9	Rosemary	F	rosemary@a.com
20/02/2017 12:30:00	Tacoma	Washington	USA	87458
5	Tedmond	M	tedmond@a.com
05/01/2016 08:30:00	Olympia	Washington	USA	85574


 




main
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
public class Main {

    static List<Customer> customerList;
    static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    static
    {
        customerList = new ArrayList<>();
        try
        {
        customerList.add(new Customer(1, "John Smith",'M', "johnsmith@a.com", "+98-7488-8554744596",sdf.parse("15/02/2017 16:30:00"),
                new Address("15th St","Buffalo", "New York", "USA", 14220)));
        customerList.add(new Customer(2, "Aekerman",'M', "aekerman@a.com","+78-7485-9555874846",sdf.parse("18/03/2017 15:45:00"),
                new Address("Avenue","Plano", "Texas", "USA", 75025)));
        customerList.add(new Customer(3, "Madeleine",'F', "madeleine@a.com", "+78-9855-7488742136",sdf.parse("22/02/2017 16:45:00"),
                new Address("Parc St","Lubbock", "Texas", "USA", 79404)));
        customerList.add(new Customer(4, "Edrick",'M', "edrick@a.com", "+99-8787-7844859978",sdf.parse("15/03/2017 15:45:00"),
                new Address("145th St","Wasilla", "Alaska", "USA", 99629)));
        customerList.add(new Customer(5, "Tedmond", 'M', "tedmond@a.com", "+88-7844-8854799658",sdf.parse("15/03/2017 15:45:00"),
                new Address("Port Townsend","Tacoma", "Washington", "USA", 98412)));
        customerList.add(new Customer(6, "Nelson",'M', "nelson@a.com", "+88-7848-8857488956",sdf.parse("17/05/2017 10:35:00"),
                new Address("1st St","Akron", "Ohio", "USA", 44304)));
        customerList.add(new Customer(7, "Dalton", 'M', "dalton@a.com", "+88-8879-8854741124",sdf.parse("01/05/2017 17:25:00"),
                new Address("Lake city", "Newburgh", "New York", "USA", 12550)));
        customerList.add(new Customer(8, "Raymond", 'M', "raymond@a.com", "+89-7748-8859112478",sdf.parse("17/06/2017 08:45:00"),
                new Address("Wall Street","Texas City", "Texas", "USA", 77591)));
        customerList.add(new Customer(9, "Rosemary", 'F', "rosemary@a.com", "+89-7844-8857489958", sdf.parse("22/04/2017 16:15:00"),
                new Address("Georgetown","Olympia", "Washington", "USA", 98506)));
        customerList.add(new Customer(10, "Ruford", 'M', "ruford@a.com", "+88-7485-8597448596", sdf.parse("12/02/2017 09:05:00"),
                new Address("Baker street", "Miles City", "Montana", "USA", 59301)));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    public static void main(String[] args) throws Exception {
        
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Menu\n1. Find customer by id\n2. Find customer by states\nEnter the choice:");
        switch(new Integer(bufferedReader.readLine()))
        {
            case 1:
                System.out.println("Enter the Id to find customer:");
                Customer c=new Customer().findCustomerById(customerList, new Integer(bufferedReader.readLine()));
                if(c!=null)
                {
                 System.out.println("Customer Name: "+c.getName());
                 System.out.println("Gender: "+c.getGender());
                 System.out.println("Email: "+c.getEmail());
                 System.out.println("Contact Number: "+c.getContactNumber());
                 System.out.println("Street: "+c.getAddress().getStreet());
                 System.out.println("City: "+c.getAddress().getCity());
                 System.out.println("State: "+c.getAddress().getState());
                 System.out.println("Country: "+c.getAddress().getCountry());
                 System.out.println("Zip code: "+c.getAddress().getZipCode());
                }
                else
                    System.out.println("No Customer with that id");
                break;
            case 2:
                System.out.println("Enter the state:");
                List<Customer> clist=new Customer().findCustomerListByState(customerList, bufferedReader.readLine());
                if(!(clist.isEmpty()))
                {
                    System.out.format("%-15s %-20s %-20s %-15s %-15s %-15s %s\n","Name","Email", "Contact no","Street","City","Country","Zipcode");
                    for(Customer c1:clist){
                     System.out.format("%-15s %-20s %-20s %-15s %-15s %-15s %d\n",c1.getName(),c1.getEmail(), c1.getContactNumber(),c1.getAddress().getStreet(),c1.getAddress().getCity(),c1.getAddress().getCountry(),c1.getAddress().getZipCode());
                    }
                }
                else
                    System.out.println("No customer belongs that state");
                break;
        }
        
    }
    
}


customer
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


public class Customer {
private int id;
private String name;
private Character gender;
private String email;
private String contactNumber;
private Date createdOn;
private Address address;
public Address getAddress() {
return address;
}
public void setAddress(Address address) {
this.address = address;
}
public Customer(int id, String name, Character gender, String email,
String contactNumber, Date createdOn, Address address) {
super();
this.id = id;
this.name = name;
this.gender = gender;
this.email = email;
this.contactNumber = contactNumber;
this.createdOn = createdOn;
this.address = address;
}
@Override
public String toString() {
return "Customer: "+name+"\nCustomer contact details:"+contactNumber+", "+email;
}
public Customer() {
super();
// TODO Auto-generated constructor stub
}
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public Character getGender() {
return gender;
}
public void setGender(Character gender) {
this.gender = gender;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public Date getCreatedOn() {
return createdOn;
}
public void setCreatedOn(Date createdOn) {
this.createdOn = createdOn;
}
public static Customer findCustomerById(List<Customer> customerList, int id){
Customer c=null;
for(Customer c1:customerList){
if(c1.getId()==id)
c=c1;
}
return c;
}
public static List<Customer> findCustomerListByState(List<Customer> customerList, String state){
List<Customer> clist=new ArrayList<Customer>();
for(Customer c:customerList){
if(c.getAddress().getState().equalsIgnoreCase(state))
clist.add(c);
}
return clist;
}
}




address

public class Address {

private String street,city,state,country;
private int zipCode;
public String getStreet() {
return street;
}
public void setStreet(String street) {
this.street = street;
}
public String getCity() {
return city;
}
public void setCity(String city) {
this.city = city;
}
public String getState() {
return state;
}
public void setState(String state) {
this.state = state;
}
public String getCountry() {
return country;
}
public void setCountry(String country) {
this.country = country;
}
public int getZipCode() {
return zipCode;
}
public void setZipCode(int zipCode) {
this.zipCode = zipCode;
}
public Address(String street, String city, String state, String country,
int zipCode) {
super();
this.street = street;
this.city = city;
this.state = state;
this.country = country;
this.zipCode = zipCode;
}
public Address() {
super();
// TODO Auto-generated constructor stub
}
}

   Page of
Car-Service Management System - Requirement 1

Your friend, a mechanical engineer is very passionate about cars and wants to be an entrepreneur. He decides to start his own car service center and with his knowledge about cars has the capability to service all different brands of cars. You are also very keen to help him out in any means possible.
One fine day, your friend approaches you to help him setup and automate the process of tracking various customers and their service feedbacks. You decide to quickly build a small system to solve the problem.
Based on the class diagram given below, you start to build a prototype of the application.

 


Requirement 1:

td p { margin-bottom: 0cm; direction: ltr; color: rgb(0, 0, 10); text-align: left; }td p.western { font-family: "Liberation Serif",serif; font-size: 12pt; }td p.cjk { font-family: "Droid Sans Fallback"; font-size: 12pt; }td p.ctl { font-family: "FreeSans"; font-size: 12pt; }p { margin-bottom: 0.25cm; direction: ltr; color: rgb(0, 0, 10); line-height: 120%; text-align: left; }p.western { font-family: "Liberation Serif",serif; font-size: 12pt; }p.cjk { font-family: "Droid Sans Fallback"; font-size: 12pt; }p.ctl { font-family: "FreeSans"; font-size: 12pt; }a:link { }
Let’s start off by creating a customer class based on the below mentioned specifications.
 
a.	Create a Customer Class with the following attributes:
 
Member Field Name	Type
customerId	Long
firstName	String
lastName	String
gender	String
email	String
phoneNumber	String
address	String

 
b.	Mark all the attributes as private
c.	Create / Generate appropriate Getters & Setters
d.	Add a default constructor and a parameterized constructor to take in all attributes in the given order: Customer(Long customerId, String firstName, String lastName, String gender, String email, String phoneNumber, String address)
e.	When the “customer” object is printed, it should display the following details: [Override the toString method]
Print format:
Customer:firstname,lastname
Contact details:phoneNumber,email,address
f.	Two customers are considered same if they have the same name (both firstname and lastname), email and phone number. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]
The Input to your program would be details of two customers, you need to display their details as given in "requirement e" and compare the two customers and display if the customers are same or unique.
 
Sample INPUT & OUTPUT 1:
 
Customer1 :
customer id:
1
first name:
Arun
last name:
Kumar
gender:
Male
email:
arun123@gmail.com
phone number:
9897969594
address:
Coimbatore North
Customer2 :
customer id:
123
first name:
Arun
last name:
Kumar
gender:
Male
email:
arun123@gmail.com
phone number:
9897969594
address:
Coimbatore North

Customer 1
Customer:Arun,Kumar
Contact details:9897969594,arun123@gmail.com,Coimbatore North

Customer 2
Customer:Arun,Kumar
Contact details:9897969594,arun123@gmail.com,Coimbatore North
Customer 1 is same as Customer 2
Sample Input and Output 2:
Customer1 :
customer id:
1
first name:
Vijay
last name:
Kumar
gender:
Male
email:
Vijayajit@gmail.com
phone number:
9876541234
address:
North Chennai
Customer2 :
customer id:
23
first name:
Karmega
last name:
Kulazhi
gender:
Female
email:
Karmegam@gmail.com
phone number:
7785674563
address:
Kurangani, Theni, Tamilnadu
 
Customer 1
Customer:Vijay,Kumar
Contact details:9876541234,Vijayajit@gmail.com,North Chennai
 
Customer 2
Customer:Karmega,Kulazhi
Contact details:7785674563,Karmegam@gmail.com,Kurangani, Theni, Tamilnadu
Customer 1 and Customer 2 are different






public class Customer {
private Long customerId;
private String firstName, lastName, gender, email, phoneNumber, address;
public Long getCustomerId() {
return customerId;
}
public void setCustomerId(Long customerId) {
this.customerId = customerId;
}
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
public String getGender() {
return gender;
}
public void setGender(String gender) {
this.gender = gender;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getPhoneNumber() {
return phoneNumber;
}
public void setPhoneNumber(String phoneNumber) {
this.phoneNumber = phoneNumber;
}
public String getAddress() {
return address;
}
public void setAddress(String address) {
this.address = address;
}
public Customer(Long customerId, String firstName, String lastName,
String gender, String email, String phoneNumber, String address) {
super();
this.customerId = customerId;
this.firstName = firstName;
this.lastName = lastName;
this.gender = gender;
this.email = email;
this.phoneNumber = phoneNumber;
this.address = address;
}
public Customer() {
super();
}
@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + ((email == null) ? 0 : email.hashCode());
result = prime * result
+ ((firstName == null) ? 0 : firstName.hashCode());
result = prime * result
+ ((lastName == null) ? 0 : lastName.hashCode());
result = prime * result
+ ((phoneNumber == null) ? 0 : phoneNumber.hashCode());
return result;
}
@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
Customer other = (Customer) obj;
if (email == null) {
if (other.email != null)
return false;
} else if (!email.equals(other.email))
return false;
if (firstName == null) {
if (other.firstName != null)
return false;
} else if (!firstName.equals(other.firstName))
return false;
if (lastName == null) {
if (other.lastName != null)
return false;
} else if (!lastName.equals(other.lastName))
return false;
if (phoneNumber == null) {
if (other.phoneNumber != null)
return false;
} else if (!phoneNumber.equals(other.phoneNumber))
return false;
return true;
}
@Override
public String toString() {
return "Customer:"+ firstName +","+  lastName + "\nContact details:"+ phoneNumber+","+email+","+address;
}
    //fill the code

}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

    public static void main(String[] args) throws IOException {
        Long customerId;
        String firstName, lastName, gender, email, phoneNumber, address, otherCustomerDetails;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        Customer customer[] = new Customer[2];
        int i,ind=1;
        for (i = 0; i <2; i++) {
            System.out.println("Customer" + (i+1) + " :");
            System.out.println("customer id: ");
            customerId = Long.parseLong(br.readLine());
            System.out.println("first name: ");
            firstName = br.readLine();
            System.out.println("last name: ");
            lastName = br.readLine();
            System.out.println("gender: ");
            gender = br.readLine();
            System.out.println("email: ");
            email = br.readLine();
            System.out.println("phone number: ");
            phoneNumber = br.readLine();
            System.out.println("address: ");
            address = br.readLine();
             customer[i]=new Customer(customerId, firstName, lastName,
           gender,  email,  phoneNumber,  address);
            //fill the code
        }
for(Customer c:customer)
{
System.out.println("Customer "+ind);
System.out.println(c);
ind++;
}

if(customer[0].equals(customer[1]))
System.out.println("Customer 1 is same as Customer 2");
else
System.out.println("Customer 1 and Customer 2 are different");
           }

}




  Page of
Car-Service Management System - Requirement 2

Requirement 2:
 
a.	Create a Car Class with the following attributes:
Member Field Name	Type
licenceNumber	String
model	String
currentMileage	Double
engineSize	Integer
 
b.	Mark all the attributes as private & Create appropriate Getters & Setters
 
c.	Add a default constructor and a parameterized constructor to take in all attributes in the given order
 Car(String licenceNumber,String model,Double currentMileage,Integer engineSize)
 
d.	 Add a static method findCar in Car class which takes licenceNumber as input and returns the Car if the car object is found or null if the car object is not found.
 
e.	 Add a static findCarList method in Car class which will take a model(car model) and carList(list of cars) as parameters and return a List of cars for the given model from the list or null if no cars found. For these conditions, please refer the content to be printed in Sample IO.
Override the toString method to print the car details :
Print format:
Licence Number:licenceNumber
Model:model
 
 
Sample Input & Output:
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
1
Licence Number:
MH1420110062821
Model:
Verna
Current Mileage:
24.35
Engine Size:
1461
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
1
Licence Number:
MH1420110062823
Model:
Swift
Current Mileage:
17.35
Engine Size:
1231
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
1
Licence Number:
MH1420110045821
Model:
Verna
Current Mileage:
14.35
Engine Size:
1231
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
2
Licence Number
MH1420110062821
Licence Number:MH1420110062821
Model:Verna
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
3
Model
Verna
Licence Number:MH1420110062821
Model:Verna
Licence Number:MH1420110045821
Model:Verna
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
2
Licence Number
MH1420110062823
Licence Number:MH1420110062823
Model:Swift
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
3
Model
Figo
Car Figo not found
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
4

Sample Input and output 2:
 
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
1
Licence Number:
TN1220151247856
Model:
Verna
Current Mileage:
22
Engine Size:
1230
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
2
Licence Number
TN1220151247415
Licence Number not present
Menu:
1) Add a Car
2) Find a Car
3) Find CarList
4) Exit
4



















import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Main {

    
    public static void main(String[] args) throws IOException {
         
        ArrayList<Car> carList = new ArrayList<Car>();        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        while(true)
        {
          String menu = "Menu: \n1) Add a Car\n" +"2) Find a Car\n" +"3) Find CarList\n" +"4) Exit";
          System.out.println(menu);
           //fill the code
          int option=Integer.parseInt(br.readLine());
           if(option == 1) {
             //fill the code
            carList.add(Car.addCar(br));
    }
    if(option == 2) {
        System.out.println("Licence Number");
        String licNo=br.readLine();
        if(Car.findCar(licNo,  carList)!=null)
        System.out.println(Car.findCar(licNo,  carList));
        else
         System.out.println("Licence Number not present");
        //fill the code
    }
    if(option == 3) {
     ArrayList<Car> carList1 = new ArrayList<Car>();  
        System.out.println("Model");
        String model=br.readLine();
        carList1=Car.findCarList(model, carList);
        if(carList1!=null)
        {
         for(Car c:carList1)
        {
         System.out.println(c);
        }
        }
        else
         System.out.println("Car "+model+" not found");
        
    }
    if(option == 4) {
        //fill the code
     System.exit(0);
    }
           
        }
    }
}















import java.io.BufferedReader;
import java.util.*;
public class Car {
    //fill the code
    private String licenceNumber,model;
    private Double currentMileage;
    private Integer engineSize;
    public String getLicenceNumber() {
return licenceNumber;
}

public void setLicenceNumber(String licenceNumber) {
this.licenceNumber = licenceNumber;
}

public String getModel() {
return model;
}

public void setModel(String model) {
this.model = model;
}

public Double getCurrentMileage() {
return currentMileage;
}

public void setCurrentMileage(Double currentMileage) {
this.currentMileage = currentMileage;
}

public Integer getEngineSize() {
return engineSize;
}

public void setEngineSize(Integer engineSize) {
this.engineSize = engineSize;
}

public Car(String licenceNumber, String model, Double currentMileage,
Integer engineSize) {
super();
this.licenceNumber = licenceNumber;
this.model = model;
this.currentMileage = currentMileage;
this.engineSize = engineSize;
}

public Car() {
super();
}

//Dont change the specification of this method
    public static Car addCar(BufferedReader br) {
       
       String licenceNumber, model;Double currentMileage;Integer engineSize;
       Car c = null;
       try {
           System.out.println("Licence Number: ");
           licenceNumber = br.readLine();
           System.out.println("Model: ");
           model = br.readLine();
           System.out.println("Current Mileage: ");
           currentMileage = Double.parseDouble(br.readLine());
           System.out.println("Engine Size: ");
           engineSize = Integer.parseInt(br.readLine());
           c = new Car(licenceNumber,model,currentMileage,engineSize);
           return c;
           
       }
       catch(Exception e) {
           System.out.println("Could not create Car");
       }
       return c;
       
   }
    
    public static Car findCar(String licNo, ArrayList<Car> carList) {
       //fill the code
     
     for(Car c:carList)
     {
     if(c.getLicenceNumber().equals(licNo))
     {
     return c;
     }
     }
     
     return null;
     }
    
    
     @Override
public String toString() {
return "Licence Number:" + licenceNumber + "\nModel:" + model;
}

public static ArrayList<Car> findCarList(String model, ArrayList<Car> carList) {
      ArrayList<Car> cL=new ArrayList<>();
      int f=0;
      for(Car c:carList)
      {
      if(c.getModel().equals(model))
      {
      cL.add(c);
      f=1;
      }
      }
      if(f==1)
      return cL;
      else
      return null;
      
       //fill the code
     }
}

   Page of
Car-Service Management System - Requirement 3
 
There are always typical human entry errors that need to be validated so that the data being saved in the system is valid and can be used for later processing. Lets define some simple rules so that data being collected are valid.
Create a class named as Main, which contains following static methods.
 
a) Create a method validateLicenceNumber(String licenceNumber)  which takes a license number(String) and returns boolean (true or false),based on the below rules. 
A licence Number is valid if all the below rules are true.
2 chars-state name. ( 2 characters A to Z)
2 numbers-branch code (integers) - valid range between 10 - 50
4 numbers-licence issued year - valid range between - (2005 to 2016) inclusive of both years.
7 numbers -profile id (Any digit should not contain 0).
 
 eg:MH1420116662821 is a valid licence number.
 
b) Write a method isExperiencedDriver(String licenceNumber) which takes a license number(String) and returns a boolean.
This function checks for experience of a driver with respect to licence Number. The year of the licence issue starts from 5 th chacter (yyyy determines the year).
If year of license issued is equal to or greater than 5 years from current year then return true ,else return false. Assume today’s date as 28-11-2017. If the method returns true, then the driver is termed as experienced. If its less than 5 years, then print as Not Experienced Driver.
 
Menu:
1) Validate licence Number
2) Check Driver Experience

Sample Input and Output 1:
 
Enter license number:
MH1420110062821
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
1
License number is not valid
 

Sample Input and Output 2:
 
Enter license number:
tn482018547585
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
1
License number is not valid

Sample Input and Output 3:
 
Enter license number:
TN5920151122556
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
1
License number is not valid

Sample Input and Output 4:
 
Enter license number:
KL2620044451236
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
1
License number is not valid

Sample Input and Output 5:
 
Enter license number:
TN4520124482563
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
1
License number is valid
 

Sample Input and Output 6:
 
Enter license number:
KA1220112235647
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
2
Experienced Driver

Sample Input and Output 7:
 
Enter license number:
TN5420154485263
Menu:
1) Validate licence Number
2) Check Driver Experience
Enter choice: 
2
Not Experienced Driver
 

td p { margin-bottom: 0cm; direction: ltr; color: rgb(0, 0, 10); text-align: left; }td p.western { font-family: "Liberation Serif",serif; font-size: 12pt; }td p.cjk { font-family: "Droid Sans Fallback"; font-size: 12pt; }td p.ctl { font-family: "FreeSans"; font-size: 12pt; }p { margin-bottom: 0.25cm; direction: ltr; color: rgb(0, 0, 10); line-height: 120%; text-align: left; }p.western { font-family: "Liberation Serif",serif; font-size: 12pt; }p.cjk { font-family: "Droid Sans Fallback"; font-size: 12pt; }p.ctl { font-family: "FreeSans"; font-size: 12pt; }a:link { }     



import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.println("Enter license number:");
        String licenseNumber = br.readLine();
        
        System.out.println("Menu:\n" +
                "1) Validate licence Number\n" +
                "2) Check Driver Experience");
        System.out.println("Enter choice: ");
        Integer choice = Integer.parseInt(br.readLine());
        
        switch(choice) {
            case 1:
                if(validateLicenseNumber(licenseNumber)){
                    System.out.println("License number is valid");
                } else {
                    System.out.println("License number is not valid");
                }
                break;
            case 2:
                if(isExperiencedDriver(licenseNumber)) {
                    System.out.println("Experienced Driver");
                } else {
                    System.out.println("Not Experienced Driver");
                }
                break;
            default:
                System.out.println("Invalid option");
                
        }
        
    }
    public static Boolean validateLicenseNumber(String licenceNumber) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date currentDate = sdf.parse("28-11-2017");
        
        //fill code here
        
        
       if(Character.isUpperCase(licenceNumber.charAt(0))&&Character.isUpperCase(licenceNumber.charAt(1)))
       
       {
        try{
        int state=Integer.parseInt(licenceNumber.substring(2,4));
        if(state<=50&&state>=10)
        {
        int year=Integer.parseInt(licenceNumber.substring(4,8));
        if(year>=2005&&year<=2016)
        {
        String id=licenceNumber.substring(8,licenceNumber.length());
        for(int i=0;i<id.length();i++)
        {
        if(id.charAt(i)=='0')
        {
        return false;
        
        }
        }
        return true;
        }
        
        
        } 
        } catch(Exception e)
        {
        return false;
        }
        
        }
        return false;
        
       
        
       
    }
    
    public static Boolean isExperiencedDriver(String licenceNumber) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date currentDate = sdf.parse("28-11-2017");
        //fill code here
        int year=Integer.parseInt(licenceNumber.substring(4,8));
        return year<2013;
        
    }
}

  Page of
Car-Service Management System - Requirement 4

Requirement 4:

 
a.	Create a Booking Class with the following attributes:
Member Field Name	Type
bookingId	Long
dateTimeOfService	Date(java.util)
paymentMode	String
customer	Customer
car	Car
amount	Double
serviceEngineer	String

Create / generate appropriate Getters & Setters and constructors.
Create Classes Car and Customer as given in the previous requirement. While reading the input, only customerid and car license number is provided in the input. You need to create customer and car objects and assign only these values. Other details about customer and car can be safely ignored. (Already given in template code)

 
b.	 Create an abstract ClassPaymentMode with the following attributes:
Member Field Name	Type
type	String
Include a single argument constructor with patameters PaymentMode(String type)

c.  Create a Class CreditCardPaymentwhich extends PaymentMode class with the following attributes:
 
Member Field Name	Type
creditcardNumber	String
holderName	String
cardNumber	String
dateOfExpiry	Date
Include a 5-argument constructor with patameters CreditCardPayment(String creditcardNumber, String holderName, String cardNumber, Date dateOfExpiry, String type)

d. Create a Class WalletPaymentwhich extends PaymentMode class with the following attributes:
 
Member Field Name	Type
 walletNumber	String
Include a 2-argument constructor with patameters WalletPayment(String walletNumber, String type)

e. Mark the access modifiers appropriately, and create constructors using super keyword. Include getters and setters for all the classes.

f. Create an abstract methodmakePayment(Booking booking) in PaymentMode classwhich takes a booking object as parameter and returns the payment in Rupees as Double. Calculate the total amount with additional cost or discount as per the payment mode and return the value. Override the makePayment method in CreditCardPayment andWalletPayment. Round off the final amount to zero decimal values.
 
 
PaymentMode	Cost(Rs)
CreditCardPayment	2% additional cost
WalletPayment	5% discount
 
 
Sample Input & Output 1:
bookingId
1
dateTimeOfService
12-04-2016
paymentMode
creditcardpayment
customer id
1
licence number
MH1420110062821
amount
1000
service engineer
subash
creditcard number
1546 2563 5896 5879
holder name
krishna
card number
123
date of expiry
12-04-2018
 
Cost is Rs 1020
 
Sample Input & Output 2:
booking id
2
date time of service
11-04-2016
payment mode
walletpayment
customer id
1
licence number
MH1420110062821
amount
3000
service engineer
allwin
wallet number
128975
 
Cost is Rs 2850



import java.util.Date;

public class Booking {
    
    //fill the code
 private Long bookingId;
 private Date dateTimeOfService;
 private  String paymentMode;
 private Customer Customer;
 private Car Car;
     
 private Double amount;
 private String serviceEngineer;
public Booking(Long bookingId, Date dateTimeOfService,
String paymentMode, Customer customer, Car car, Double amount,
String serviceEngineer) {
super();
this.bookingId = bookingId;
this.dateTimeOfService = dateTimeOfService;
this.paymentMode = paymentMode;
Customer = customer;
Car = car;
this.amount = amount;
this.serviceEngineer = serviceEngineer;
}
public Booking() {
super();
}
public Long getBookingId() {
return bookingId;
}
public void setBookingId(Long bookingId) {
this.bookingId = bookingId;
}
public Date getDateTimeOfService() {
return dateTimeOfService;
}
public void setDateTimeOfService(Date dateTimeOfService) {
this.dateTimeOfService = dateTimeOfService;
}
public String getPaymentMode() {
return paymentMode;
}
public void setPaymentMode(String paymentMode) {
this.paymentMode = paymentMode;
}
public Customer getCustomer() {
return Customer;
}
public void setCustomer(Customer customer) {
Customer = customer;
}
public Car getCar() {
return Car;
}
public void setCar(Car car) {
Car = car;
}
public Double getAmount() {
return amount;
}
public void setAmount(Double amount) {
this.amount = amount;
}
public String getServiceEngineer() {
return serviceEngineer;
}
public void setServiceEngineer(String serviceEngineer) {
this.serviceEngineer = serviceEngineer;
}
     
    
}
















public class Car {
    //fill the code
private String licenceNumber;

public String getLicenceNumber() {
return licenceNumber;
}

public void setLicenceNumber(String licenceNumber) {
this.licenceNumber = licenceNumber;
}

public Car(String licenceNumber) {
super();
this.licenceNumber = licenceNumber;
}

public Car() {
super();
}
    
}














import java.util.Date;

public class CreditCardPayment extends PaymentMode {
    //fill the code
private String creditcardNumber,holderName,cardNumber;
private Date dateOfExpiry;

public CreditCardPayment(String creditcardNumber,
String holderName, String cardNumber, Date dateOfExpiry,String type) {
super(type);
this.creditcardNumber = creditcardNumber;
this.holderName = holderName;
this.cardNumber = cardNumber;
this.dateOfExpiry = dateOfExpiry;
}

public CreditCardPayment(String type) {
super(type);
}

public String getCreditcardNumber() {
return creditcardNumber;
}

public void setCreditcardNumber(String creditcardNumber) {
this.creditcardNumber = creditcardNumber;
}

public String getHolderName() {
return holderName;
}

public void setHolderName(String holderName) {
this.holderName = holderName;
}

public String getCardNumber() {
return cardNumber;
}

public void setCardNumber(String cardNumber) {
this.cardNumber = cardNumber;
}

public Date getDateOfExpiry() {
return dateOfExpiry;
}

public void setDateOfExpiry(Date dateOfExpiry) {
this.dateOfExpiry = dateOfExpiry;
}
Double makePayment(Booking booking)
{
Double c=booking.getAmount();
c=c+c*(0.02);
return c;
}
    
}











public class Customer {
    //fill the code
private Long customerId;

public Long getCustomerId() {
return customerId;
}

public void setCustomerId(Long customerId) {
this.customerId = customerId;
}

public Customer(Long customerId) {
super();
this.customerId = customerId;
}

public Customer() {
super();
}
}












import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Main {
    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Long bookingId;
        String dateTimeOfService;
        String paymentMode;
        String creditcardNumber;
        String holderName;
        String walletNumber;
        String cardNumber;
        String serviceEngineer;
        String dateOfExpiry;
        Double amount;
        Customer customer = new Customer();
        Car car = new Car();
        
        System.out.println("bookingId");
        bookingId = Long.parseLong(br.readLine());
        
        System.out.println("dateTimeOfService");
        dateTimeOfService = (br.readLine());
        
        System.out.println("paymentMode");
        paymentMode = (br.readLine());
        
        System.out.println("customer id");
        customer.setCustomerId(Long.parseLong(br.readLine()));
        
        System.out.println("licence number");
        car.setLicenceNumber(br.readLine());
        
        System.out.println("amount");
        amount = Double.parseDouble(br.readLine());
        
        System.out.println("service engineer");
        serviceEngineer = (br.readLine());
        
        Booking booking = new Booking(bookingId,sdf.parse(dateTimeOfService),paymentMode,customer,car,amount,serviceEngineer);
        
        PaymentMode paymentModeIns = null;
        
        switch (booking.getPaymentMode()) {
            case "creditcardpayment":
                System.out.println("creditcard number");
                creditcardNumber = (br.readLine());
                System.out.println("holder name");
                holderName = (br.readLine());
                System.out.println("card number");
                cardNumber = (br.readLine());
                System.out.println("date of expiry");
                dateOfExpiry=br.readLine();
                Date dOF=sdf.parse(dateOfExpiry);
                paymentModeIns=new CreditCardPayment(creditcardNumber,holderName,cardNumber,dOF,booking.getPaymentMode());
                
                //fill the code
                break;
            case "walletpayment":
                System.out.println("wallet number");
                walletNumber=br.readLine();
                paymentModeIns=new WalletPayment(booking.getPaymentMode(),walletNumber);
                //fill the code
        }
        System.out.println("Cost is Rs "+new DecimalFormat("#").format(paymentModeIns.makePayment(booking)));
    }
}
















public abstract class PaymentMode{
String type;

public String getType() {
return type;
}

public void setType(String type) {
this.type = type;
}

public PaymentMode(String type) {
super();
this.type = type;
}

public PaymentMode() {
super();
}
abstract Double makePayment(Booking booking);
}















public class WalletPayment extends PaymentMode {
private String walletNumber;
    //fill the code

public WalletPayment(String type, String walletNumber) {
super(type);
this.walletNumber = walletNumber;
}
public WalletPayment(String type) {
super(type);
}
public String getWalletNumber() {
return walletNumber;
}
public void setWalletNumber(String walletNumber) {
this.walletNumber = walletNumber;
}
Double makePayment(Booking booking)
{
Double c=booking.getAmount();
c=c-c*(0.05);
return c;
}
    
}

     Page of
Car-Service Management System - Requirement 5


Requirement 5:


a) Create a Customer Class with the following attributes:
 
Member Field Name	Type
customerId	Long
firstName	String
lastName	String
gender	String
email	String
phoneNumber	String
address	String
 
b) Mark all the attributes as private
 
c) Create / Generate appropriate Getters & Setters
 
d) Add a default constructor and a parameterized constructor to take in all attributes in the given order: Customer(Long customerId, String firstName, String lastName, String gender, String email, String phoneNumber, String address)

e) A valid email has an @ and ends with “.com / .org”.
Create a method validateEmail in customer class with return type as void and check for valid email . During the parse, if an email id is invalid, Raise the custom exception(InvalidEmailException) and dont add the customer into the list. Print messege "Invalid Email for the user" for the exception.

f) Write a Comparator class named CustomerComparator implementing Comparator Interface. This comparator should sort the customers based on firstname. 
After reading all the inputs, Apply the comparator on the inputlist read and display the result.

The output format should be System.out.format("%-5s %-15s %-15s %-15s %-15s %s\n","Id","First Name","Last Name","Gender","Email","Phone");

Sample Input and Output:
Enter customer details:
1,Vel,Murugan,Male,vel@mail.com,9876543210,Coimbatore
Do you want to continue?
yes
Enter customer details:
2,Mani,Gandan,male,mani@mail.org,9873216540,CBE
Do you want to continue?
yes
Enter customer details:
3,Thana,Rathanam,male,thana@mail.in,9783210456,Karur
InvalidEmailException: Invalid Email for the user
Do you want to continue?
yes
Enter customer details:
4,Karthi,Keyan,male,keyan@mail.edu,9632587410,Tirupur
InvalidEmailException: Invalid Email for the user
Do you want to continue?
yes
Enter customer details:
5,Soori,yaa,male,yaa@yaa.co.in,9875321460,Chennnai
InvalidEmailException: Invalid Email for the user
Do you want to continue?
no
Id    First Name      Last Name       Gender          Email                           Phone
2      Mani                    Gandan              male               mani@mail.org     9873216540
1      Vel                         Murugan            Male               vel@mail.com        9876543210
     




import java.util.Comparator;


public class CustomerComparator implements Comparator<Customer>{

@Override
public int compare(Customer c1, Customer c2) {
return c1.getFirstName().compareTo(c2.getFirstName());
}   
}

public class Customer {

public long getCustomerId() {
return customerId;
}
public void setCustomerId(long customerId) {
this.customerId = customerId;
}
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
public String getGender() {
return gender;
}
public void setGender(String gender) {
this.gender = gender;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public String getPhoneNumber() {
return phoneNumber;
}
public void setPhoneNumber(String phoneNumber) {
this.phoneNumber = phoneNumber;
}
public String getAddress() {
return address;
}
public void setAddress(String address) {
this.address = address;
}
public Customer(long customerId, String firstName, String lastName,
String gender, String email, String phoneNumber, String address) {
super();
this.customerId = customerId;
this.firstName = firstName;
this.lastName = lastName;
this.gender = gender;
this.email = email;
this.phoneNumber = phoneNumber;
this.address = address;
}
public Customer()
{
}
private long customerId;
private String firstName;
private String lastName;
private String gender;
private String email;
private String phoneNumber;
private String address;
public void validateEmail() throws InvalidEmailException
{
String input=this.getEmail();
        if(!(input.endsWith(".com")||input.endsWith(".org"))&&(input.contains("@")))
        {
throw new InvalidEmailException("Invalid Email for the user");
        }
        else
        {
         
        }
}
    
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    
    public static void main(String[] args) throws IOException {
        List<Customer> customerList = new ArrayList<>();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String customerDetails;
        String choice;
        do {
            System.out.println("Enter customer details:");
            customerDetails=br.readLine();
             String input[]=customerDetails.split(",");
                Customer c = new Customer(Long.parseLong(input[0]),input[1],input[2],input[3],input[4],input[5],input[6]);
                try
                {
                c.validateEmail();
                customerList.add(c);
                }
                catch (InvalidEmailException e) {
         System.out.println(e);
         }
           
            System.out.println("Do you want to continue?");
            choice = br.readLine();
        } while(choice.equals("yes"));
        Collections.sort(customerList, new CustomerComparator());
        System.out.format("%-5s %-15s %-15s %-15s %-15s %s\n","Id","First Name","Last Name","Gender","Email","Phone");
        for(Customer customer : customerList) {
            System.out.format("%-5s %-15s %-15s %-15s %-15s %s\n",customer.getCustomerId(),customer.getFirstName(),customer.getLastName(),customer.getGender(),customer.getEmail(),customer.getPhoneNumber());
        }
    }
    
}


public class InvalidEmailException extends Exception{
public InvalidEmailException(String msg)
{
super(msg);
}
}




Car-Service Management System - Requirement 6



Requirement 6:


Given the list of bookings, you would like to calculate the amount of revenue generated by each service engineer. For convenience sake, the customer and car references in the booking class is replaced by their respective ids alone. 
a)Create a Booking Class with the following attributes:
Member Field Name	Type
bookingId	Long
dateTimeOfService	Date(java.util)
paymentMode	String
customerId	Long
carId	Long
amount	Double
serviceEngineer	String


B )Mark all the attributes as private. Create / Generate appropriate Getters & Setters. Add a default constructor and a parameterized constructor to take in all attributes in order Booking(Long bookingId, Date dateTimeOfService, String paymentMode, Long customerId, Long carId, Double amount, String serviceEngineer).
 
c)The input format  consists of all booking details seperated by comma in the below order,
(bookingId,dateTimeOfService,paymentMode,customerId,carId,amount,serviceEngineer)
 
d) Create static methodorganizeBookings in Booking class which takes List<Booking> as input parameter and return a Map<String,List<Booking>>.  The key of the map is "serviceEngineer" and the value is the list of all the bookings handled by the service engineer. This method should loop thorough the list of bookings and create multiple smaller lists of booking for each service engineer (value of the hashmap). Add each of the smaller lists to the map and return the same.
 
e) Create a static methodfindBestServiceEngineer in Bookingclass which takesMap<String,List<Booking>>  as parameters and List<String> as return type. 
This method takes up the organisedbooking for each service engineer and computes the total amount generated by each engineer. The list is sorted based on the maximum amount generated by engineer. The list of the service engineer names are returned from the method.


In output print the serviceEngineer name and number bookings for the service engineer ssorted based on the maximum amount generated by engineer. The output format should be System.out.format("%-15s %s\n","Name","No of Booking");



Sample Input and Output:
Enter a booking detail:
1,06-01-2015,CC,11,1001,100,John
Do you want to add another booking detail:
yes
Enter a booking detail:
2,01-06-2017,CC,12,1002,200,Peter
Do you want to add another booking detail:
yes
Enter a booking detail:
3,28-02-2015,DC,13,1003,150,Peter
Do you want to add another booking detail:
yes
Enter a booking detail:
4,24-06-2015,CC,14,1004,250,John
Do you want to add another booking detail:
yes
Enter a booking detail:
5,14-06-2016,DC,15,1005,75,John
Do you want to add another booking detail:
yes
Enter a booking detail:
6,12-05-2017,DC,16,1006,125,Peter
Do you want to add another booking detail:
yes
Enter a booking detail:
7,24-12-2011,CC,17,1007,185,Peter
Do you want to add another booking detail:
no
Name            No of Booking
Peter              4
John              3     




 
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
 
 
public class Main {
   
    public static void main(String[] args) throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                        List<Booking> booking =new ArrayList<Booking>();
                        Long     bookingId          ;
                        Date      dateTimeOfService         ;
                        String   paymentMode    ;
                        Long     customerId        ;
                        Long     carId     ;
                        Double  amount  ;
                        String   serviceEngineer  ;
 
        BufferedReader br =  new BufferedReader(new InputStreamReader(System.in));
        String ch="yes";
        do {
            System.out.println("Enter a booking detail:");
            //fill the code
            String details = br.readLine();
            String a[] = details.split(",");
            bookingId = Long.parseLong(a[0]);
            dateTimeOfService = sdf.parse(a[1]);
            paymentMode = a[2];
            customerId =  Long.parseLong(a[3]);
            carId =  Long.parseLong(a[4]);
            amount = Double.parseDouble(a[5]);
            serviceEngineer = a[6];
            Booking b = new Booking(bookingId, dateTimeOfService, paymentMode, customerId, carId, amount, serviceEngineer);
            booking.add(b);
           
 
            System.out.println("Do you want to add another booking detail:");
            //fill the code
            ch = br.readLine();
        }while (ch.equalsIgnoreCase("yes"));
        
        //fill the code
        Map<String, List<Booking>> sername = Booking.organizeBookings(booking);
       
        System.out.format("%-15s %s\n","Name","No of Booking");
        //fill the code
        List<String> service = Booking.findBestServiceEngineer(sername);
        ListIterator<String> ltr = service.listIterator(service.size());
        while(ltr.hasPrevious()){
             String key = ltr.previous();
             System.out.format("%-15s %s\n",key,sername.get(key).size());
        }
    }
    
}
 
 
 
 
 
 
 
 
 
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
 
public class Booking {
            private Long bookingId ;
            private Date dateTimeOfService ;
            private String paymentMode ;
            private Long customerId ;
            private Long carId ;
            private Double amount ;
            private String serviceEngineer;
            public Long getBookingId() {
                        return bookingId;
            }
 
            public void setBookingId(Long bookingId) {
                        this.bookingId = bookingId;
            }
 
            public Date getDateTimeOfService() {
                        return dateTimeOfService;
            }
 
            public void setDateTimeOfService(Date dateTimeOfService) {
                        this.dateTimeOfService = dateTimeOfService;
            }
 
            public String getPaymentMode() {
                        return paymentMode;
            }
 
            public void setPaymentMode(String paymentMode) {
                        this.paymentMode = paymentMode;
            }
 
            public Long getCustomerId() {
                        return customerId;
            }
 
            public void setCustomerId(Long customerId) {
                        this.customerId = customerId;
            }
 
            public Long getCarId() {
                        return carId;
            }
 
            public void setCarId(Long carId) {
                        this.carId = carId;
            }
 
            public Double getAmount() {
                        return amount;
            }
 
            public void setAmount(Double amount) {
                        this.amount = amount;
            }
 
            public String getServiceEngineer() {
                        return serviceEngineer;
            }
 
            public void setServiceEngineer(String serviceEngineer) {
                        this.serviceEngineer = serviceEngineer;
            }
            public Booking(Long bookingId, Date dateTimeOfService, String paymentMode,
                                    Long customerId, Long carId, Double amount, String serviceEngineer) {
                        super();
                        this.bookingId = bookingId;
                        this.dateTimeOfService = dateTimeOfService;
                        this.paymentMode = paymentMode;
                        this.customerId = customerId;
                        this.carId = carId;
                        this.amount = amount;
                        this.serviceEngineer = serviceEngineer;
            }
 
            //fill the code
 
            public static Map<String,List<Booking>> organizeBookings(List<Booking> bookingList) {
                        //fill the code
                        Map<String, List<Booking>> ser = new HashMap<String,List<Booking>>();
                        List<String> service =new ArrayList<String>();
                        Iterator<Booking> itr = bookingList.iterator();
                        while(itr.hasNext()){
                                    boolean flag=true;
                                    Booking b = itr.next();
                                    Iterator<String> itr1 = service.iterator();
                                    while(itr1.hasNext()){
                                                if(itr1.next().equals(b.serviceEngineer))
                                                            flag =false;
                                    }
                                    if(flag)
                                                service.add(b.serviceEngineer);
                        }
                        Iterator<String> itr1 = service.iterator();
                        while(itr1.hasNext()){
                                    List<Booking> service1 =new ArrayList<Booking>();
                                    String s = itr1.next();
                                    Iterator<Booking> itr2 = bookingList.iterator();
                                    while(itr2.hasNext()){
                                                Booking b = itr2.next();
                                                if(s.equals(b.serviceEngineer)){
                                                            service1.add(b);
                                                }
                                    }
                                    ser.put(s, service1);
                        }
                        return ser;
    }
 
    public static List<String> findBestServiceEngineer(Map<String,List<Booking>> bookingMap) {
        //fill the code
                        List<String> service =new ArrayList<String>();
                        Map<Double, String> bookingSort = new TreeMap<Double,String>();
                        Iterator<String> itr = bookingMap.keySet().iterator();
                        while(itr.hasNext()){
                                    String key = itr.next();
                                    Double sum =0.0;
                                    List<Booking> booking = bookingMap.get(key);
                                    Iterator<Booking> itr1 = booking.iterator();
                                    while(itr1.hasNext()){
                                                Booking b = itr1.next();
                                                sum = sum+b.getAmount();
                                    }
                                    bookingSort.put(sum, key);
                        }
                        Iterator<Double> itr2 = bookingSort.keySet().iterator();
                        while(itr2.hasNext()){
                                    service.add(bookingSort.get(itr2.next()));
                        }
                        return service;
    }
   
}
 
 
 










Contact Group - Requirement 1 
  
You work in the HR department of your company. Your company wants an application for stockpiling and retrieving employee's contact details based on projects they work on. Contact details of all Employees along with their teams are to be stored and manipulated. There are two major domains, which are Contact and Group. Contact details of Employee are stored in Contact domain and groups or teams are stored in Group domain which contains all team members Contact details. For easier interpretation and UI applications, both the domains are subjected to various operations like sorting, searching, assigning to a group etc.
  
 

Requirement 1: 
Let’s start off by creating two Contact objects and check whether they are equal.
  
1.	Create a Contact Class with the following attributes: 
Member Field Name 	Type 
name 	String 
company 	String 
title 	String 
mobile 	String 
alternateMobile 	String 
email 	String 
dateCreated 	java.util.Date 

  
2.	Mark all the attributes as private 
3.	Create / Generate appropriate Getters & Setters 
4.	Add a default constructor and a parameterized constructor to take in all attributes in the given order: Contact(String name, String company, String title, String mobile,String  alternateMobile, String email, Date dateCreated) 
5.	When the “contact” object is printed, it should display the following details: [Override the toString method]
Print format:
Name:"name"
Company:"company"
Title:"title"
Mobile:"mobile"
Alternate Contact:"alternateMobile"
Email:"email"
Date Created:"dateCreated" 
6.	Two contacts are considered same if they have the same name, mobile, and email. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]

The input format consists of contact details separated by comma in the below order,
(name,company, title,mobile,alternateMobile,email,dateCreated) 
The Input to your program would be details of two contacts, you need to display their details as given in "5th point(refer above)" and compare the two contacts and display if the Contacts are same or different.

Note: There is an empty line between display statements. Print the empty lines in main function.

Sample INPUT & OUTPUT 1:

Enter contact 1 detail:
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Enter contact 2 detail:
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018

Contact 1:
Name:John
Company:Microsoft
Title:Product Engineer
Mobile:9876543210
Alternate Contact:7894651320
Email:john@micro.com
Date Created:12-01-2018

Contact 2:
Name:Peter
Company:Apple
Title:Team Lead
Mobile:9654873210
Alternate Contact:9873216540
Email:peter@apple.com
Date Created:15-01-2018

Contact 1 and Contact 2 are different

Sample INPUT & OUTPUT 2:

Enter contact 1 detail:
Peter,Apple,Team Lead,9654873210,9873216540,peter@gmail.com,15-01-2018
Enter contact 2 detail:
Peter,Oracle,Engineer,9654873210,8793216540,peter@gmail.com,12-01-2018

Contact 1:
Name:Peter
Company:Apple
Title:Team Lead
Mobile:9654873210
Alternate Contact:9873216540
Email:peter@gmail.com
Date Created:15-01-2018

Contact 2:
Name:Peter
Company:Oracle
Title:Engineer
Mobile:9654873210
Alternate Contact:8793216540
Email:peter@gmail.com
Date Created:12-01-2018

Contact 1 is same as Contact 2 

Contact Group - Requirement 2 
Requirement 2:
In this requirement develop a feature in which you can search a List of Contacts by name, email or dateCreated

a) Create a Class Contact with the following attributes:
  
Member Field Name 	Type 
name 	String 
company 	String 
title 	String 
mobile 	String 
alternateMobile 	String 
email 	String 
dateCreated 	java.util.Date 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Contact(String name, String company, String title, String mobile, String alternateMobile, String email, Date dateCreated)

b) Create a class ContactBO with the following methods,
  
Method Name 	Description 
public List<Contact> findContact (List<Contact> contactList,List<String> name) 	This method accepts a list of contacts and list of names as arguments and returns a list of contacts with the given names. 
public List<Contact> findContact (List<Contact> contactList,Date dateCreated) 	This method accepts a list of contacts and created date as arguments and returns a list of contacts that were created on the given specified date. 
public List<Contact> findContact (List<Contact> contactList,String emailDomain) 	This method accepts a list of contacts and a domain name as arguments, then find all the contacts with the given domain from the contact list and return the list of contacts with the specified email domain name. 

The contact details should be given as a comma-separated value in the below order,
name,company,title, mobile, alternateMobile, email, dateCreated

Get the number of contacts and the contact details, build a contact list and perform search by name, date created and email domain.

When the “contact” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s %s\n", "Name","Company","Title","Mobile","Alternate Mobile","Email","Date Created");

Note: The contact lists are displayed in the main method.
             If any other choice is selected, display "Invalid Choice"

Sample Input and Output 1:

Enter the number of contact details:
5
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,14-01-2018
Mark,Intel,Manager,7994873210,9873212340,mark@intel.com,13-01-2018
Enter a search type:
1.Name
2.Date created
3.Email domain
1
Enter the names:
John,Tony 
Name 	Company 	Title 	Mobile 	  Alternate Mobile 	  Email 	Date Created 
John 	Microsoft 	Product Engineer 	9876543210 	  7894651320 	  john@micro.com 	12-01-2018 
Tony 	Intel 	HR 	9694873210 	  8973212540 	  tony@intel.com 	14-01-2018 

Sample Input and Output 2:

Enter the number of contact details:
5
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,14-01-2018
Mark,Intel,Manager,7994873210,9873212340,mark@intel.com,13-01-2018
Enter a search type:
1.Name
2.Date created
3.Email domain
2
Enter the date to search contacts that were created on that date
14-01-2018 
Name 	Company 	Title 	Mobile 	  Alternate Mobile 	  Email 	Date Created 
Starc 	IBM 	HR 	9654373210 	  8989216540 	  starc@ibm.com 	14-01-2018 
Tony 	Intel 	HR 	9694873210 	  8973212540 	  tony@intel.com 	14-01-2018 

Sample Input and Output 3:

Enter the number of contact details:
5
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,14-01-2018
Mark,Intel,Manager,7994873210,9873212340,mark@intel.com,13-01-2018
Enter a search type:
1.Name
2.Date created
3.Email domain
3
Enter the Email domain to search contacts that have same email domain
intel 
Name 	Company 	Title 	Mobile 	  Alternate Mobile 	  Email 	Date Created 
Tony 	Intel 	HR 	9694873210 	  8973212540 	  tony@intel.com 	14-01-2018 
Mark 	Intel 	Manager 	7994873210 	9873212340 	  mark@intel.com 	13-01-2018 


Sample Input and Output 4:

Enter the number of contact details:
5
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,14-01-2018
Mark,Intel,Manager,7994873210,9873212340,mark@intel.com,13-01-2018
Enter a search type:
1.Name
2.Date created
3.Email domain
4
Invalid choice 

Contact Group - Requirement 3 
Requirement 3:
   In this requirement, you need to validate the email of a contact. Also, you need to find the service provider for a given mobile number.

a)Create a Class Main with the following static methods: 
Method Name 	Description 
static Boolean validateEmailId(String email) 	Validate the email id based on the rules given below. Returns True if email id is valid else return false 
static String identifyServiceProvider(String mobile) 	Checks for the Service Provider of the given mobile number with the below rules, if the service provider is Airtel return a String "Airtel", if the service provider is Jio return a String "Jio", if the service provider is Vodafone return a String "Vodafone", else return null. 

b) While validating email id follow the below rules. The format of the email id is given below
 
            username@domain.TLD

where, TLD - Top Level Domain

1. The email id should start only with alphabets(either uppercase or lowercase).
2. The email username can contain alphabets(either uppercase or lowercase), numbers and the special characters (  .   and   _    ).
3. The email username should not contain any other special characters other than " . " and " _ ".
4. After the username special character @ should present.
5. The email domain should contain only alphabets(either uppercase or lowercase).
6. After email domain, a value dot ( . ) should present.
7. The email Top Level Domain should contain only alphabets(both uppercase and lowercase) and it should have only 2 to 6 characters.

Example: alpha_Beta.01@google.com is a valid email id.
Since the username contain only alphabets, numbers and a special character ( _ and . ), then the @ symbol is present. The domain name should contain only alphabets and the symbol dot( . ) and the Top Level Domain have only 3 characters.

c) While identifying the Service Provider follow the below rules,

1. If the phone number starts with 9870, the service provider is Airtel.
2. If the phone number starts with 7012, the service provider is Jio.
3. If the phone number starts with 8180, the service provider is Vodafone.
4. Else the mobile number is not identified.

If the method returns null, display "Mobile number is not identified" in the main method.

[Note: For mobile identification, consider the mobile number given will be only 10 digits and all are numbers.]

Example: The mobile number 9870123456 belongs to Airtel, 7012987456 belongs to Jio and 8180321654 belongs to Vodafone.

Menu:
1.Email Validation
2.Service Provider Identification

Sample Input and Output 1:

1.Email Validation
2.Service Provider Identification
Enter your choice:
1
Enter the email to be validated:
alpha_Beta.02@mail.com
Email is valid

Sample Input and Output 2:

1.Email Validation
2.Service Provider Identification
Enter your choice:
1
Enter the email to be validated:
0alpf&sk@mail.in
Email is invalid

Sample Input and Output 3:

1.Email Validation
2.Service Provider Identification
Enter your choice:
2
Enter the mobile number to identify the service provider:
9870123456
Mobile number belongs to Airtel

Sample Input and Output 4:

1.Email Validation
2.Service Provider Identification
Enter your choice:
2
Enter the mobile number to identify the service provider:
9876543210
Mobile number is not identified

Sample Input and Output 5:

1.Email Validation
2.Service Provider Identification
Enter your choice:
2
Enter the mobile number to identify the service provider:
7012987456
Mobile number belongs to Jio

Sample Input and Output 6:

1.Email Validation
2.Service Provider Identification
Enter your choice:
2
Enter the mobile number to identify the service provider:
8180321654
Mobile number belongs to Vodafone 

Contact Group - Requirement 4 

Requirement 4:
Now we are gonna start creating a group and add contacts to it. Start with creating a group and use menu-driven approach to add, remove, display details of the contacts in the group.

a)Create a Class Contact with the following attributes:
Member Field Name 	Type 
name 	String 
company 	String 
title 	String 
mobile 	String 
alternateMobile 	String 
email 	String 
dateCreated 	java.util.Date 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Contact(String name, String company, String title, String mobile, String alternateMobile, String email, Date dateCreated)

b)Create a Class Group with the following attributes:
Member Field Name 	Type 
name 	String 
contactList 	List<Contact> 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Group(String name, List<Contact> contactList). In constructor pass the contactList value as an empty list. Only one group will be present at a time.

c) Create the following static method in Contact class,
Method Name 	Description 
public static Contact createContact(String detail) 	This method accepts a string which contains contact details separated by commas. Split the details and create a contact object from the details and return the contact object. 
The contact details should be given as a comma-separated value in the below order,
name,company,title, mobile, alternateMobile, email, dateCreated

d) Create the following methods in Group class,
Method Name 	Description 
public void addContactToGroup(Contact contact) 	This method accepts a contact object and add the contact to the contact list of the current group. 
public Boolean removeContactFromGroup(String name) 	This method will get a name of the contact and delete the contact with the specified name from the current group.
If a contact with the given contact name found, delete the contact and return true. If a contact with the contact name is not found return false. 
public void displayContacts() 	This method will display the contact list in the current group.
If the contact list is empty display "No contact to show", else
display "Contacts in [group name]" and display all the contact details in the specified format. Where [group name] specifies the name of the group. 

After deletion, if true is returned print "Contact successfully deleted", else print "Contact not found in the group".

Note: The above print statements should be present in the main method.

When the “contact” object is printed, it should display the following format
Print format:
String.format("%-15s %-15s %-20s %-15s %-15s %-15s %s", "Name","Company","Title","Mobile","Alternate Mobile","Email","Date Created");

Sample Input and Output:

Enter the group name:
Activity Group
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
3
No contact to show
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
1
Enter the number of contacts:
3
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654873210,8973216540,starc@ibm.com,14-01-2018
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
3
Contacts in Activity Group
Name 	Company 	Title 	Mobile 	Alternate Mobile 	  Email 	Date Created 
John 	Microsoft 	Product Engineer 	9876543210 	7894651320 	  john@micro.com 	12-01-2018 
Peter 	Apple 	Team Lead 	9654873210 	9873216540 	  peter@apple.com 	15-01-2018 
Starc 	IBM 	HR 	9654873210 	8973216540 	  starc@ibm.com 	14-01-2018 
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
2
Enter the name of the contact to be deleted:
Linda
Contact not found in the group
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
2
Enter the name of the contact to be deleted:
Starc
Contact successfully deleted
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
1
Enter the number of contacts:
1
Mark,IBM,HR,9654873210,8973216540,mark@ibm.com,14-01-2018
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
3
Contacts in Activity Group
Name 	Company 	Title 	Mobile 	Alternate Mobile 	  Email 	Date Created 
John 	Microsoft 	Product Engineer 	9876543210 	7894651320 	  john@micro.com 	12-01-2018 
Peter 	Apple 	Team Lead 	9654873210 	9873216540 	  peter@apple.com 	15-01-2018 
Mark 	IBM 	HR 	9654873210 	8973216540 	  mark@ibm.com 	14-01-2018 
1.Add Contact
2.Delete Contact
3.Display contacts
4.Exit
Enter your choice:
4 

Contact Group - Requirement 5 
Requirement 5:

In this requirement, you need to sort the list of contacts based on name, email or date created.

a) Create a Class Contact with the following attributes:
Member Field Name 	Type 
name 	String 
company 	String 
title 	String 
mobile 	String 
alternateMobile 	String 
email 	String 
dateCreated 	java.util.Date 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Contact(String name, String company, String title, String mobile, String alternateMobile, String email, Date dateCreated)

b) Create the following static methods in the Contact class,
Method Name 	Description 
static Contact createContact(String detail) 	This method accepts a String. The contact detail separated by commas is passed as the argument. This method will split the details and creates a contact object and return it. 
The contact details should be given as a comma-separated value in the below order,
name,company,title, mobile, alternateMobile, email, dateCreated

c) The Contact class should implement the Comparable interface which sorts the contact list based on names. While comparing all the names in the list are unique.

d) Create a class DateComparator which implements Comparator interface and sort the contact list based on dateCreated. While comparing all the date created attributes in the list are unique.

e) Create a class DomainComparator which implements Comparator interface and sort the contact list based on the domain name in the email. While comparing all the email domain in the list are unique.

For email id  john@micro.com, the domain name is micro.

Get the number of contacts and contact details and create a contact list. Sort the contact according to the given option and display the list.

When the “contact” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s %s\n", "Name","Company","Title","Mobile","Alternate Mobile","Email","Date Created");

Sample Input and Output 1:

Enter the number of the contacts:
4
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,13-01-2018
Enter a type to sort:
1.Sort by name
2.Sort by email domain
3.Sort by date created
1
Name 	Company 	  	Mobile 	  Alternate Mobile 	  Email 	Date Created 
John 	Microsoft 	Product Engineer 	9876543210 	  7894651320 	  john@micro.com 	12-01-2018 
Peter 	Apple 	Team Lead 	9654873210 	  9873216540 	  peter@apple.com 	15-01-2018 
Starc 	IBM 	HR 	9654373210 	  8989216540 	  starc@ibm.com 	14-01-2018 
Tony 	Intel 	HR 	9694873210 	  8973212540 	  tony@intel.com 	13-01-2018 


Sample Input and Output 2:

Enter the number of the contacts:
4
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Mark,Intel,Manager,7994873210,9873212340,mark@intel.com,13-01-2018
Enter a type to sort:
1.Sort by name
2.Sort by email domain
3.Sort by date created
3
Name 	Company 	  	Mobile 	  Alternate Mobile 	  Email 	Date Created 
John 	Microsoft 	Product Engineer 	9876543210 	  7894651320 	  john@micro.com 	12-01-2018 
Mark 	Intel 	Manager 	7994873210 	  9873212340 	  mark@intel.com 	13-01-2018 
Starc 	IBM 	HR 	9654373210 	  8989216540 	  starc@ibm.com 	14-01-2018 
Peter 	Apple 	Team Lead 	9654873210 	  9873216540 	  peter@apple.com 	15-01-2018 

Sample Input and Output 3:

Enter the number of the contacts:
4
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,13-01-2018
Enter a type to sort:
1.Sort by name
2.Sort by email domain
3.Sort by date created
2
Name 	Company 	  	Mobile 	  Alternate Mobile 	  Email 	Date Created 
Peter 	Apple 	Team Lead 	9654873210 	  9873216540 	  peter@apple.com 	15-01-2018 
Starc 	IBM 	HR 	9654373210 	  8989216540 	  starc@ibm.com 	14-01-2018 
Tony 	Intel 	HR 	9694873210 	  8973212540 	  tony@intel.com 	13-01-2018 
John 	Microsoft 	Product Engineer 	9876543210 	7894651320 	  john@micro.com 	12-01-2018 


Contact Group - Requirement 6 

Requirement 6:

In this requirement, given a list of contacts you need to find the number of contacts present in each domain using Map.

a) Create a Class Contact with the following attributes:
Member Field Name 	Type 
name 	String 
company 	String 
title 	String 
mobile 	String 
alternateMobile 	String 
email 	String 
dateCreated 	java.util.Date 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters. Add a default constructor and a parameterized constructor to take in all attributes in the given order: Contact(String name, String company, String title, String mobile, String alternateMobile, String email, Date dateCreated)

b) Create the following static methods in the Contact class,
Method Name 	Description 
static Map<String,Integer> getContactCountForDomain(List<Contact> list) 	This method accepts a list of Contacts as arguments and returns a TreeMap with the domain name as key and number of contacts for the particular domain name as value and return the map. 
In the TreeMap have the domain name as key and Count the number of contacts for the domain name and keep the number of contacts for the domain as value. Print the value sorted by the domain name.

The contact details should be given as a comma separated value in the below order,
name,company,title, mobile, alternateMobile, email, dateCreated

Example: For email id  john@micro.com, the domain name is micro.

Print format:
System.out.format("%-15s %s\n","Domain Name","Count");

Sample Input and Output 1:

Enter the number of contacts:
5
John,Microsoft,Product Engineer,9876543210,7894651320,john@micro.com,12-01-2018
Peter,Apple,Team Lead,9654873210,9873216540,peter@apple.com,15-01-2018
Starc,IBM,HR,9654373210,8989216540,starc@ibm.com,14-01-2018
Tony,Intel,HR,9694873210,8973212540,tony@intel.com,14-01-2018
Mark,Intel,Manager,7994873210,9873212340,mark@intel.com,13-01-2018
Domain Name     Count
apple                         1
ibm                              1
intel                             2
micro                         1 


Page of
Song Group - Requirement 1
Your dad uses an old computer. He is unaware of the latest smartphones and apps present in it. He used to store his songs in a folder structure organized based on the type of the song. You being an aspirant programmer wanted to create an application which will be useful to download songs and maintain a playlist. There are two major domains Song and Playlist. The song details are stored in Song domain and are grouped together in Playlist domain.
Requirement 1:
Let’s start off by creating two Song objects and check whether they are equal.
 
1.	Create a Song Class with the following attributes:
Member Field Name	Type
name	String
artist	String
songType	String
rating	Double
numberOfDownloads	Integer
dateDownloaded	java.util.Date
2.	Mark all the attributes as private
3.	Create / Generate appropriate Getters & Setters
4.	Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Song(String name, String artist, String songType, Double rating,Integer numberOfDownloads,java.util.Date dateDownloaded)
5.	When the “Song” object is printed, it should display the following details: [Override the toString method]
Print format:
Name:"name"
Artist:"artist"
Song Type:"songType"
Rating:"rating"
Number of Downloads:"numberOfDownloads"
Date Downloaded:"dateDownloaded"(dd-MM-yyyy)
6.	Two songs are considered same if they have the same name, artist, and songType. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]

The input format consists of song details separated by comma in the below order,
(name,artist, songType,rating,numberOfDownloads,dateDownloaded)
The Input to your program would be details of two songs, you need to display their details as given in "5th point(refer above)" and compare the two songs and display if the Songs are same or different.

Note: There is an empty line between display statements. Print the empty lines in the main method.

Sample INPUT & OUTPUT 1:

Enter song 1 detail:
Shape of you,Edsheeran,Pop,4.8,100000,12-01-2018
Enter song 2 detail:
Shape of you,Edsheeran,Pop,4.8,100000,12-01-2018

Song 1:
Name:Shape of you
Artist:Edsheeran
Song Type:Pop
Rating:4.8
Number of Downloads100000
Date Downloaded:12-01-2018

Song 2:
Name:Shape of you
Artist:Edsheeran
Song Type:Pop
Rating:4.8
Number of Downloads100000
Date Downloaded:12-01-2018

Song 1 is same as Song 2

Sample INPUT & OUTPUT 2:

Enter song 1 detail:
Shape of you,Edsheeran,Pop,4.8,100000,12-01-2018
Enter song 2 detail:
Perfect,Edsheeran,Pop,4.8,100000,12-01-2018

Song 1:
Name:Shape of you
Artist:Edsheeran
Song Type:Pop
Rating:4.8
Number of Downloads100000
Date Downloaded:12-01-2018

Song 2:
Name:Perfect
Artist:Edsheeran
Song Type:Pop
Rating:4.8
Number of Downloads100000
Date Downloaded:12-01-2018

Song 1 and Song 2 are different



import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
public class Main {
public static void main(String []args) throws IOException, NumberFormatException, ParseException{
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
Song s[]=new Song[2];
System.out.println("Enter song 1 detail:");
String split = reader.readLine();
//fill the code
String s1[]=split.split(",");
s[0]=new Song(s1[0],s1[1],s1[2],Double.parseDouble(s1[3]),Integer.parseInt(s1[4]),sdf.parse(s1[5]));
System.out.println("Enter song 2 detail:");
split = reader.readLine();
//fill the code
String s2[]=split.split(",");
s[1]=new Song(s2[0],s2[1],s2[2],Double.parseDouble(s2[3]),Integer.parseInt(s2[4]),sdf.parse(s2[5]));
int i=1;
for(Song son:s)
{
System.out.println("Song "+i+":");
System.out.println(son);
i++;
}
if(s[0].equals(s[1]))
{
System.out.println("Song 1 is same as Song 2");
}
else
System.out.println("Song 1 and Song 2 are different");
}
}



import java.text.SimpleDateFormat;
import java.util.Date;

public class Song {
//fill the code
private String name;
private String artist;
private String songType;
private Double rating;
private Integer numberOfDownloads;
private java.util.Date dateDownloaded;
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getArtist() {
return artist;
}
public void setArtist(String artist) {
this.artist = artist;
}
public String getSongType() {
return songType;
}
public void setSongType(String songType) {
this.songType = songType;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Integer getNumberOfDownloads() {
return numberOfDownloads;
}
public void setNumberOfDownloads(Integer numberOfDownloads) {
this.numberOfDownloads = numberOfDownloads;
}
public java.util.Date getDateDownloaded() {
return dateDownloaded;
}
public void setDateDownloaded(java.util.Date dateDownloaded) {
this.dateDownloaded = dateDownloaded;
}
public Song(String name, String artist, String songType, Double rating,
Integer numberOfDownloads, Date dateDownloaded) {
super();
this.name = name;
this.artist = artist;
this.songType = songType;
this.rating = rating;
this.numberOfDownloads = numberOfDownloads;
this.dateDownloaded = dateDownloaded;
}
public Song() {
super();
}
@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + ((artist == null) ? 0 : artist.hashCode());
result = prime * result + ((name == null) ? 0 : name.hashCode());
result = prime * result
+ ((songType == null) ? 0 : songType.hashCode());
return result;
}
@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
Song other = (Song) obj;
if (artist == null) {
if (other.artist != null)
return false;
} else if (!artist.equals(other.artist))
return false;
if (name == null) {
if (other.name != null)
return false;
} else if (!name.equals(other.name))
return false;
if (songType == null) {
if (other.songType != null)
return false;
} else if (!songType.equals(other.songType))
return false;
return true;
}
@Override
public String toString() {
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
return "Name:"+name+"\nArtist:"+artist+"\nSong Type:"+songType+"\nRating:"+rating+"\nNumber of Downloads"+numberOfDownloads+"\nDate Downloaded:"+sdf.format(dateDownloaded);
}
}



 Page of
Song Group - Requirement 2

Requirement 2:
Now we are going to start creating a playlist and add songs to it. Start with creating a playlist and use menu-driven approach to add, remove details of the songs in the group.

a)Create a Class Song with the following attributes:

Member Field Name	Type
name	String
artist	String
songType	String
rating	Double
numberOfDownloads	Integer
dateDownloaded	java.util.Date

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Song(String name, String artist, String songType, Double rating, Integer numberOfDownloads,java.util.Date dateDownloaded)

b)Create a Class PlayList with the following attributes:

Member Field Name	Type
name	String
songList	List<Song>

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: PlayList(String name, List<Song> songList). In constructor pass the songList value as an empty list. Only one playlist will be present at a time.

c) Create the following static method in Song class,
Method Name	Description
public static Song createSong(String song)	This method accepts a string which contains song details separated by commas. Split the details and create a song object from the details and return it.
The song details should be given as a comma-separated value in the below order,
name,artist,songType, rating, numberOfDownloads,dateDownloaded

d) Create the following methods in PlayList class,
Method Name	Description
public void addSongToPlaylist(Song song)	This method accepts a Song object and add the song to the song list of the current Playlist.
public Boolean removeSongFromPlaylist(String name)	This method acceptst a String . The name of the song is passed as value. Delete the song with the specified name from the current PlayList.
If a songwith the given songname found,delete thesong and return true. If a songwith thesong name is not found return false.
public void displaySongs()	This method will display the song list in the current playlist.
If the song list is empty display "No song to show", else
display "Songs in [playlist name]" and display all the song details in the specified format. Where[playlist name] specifies the name of the playlist.

After deletion, if true is returned print "Songsuccessfully deleted", else print "Song not found in the Play List".

Note: The above print statements should be present in the main method. The songList of a Playlist is printed in the same order as they added to the playlist.

When the “song” object is printed, it should display the following format
Print format:
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n", "Name","Artist","Song Type","Rating","No of Download","Date Downloaded");

Sample Input and Output:

Enter the Play list name:
Mysongs
1.Add Song
2.Remove Song
3.Display
4.Exit
Enter your choice:
3
No song to show
1.Add Song
2.Remove Song
3.Display
4.Exit
Enter your choice:
1
Enter the number of Songs:
3
Enter song 1 detail:
Shape of you,Edsheeran,Pop,4.8,12000,12-04-2017
Enter song 2 detail:
Perfect,Edsheeran,Pop,4.5,120500,06-08-2017
Enter song 3 detail:
Mercy,Shawn Mendes,Jazz,4.6,50000,03-09-2016
1.Add Song
2.Remove Song
3.Display
4.Exit
Enter your choice:
3
Songs in Mysongs
Name            Artist          Song Type            Rating          No of Download  Date Downloaded
Shape of you    Edsheeran       Pop                  4.8             12000                12-04-2017     
Perfect         Edsheeran       Pop                  4.5             120500               06-08-2017     
Mercy           Shawn Mendes    Jazz                 4.6             50000                03-09-2016     
1.Add Song
2.Remove Song
3.Display
4.Exit
Enter your choice:
2
Enter the name of the song to be deleted:
Perfect
Song successfully deleted
1.Add Song
2.Remove Song
3.Display
4.Exit
Enter your choice:
3
Songs in Mysongs
Name            Artist          Song Type            Rating          No of Download  Date Downloaded
Shape of you    Edsheeran       Pop                  4.8             12000                12-04-2017     
Mercy           Shawn Mendes    Jazz                 4.6             50000                03-09-2016     
1.Add Song
2.Remove Song
3.Display
4.Exit
Enter your choice:
4     



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) throws IOException, NumberFormatException, ParseException {
BufferedReader buff = new BufferedReader(new InputStreamReader(System.in));
//PlayList pl=new PlayList();
System.out.println("Enter the Play list name:");
String name = buff.readLine();
PlayList pl=new PlayList(name,new ArrayList<Song>());
//fill the code
//Song sg=new Song();
while(true){
System.out.println("1.Add Song\n2.Remove Song\n3.Display\n4.Exit\nEnter your choice:");
Integer choice=Integer.parseInt(buff.readLine());
//fill the code
switch(choice)
{
case 1:
System.out.println("Enter the number of Songs:");
int n=Integer.parseInt(buff.readLine());
for(int i=0;i<n;i++)
{
System.out.println("Enter song "+(i+1)+" detail:");
String song=buff.readLine();
//Song sg=Song.createSong(song);
pl.addSongToPlaylist(Song.createSong(song));
}
break;
case 2:
System.out.println("Enter the name of the song to be deleted:");
String ff=buff.readLine();
if(pl.removeSongFromPlaylist(ff))
{
System.out.println("Song successfully deleted");
}
else
System.out.println("Song not found in the Play List");
break;
case 3:
pl.displaySongs();
break;
case 4:
System.exit(0);
}
}
}
}




import java.text.SimpleDateFormat;
import java.util.List;

public class PlayList {
//fill the code
private String name;
private List<Song> songList;
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public List<Song> getSongList() {
return songList;
}
public void setSongList(List<Song> songList) {
this.songList = songList;
}
public void addSongToPlaylist(Song song){
//fill the code
songList.add(song);
}
public PlayList(String name, List<Song> songList) {
super();
this.name = name;
this.songList = songList;
}
public PlayList() {
super();
}
public boolean removeSongFromPlaylist(String name){
//fill the code
for(int i=0;i<songList.size();i++)
{
if(songList.get(i).getName().equals(name))
{
songList.remove(i);
return true;
}
}
return false;
}
public void displaySongs(){
//fill the code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
if(songList.isEmpty())
{
System.out.println("No song to show");
}
else{
System.out.println("Songs in "+name);
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n", "Name","Artist","Song Type","Rating","No of Download","Date Downloaded");
for(Song s:songList)
{
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n",s.getName(),s.getArtist(),s.getSongType(),s.getRating(),s.getNumberOfDownloads(),sdf.format(s.getDateDownloaded()));

}
}
}
}



import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Song {
//fill the code
private String name;
private String artist;
private String songType;
private Double rating;
private Integer numberOfDownloads;
private java.util.Date dateDownloaded;
public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public String getArtist() {
return artist;
}

public void setArtist(String artist) {
this.artist = artist;
}

public String getSongType() {
return songType;
}

public void setSongType(String songType) {
this.songType = songType;
}

public Double getRating() {
return rating;
}

public void setRating(Double rating) {
this.rating = rating;
}

public Integer getNumberOfDownloads() {
return numberOfDownloads;
}

public void setNumberOfDownloads(Integer numberOfDownloads) {
this.numberOfDownloads = numberOfDownloads;
}

public java.util.Date getDateDownloaded() {
return dateDownloaded;
}

public void setDateDownloaded(java.util.Date dateDownloaded) {
this.dateDownloaded = dateDownloaded;
}

public Song(String name, String artist, String songType, Double rating,
Integer numberOfDownloads, Date dateDownloaded) {
super();
this.name = name;
this.artist = artist;
this.songType = songType;
this.rating = rating;
this.numberOfDownloads = numberOfDownloads;
this.dateDownloaded = dateDownloaded;
}

public Song() {
super();
}

public static Song createSong(String song) throws NumberFormatException, ParseException{
//fill the code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
String s[]=song.split(",");
Song sg=new Song(s[0],s[1],s[2],Double.parseDouble(s[3]),Integer.parseInt(s[4]),sdf.parse(s[5]));
return sg;
}
}

Requirement-3

In this requirement develop a feature in which you can search a List of Songs by songType, Date of Download or Rating.

a) Create a Class Song with the following attributes:
 
Member Field Name	Type
name	String
artist	String
songType	String
rating	Double
numberOfDownloads	Integer
dateDownlaoded	java.util.Date

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Song(String name, String artist, String songType, Double rating,Integer  numberOfDownloads,java.util.Date dateDownloaded)

b) Create a class SongBO with the following methods,
Method Name	Description
public List<Song> findSong(List<Song> songList,String type)	This method accepts a list of songs and songType as arguments and returns a list of songs with the given songType[Case-sensitive].
public List<Song>findSong(List<Song> SongList,Date dateCreated)	This method accepts a list of songs and created date as arguments and returns a list of songs that were created on the given specified date.
public List<Song>findSong(List<Song>SongList,Double rating)	This method accepts a list of songs and rating as arguments. Find all the songs with the given rating from the song list and return it.
The song details should be given as a comma-separated value in the below order,
name,artist,songType,rating, numberOfDownloads,dateDownloaded

When the “song” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n", "Name","Artist","Song Type","Rating","No of Download","Date of Download");

Note: The song lists are displayed in the main method.
             If any other choice is selected, display "Invalid choice"

Sample Input and Output 1:

Enter the number of Songs:
4
Shape Of You,Edsheeran,Pop,4.8,10000,12-10-2017
Perfect,Edsheeran,Pop,4.5,12000,04-05-2016
Something just like this,Coldplay,Melody,4.5,105421,05-07-1997
Mercy,Shawn Mendes,Jazz,4.8,214500,04-05-2016
Enter a search type:
1.Song Type
2.Date of Download
3.Rating
1
Enter the type:
Pop
Name	Artist	Song Type	Rating	No of Download	Date Downloaded
Shape Of You	Edsheeran	Pop	4.8
	10000	12-10-2017
Perfect	Edsheeran	Pop	4.5	12000	04-05-2016

Sample Input and Output 2:

Enter the number of Songs:
4
Shape Of You,Edsheeran,Pop,4.8,10000,12-10-2017
Perfect,Edsheeran,Pop,4.5,12000,04-05-2016
Something just like this,Coldplay,Melody,4.5,105421,05-07-1997
Mercy,Shawn Mendes,Jazz,4.8,214500,04-05-2016
Enter a search type:
1.Song Type
2.Date of Download
3.Rating
2
Enter the date:
04-05-2016
Name	Artist	Song Type	Rating	No of Download	Date Downloaded
Perfect	Edsheeran	Pop	4.5	12000	04-05-2016
Mercy	Shawn Mendes	Jazz	4.8	214500	04-05-2016
 

Sample Input and Output 3:

Enter the number of Songs:
4
Shape Of You,Edsheeran,Pop,4.8,10000,12-10-2017
Perfect,Edsheeran,Pop,4.5,12000,04-05-2016
Something just like this,Coldplay,Melody,4.5,105421,05-07-1997
Mercy,Shawn Mendes,Jazz,4.8,214500,04-05-2016
Enter a search type:
1.Song Type
2.Date of Download
3.Rating
3
Enter the rating:
4.5
Name	Artist	Song Type	Rating	No of Download	Date Downloaded
Perfect	Edsheeran	Pop	4.5	12000	04-05-2016
Something just like this	Coldplay	Melody	4.5	105421	05-07-1997


Sample Input and Output 4:

Enter the number of contact details:
4
Shape Of You,Edsheeran,Pop,4.8,10000,12-10-2017
Perfect,Edsheeran,Pop,4.5,12000,04-05-2016
Something just like this,Coldplay,Melody,4.5,105421,05-07-1997
Mercy,Shawn Mendes,Jazz,4.8,214500,04-05-2016
Enter a search type:
1.Name
2.Date created
3.Email domain
4
Invalid choice


SongBO
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class SongBO 
{
    public List<Song> findSong(List<Song> SongList,String type)
    {
List<Song> song1=new ArrayList<>();
for(Song s:SongList)
{
if(s.getSongType().equalsIgnoreCase(type))
song1.add(s);
}
return song1;
}
public List<Song> findSong(List<Song> SongList,Date dateDownloaded)
{
List<Song> song2=new ArrayList<>();
for(Song s:SongList)
{
if(s.getDateDownloaded().equals(dateDownloaded))
song2.add(s);
}
return song2;
}
public List<Song> findSong(List<Song> SongList,Double rating)
{
List<Song> song3=new ArrayList<>();
for(Song s:SongList)
{
if(s.getRating().equals(rating))
song3.add(s);
}
return song3;
}
}


Song

import java.text.SimpleDateFormat;
import java.util.Date;

public class Song 
{
String name;
String artist;
String songType;
Double rating;
Integer numberOfDownloads;
Date dateDownloaded;
public Song() {
super();
}
public Song(String name, String artist, String songType, Double rating,
Integer numberOfDownloads, Date dateDownloaded) {
super();
this.name = name;
this.artist = artist;
this.songType = songType;
this.rating = rating;
this.numberOfDownloads = numberOfDownloads;
this.dateDownloaded = dateDownloaded;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getArtist() {
return artist;
}
public void setArtist(String artist) {
this.artist = artist;
}
public String getSongType() {
return songType;
}
public void setSongType(String songType) {
this.songType = songType;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Integer getNumberOfDownloads() {
return numberOfDownloads;
}
public void setNumberOfDownloads(Integer numberOfDownloads) {
this.numberOfDownloads = numberOfDownloads;
}
public Date getDateDownloaded() {
return dateDownloaded;
}
public void setDateDownloaded(Date dateDownloaded) {
this.dateDownloaded = dateDownloaded;
}
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
@Override
public String toString() {
return String.format("%-15s %-15s %-20s %-15s %-20s %-15s", getName(),getArtist(),getSongType(),getRating(),getNumberOfDownloads(),sdf.format(getDateDownloaded()));
}
  
}


Main

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class Main {
    public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
SongBO sb = new SongBO();
List<Song> songList=new ArrayList<>();
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
Song s=null;
System.out.println("Enter the number of Songs:");
int n = Integer.parseInt(br.readLine());
for(int i=0;i<n;i++)
{
String split[]=(br.readLine()).split(",");
s=new Song(split[0],split[1],split[2],Double.parseDouble(split[3]),Integer.parseInt(split[4]),sdf.parse(split[5]));
songList.add(s);
}
System.out.println("Enter a search type:\n"
+ "1.Song Type\n"
+ "2.Date of Download\n"
+ "3.Rating");
int choice=Integer.parseInt(br.readLine());
switch(choice)
{
case 1:
System.out.println("Enter the song type:");
List<Song> sb1=sb.findSong(songList, br.readLine());
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n", "Name","Artist","Song Type","Rating","No of Download","Date of Download");
for(Song s1:sb1)
{
System.out.println(s1);
}
break;
case 2:
System.out.println("Enter the date:");
List<Song> sb2=sb.findSong(songList, sdf.parse(br.readLine()));
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n", "Name","Artist","Song Type","Rating","No of Download","Date of Download");
for(Song s2:sb2)
{
System.out.println(s2);
}
break;
case 3:
System.out.println("Enter the rating:");
List<Song> sb3=sb.findSong(songList, Double.parseDouble(br.readLine()));
System.out.format("%-15s %-15s %-20s %-15s %-20s %-15s\n", "Name","Artist","Song Type","Rating","No of Download","Date of Download");
for(Song s3:sb3)
{
System.out.println(s3);
}
break;
default: System.out.println("Invalid choice"); break;
}
}
}


 Page of
Playlist - Requirement 4
Requirement 4:

In this requirement, you need to sort the list of songs based on name, rating or popularity(number of downloads).

a) Create a Class Song with the following attributes:
Member Field Name	Type
name	String
artist	String
songType	String
dateDownloaded	java.util.Date
rating	Double
numberOfDownloads	Integer

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Song(String name, String artist, String songType,java.util.Date dateDownloaded, Double rating, Integer numberOfDownloads)

b) Create the following static methods in the Song class,
Method Name	Description
static Song createSong(String detail)	This method accepts a String. The song detail separated by commas is passed as the argument, split the details to create a song object and returns it.
The input format of Song details is separated by comma in the below order,
(name, artist, songType, dateDownloaded, rating, numberOfDownloads)

c) The Song class should implement the Comparableinterface which sorts the Song list based on names. While comparing all the names in the list are unique.

d) Create a classRatingComparator which implements Comparator interface and sort the song list based on rating.

e) Create a classPopularityComparator which implements Comparator interface and sort the song list based on the number of downloads.

Get the number of songs and song details and create a song list. Sort the song according to the given option and display the list.

When the “song” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", "Name","Artist","Song Type","Date of Download","Rating","No of Downloads");

Sample Input and Output 1:

Enter the number of the songs:
4
The Way,Fastball,Emotional,12-09-2017,4,10000
Mad World,Gary Jules,Emotional,12-09-2017,4.2,15000
Let It Be,The Beatles,Motivational,11-01-2010,4.8,500000
Amazed,lone star,Country,12-09-2000,4.2,10000
Enter a type to sort:
1.Sort by name
2.Sort by Rating
3.Sort by Popularity
1
Name            Artist          Song Type       Date of Download     Rating          No of Downloads
Amazed          lone star       Country         12-09-2000           4.2             10000
Let It Be       The Beatles     Motivational    11-01-2010           4.8             500000
Mad World       Gary Jules      Emotional       12-09-2017           4.2             15000
The Way         Fastball        Emotional       12-09-2017           4.0             10000

Sample Input and Output 2:

Enter the number of the songs:
4
The Way,Fastball,Emotional,12-09-2017,4.5,10000
Mad World,Gary Jules,Emotional,12-09-2017,4.2,15000
Let It Be,The Beatles,Motivational,11-01-2010,4.8,500000
Amazed,lone star,Country,12-09-2000,3.8,10000
Enter a type to sort:
1.Sort by name
2.Sort by Rating
3.Sort by Popularity
2
Name            Artist          Song Type       Date of Download     Rating          No of Downloads
Amazed          lone star       Country         12-09-2000           3.8             10000
Mad World       Gary Jules      Emotional       12-09-2017           4.2             15000
The Way         Fastball        Emotional       12-09-2017           4.5             10000
Let It Be       The Beatles     Motivational    11-01-2010           4.8             500000

Sample Input and Output 3:

Enter the number of the songs:
4
The Way,Fastball,Emotional,12-09-2017,4.5,15000
Mad World,Gary Jules,Emotional,12-09-2017,4.2,10500
Let It Be,The Beatles,Motivational,11-01-2010,4.8,5000
Amazed,lone star,Country,12-09-2000,3.8,10000
Enter a type to sort:
1.Sort by name
2.Sort by Rating
3.Sort by Popularity
3
Name            Artist          Song Type       Date of Download     Rating          No of Downloads
Let It Be       The Beatles     Motivational    11-01-2010           4.8             5000
Amazed          lone star       Country         12-09-2000           3.8             10000
Mad World       Gary Jules      Emotional       12-09-2017           4.2             10500
The Way         Fastball        Emotional       12-09-2017           4.5             15000




import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
public class Main {
    public static void main(String args[]) throws Exception {
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

System.out.println("Enter the number of the songs:");
List<Song> songList=new ArrayList<Song>();
Integer count = Integer.parseInt(br.readLine());
//fill the code
for(int i=0;i<count;i++)
{
Song sg=Song.createSong(br.readLine());
songList.add(sg);
}
System.out.println("Enter a type to sort:\n1.Sort by name\n2.Sort by Rating\n3.Sort by Popularity");
Integer choice=Integer.parseInt(br.readLine());
//fill the code
System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", "Name","Artist","Song Type","Date of Download","Rating","No of Downloads");
switch(choice)
{
case 1:
Collections.sort(songList);
//System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", "Name","Artist","Song Type","Date of Download","Rating","No of Downloads");
for(Song son:songList)
{
System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", son.getName(),son.getArtist(),son.getSongType(),sdf.format(son.getDateDownloaded()),son.getRating(),son.getNumberOfDownloads());
}
break;
case 2:
Collections.sort(songList,new RatingComparator());
//System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", "Name","Artist","Song Type","Date of Download","Rating","No of Downloads");
for(Song son:songList)
{
System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", son.getName(),son.getArtist(),son.getSongType(),sdf.format(son.getDateDownloaded()),son.getRating(),son.getNumberOfDownloads());
}
break;
case 3:
Collections.sort(songList,new PopularityComparator());
// ystem.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", "Name","Artist","Song Type","Date of Download","Rating","No of Downloads");
for(Song son:songList)
{
System.out.format("%-15s %-15s %-15s %-20s %-15s %s\n", son.getName(),son.getArtist(),son.getSongType(),sdf.format(son.getDateDownloaded()),son.getRating(),son.getNumberOfDownloads());
}
break;
}
}
}

import java.util.Comparator;

public class PopularityComparator implements Comparator<Song>{

@Override
public int compare(Song r1, Song r2) {
// TODO Auto-generated method stub
if(r1.getNumberOfDownloads()>r2.getNumberOfDownloads())
return 1;
else if(r1.getNumberOfDownloads()<r2.getNumberOfDownloads())
return -1;
else
return 0;
}
//fill the code
}




import java.util.Comparator;

public class RatingComparator implements Comparator<Song>{

@Override
public int compare(Song d1, Song d2) {
// TODO Auto-generated method stub
if(d1.getRating()>d2.getRating())
return 1;
else if(d1.getRating()<d2.getRating())
return -1;
else
return 0;
}
//fill the code
}



import java.text.SimpleDateFormat;
import java.util.Date;

public class Song implements Comparable<Song> {
    //fill the code
private String name;
private String artist;
private String songType;
private java.util.Date dateDownloaded;
private Double rating;
private Integer numberOfDownloads;
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getArtist() {
return artist;
}
public void setArtist(String artist) {
this.artist = artist;
}
public String getSongType() {
return songType;
}
public void setSongType(String songType) {
this.songType = songType;
}
public java.util.Date getDateDownloaded() {
return dateDownloaded;
}
public void setDateDownloaded(java.util.Date dateDownloaded) {
this.dateDownloaded = dateDownloaded;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Integer getNumberOfDownloads() {
return numberOfDownloads;
}
public void setNumberOfDownloads(Integer numberOfDownloads) {
this.numberOfDownloads = numberOfDownloads;
}
public Song(String name, String artist, String songType,
Date dateDownloaded, Double rating, Integer numberOfDownloads) {
super();
this.name = name;
this.artist = artist;
this.songType = songType;
this.dateDownloaded = dateDownloaded;
this.rating = rating;
this.numberOfDownloads = numberOfDownloads;
}
public Song() {
super();
}
/*public String toString() {
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

return String.format("%-15s %-15s %-15s %-20s %-15s %s",name,artist,songType,sdf.format(dateDownloaded),rating,numberOfDownloads);
}*/
public static Song createSong(String detail) throws Exception{
//fill the code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
String s[]=detail.split(",");
Song sg=new Song(s[0],s[1],s[2],sdf.parse(s[3]),Double.parseDouble(s[4]),Integer.parseInt(s[5]));
return sg;
}
@Override
public int compareTo(Song s1) {
// TODO Auto-generated method stub
return this.name.compareTo(s1.getName());
}
}



  Page of
Playlist - Requirement 5


Requirement 5:

In this requirement, given a list of songs you need to find the number of songs present in each type using Map.

a) Create a Class Song with the following attributes:

Member Field Name	Type
name	String
artist	String
songType	String
dateDownloaded	java.util.Date
rating	Double
numberOfDownloads	Integer


Mark all the attributes as private, Create / Generate appropriate Getters & Setters. Add a default constructor and a parameterized constructor to take in all attributes in the given order: Song(String name, String artist, String songType, java.util.Date dateDownloaded, Double rating ,Integer numberOfDownloads)

b) Create the following static methods in theSong class,


Method Name	Description
static Map<String,Integer> calculateTypeCount(List<Song> list)	This method accepts a list of Songs as arguments and returns a TreeMap with thesongType as key and number of songs for the particular songTypeas value.
In the TreeMap have the songType as key and Count the number of songs for the type and keep the number of songs for the type as value. Print the value sorted by the songType.

The song details should be given as a comma separated value in the below order,
name, artist, songType, dateDownloaded, rating, numberOfDownloads

Print format:
System.out.format("%-15s %s\n","Song type","Count");

Sample Input and Output 1:

Enter the number of songs
4
Shape of you,Ed sheeran,Pop,20-01-2018,4.5,150000
Sorry,Justin Bieber,Pop,15-12-2017,4.7,10000
We will rock you,Queen,Rock,11-01-2010,4.8,500000
Losing sleep,Chris,Country,12-09-2017,4,10000
Song type	Count
Country	1
Pop	2
Rock	1





import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
public class Main {
public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
Map<String,Integer> map=new TreeMap<String,Integer>();
List<Song>list=new ArrayList<Song>();
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
System.out.println("Enter the number of songs");
int n1=Integer.parseInt(br.readLine());
//fill the code
for(int i=0;i<n1;i++)
{
String sn=br.readLine();
String ss[]=sn.split(",");
Song s=new Song(ss[0],ss[1],ss[2],sdf.parse(ss[3]),Double.parseDouble(ss[4]),Integer.parseInt(ss[5]));
list.add(s);
}

map=Song.calculateTypeCount(list);
System.out.format("%-15s %s\n","Song type","Count");
//fill the code
for(String ss:map.keySet())
{
System.out.format("%-15s %d\n",ss,map.get(ss));

}
}
}




import java.util.Date;
import java.util.TreeMap;
import java.util.List;
import java.util.Map;
public class Song {
//fill the code
private String name;
private String artist;
private String songType;
private java.util.Date dateDownloaded;
private Double rating;
private Integer numberOfDownloads;
public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public String getArtist() {
return artist;
}

public void setArtist(String artist) {
this.artist = artist;
}

public String getSongType() {
return songType;
}

public void setSongType(String songType) {
this.songType = songType;
}

public java.util.Date getDateDownloaded() {
return dateDownloaded;
}

public void setDateDownloaded(java.util.Date dateDownloaded) {
this.dateDownloaded = dateDownloaded;
}

public Double getRating() {
return rating;
}

public void setRating(Double rating) {
this.rating = rating;
}

public Integer getNumberOfDownloads() {
return numberOfDownloads;
}

public void setNumberOfDownloads(Integer numberOfDownloads) {
this.numberOfDownloads = numberOfDownloads;
}

public Song(String name, String artist, String songType,
Date dateDownloaded, Double rating, Integer numberOfDownloads) {
super();
this.name = name;
this.artist = artist;
this.songType = songType;
this.dateDownloaded = dateDownloaded;
this.rating = rating;
this.numberOfDownloads = numberOfDownloads;
}

public Song() {
super();
}

public static Map<String,Integer> calculateTypeCount(List<Song> list){
//fill the code
int n=1;
Map<String,Integer> cmap=new TreeMap<String,Integer>();
for(Song s:list)
{
String f=s.getSongType();
if(cmap.containsKey(f))
{
n=cmap.get(f);
n++;
cmap.put(f, n);
}
else
cmap.put(f, 1);
}
return cmap;
}
}

Requirement-6

In this requirement, predict the state of mind of the user. The state of mind depends on the song type the user listened recently. Given the list of songs, he had heard recently predict feeling of the user. 

A user is happy if he has heard many songs of type Celebration.
A user is depressed if he has heard many songs of type Emotional.
A user is energetic if he has heard many songs of type Motivational.

a) Create a Song Class with the following private attributes:
Member Field Name	Type
name	String
artist	String
songType	String
dateDownloaded	java.util.Date
rating	Double
numberOfDownloads	Integer

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:Song(String name, String artist, String songType,java.util.Date dateDownloaded, Double rating, Integer numberOfDownloads) 

b) Create the following static methods in Song class, 
Method Name	Description
static Map<String,Integer> calculateTypeCount(List<Song> list)	This method accepts a list of Songs as arguments and create a HashMap with the songType as key and number of songs for the particular songTypeas value and return the map.
static String predictState(Map<String,Integer> perTypeCount)	This method accepts the song type map as an argument and returns a String which represents the user's state of mind as given below,
if song type is Emotional -> return "depressed"
if song type is Celebration -> return "happy"
if song type is Motivational -> return "energetic"

The input format of Song details is separated by comma in the below order,
(name, artist, songType, dateDownloaded, rating, numberOfDownloads) 

Note: The statement "The user is feeling [state of mind]" is displayed in the main method. Where [state of mind] represents the state of the user, which is returned by predictState method. 

Sample INPUT & OUTPUT 1:

Enter the number of songs
4
Here comes the sun,The Beatles,Motivational,20-01-2018,4.5,150000
Don't Give Up,Peter Gabriel,Motivational,15-12-2017,4.7,10000
Let It Be,The Beatles,Motivational,11-01-2010,4.8,500000
Mad World,Gary Jules,Emotional,12-09-2017,4,10000
The user is feeling energetic

Sample INPUT & OUTPUT 2:

Enter the number of songs
5
Mad World,Gary Jules,Emotional,12-09-2017,4.2,15000
Someone Like You,Adele,Emotional,15-12-2017,4.7,10000
Hurt,Johnny Cash,Emotional,11-01-2010,4.8,500000
The Way,Fastball,Emotional,12-09-2017,4,10000
Here comes the sun,The Beatles,Motivational,20-01-2018,4.5,150000
The user is feeling depressed



Main

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
public class Main {
public static void main(String[] args)throws IOException,ParseException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
List<Song> list=new ArrayList<>();
System.out.println("Enter the number of songs");
int n=Integer.parseInt(br.readLine());
Song s[]=new Song[n];
for(int i=0;i<n;i++)
{
String split[]=(br.readLine()).split(",");
s[i]=new Song(split[0],split[1],split[2],sdf.parse(split[3]),Double.parseDouble(split[4]),Integer.parseInt(split[5]));
list.add(s[i]);
}
Map<String,Integer> map=Song.calculateTypeCount(list);
String type=Song.predictState(map);
System.out.println("The user is feeling "+type);
}
}


Song

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
public class Song
{
String name;
String artist;
String songType;
Double rating;
Integer numberOfDownloads;
Date dateDownloaded;
public Song() {
super();
}
public Song(String name, String artist, String songType, Date dateDownloaded, Double rating,
Integer numberOfDownloads) {
super();
this.name = name;
this.artist = artist;
this.songType = songType;
this.rating = rating;
this.numberOfDownloads = numberOfDownloads;
this.dateDownloaded = dateDownloaded;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getArtist() {
return artist;
}
public void setArtist(String artist) {
this.artist = artist;
}
public String getSongType() {
return songType;
}
public void setSongType(String songType) {
this.songType = songType;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Integer getNumberOfDownloads() {
return numberOfDownloads;
}
public void setNumberOfDownloads(Integer numberOfDownloads) {
this.numberOfDownloads = numberOfDownloads;
}
public Date getDateDownloaded() {
return dateDownloaded;
}
public void setDateDownloaded(Date dateDownloaded) {
this.dateDownloaded = dateDownloaded;
}
public static Map<String,Integer> calculateTypeCount(List<Song> list)
{
Map<String,Integer> map=new HashMap<>();
for(Song song:list)
{
if(map.containsKey(song.getSongType()))
{
int i=map.get(song.getSongType());
map.put(song.getSongType(), i+1);
}
else
map.put(song.getSongType(), 1);
}
return map;
}
public static String predictState(Map<String,Integer> perTypeCount)
{
String type=""; int i,j,k;
try{i=perTypeCount.get("Emotional");}catch(NullPointerException e){i=0;}
try{j=perTypeCount.get("Celebration");}catch(NullPointerException e){j=0;}
try{k=perTypeCount.get("Motivational");}catch(NullPointerException e){k=0;}
if(i>j && i>k)
type="depressed";
else if(j>k)
type="happy";
else
type="energetic";
return type;
}
}


 Page of
Customer Table Booking - Requirement 1
Your friend has opened up a new restaurant and he finds it difficult to keep track of the tables booked by customers. Being an aspirant programmer help your friend with a small application that would help him keep track of the tables booked. There are three major domains Table, Customer, and Booking. The Table and Customer domain are used to store table and Customer details respectively. The third domain Booking is used maintain the booking details of a Customer corresponding to a particular table.

Requirement 1:
Let’s start off by creating Customer objects and check whether two objects are equal by overriding equals method.
 
1.	Create a Customer Class with the following private attributes:
 
Member Field Name	Type
id	Long
name	String
mobileNumber	String
birthdate	java.util.Date
averageSpendAmount	Double
totalAmount	Double
dateEnrolled	java.util.Date
rating	Double

 
2.	Mark all the attributes as private
3.	Create / Generate appropriate Getters & Setters
4.	Add a default constructor and a parameterized constructor to take in all attributes in the given order: Customer(Long id, String name, String mobileNumber, java.util.Date birthdate, Double averageSpendAmount, Double totalAmount, java.util.Date dateEnrolled, Double rating)
5.	When the “customer” object is printed, it should display the following details: [Override the toString method]
Print format:
Id:"id"
Name:"name"
Mobile Number:"mob num"
Date of Birth:"dob"
Average spent amount:"avg spent amount"
Total amount:"total amount"
Date Enrolled:"date enrolled"
Rating:"rating"
6.	Two customers are considered same if they have the same name, mobileNumber, andbirthdate. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]
The return type of Equals method is bool(either true or false), If it returns true, then print "Customer 1 is same as Customer 2", else print "Customer 1 and Customer 2 are different", That print statement will be present in the main method.
7.	The input format consists of customer details separated by comma in the below order,
(id, name, mobileNumber, birthdate, averageSpendAmount, totalAmount, dateEnrolled, rating)
The Input to your program would be details of two customers, you need to display their details as given in "5th point(refer above)" and compare the two customers and display if the Customers are same or different.

Create a class named as Main, which contains the main method, all the input, and output operations are performed in this method(main).

Note: There is an empty line between display statements. The empty lines are displayed in the Main method.

Sample INPUT & OUTPUT 1:

Enter the details of Customer 1:
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
Enter the details of Customer 2:
2,James,9876543201,12-12-1991,6000,35000,12-12-2013,4

Details of customer 1:
Id:1
Name:John
Mobile Number:9876543210
Date of Birth:12-12-1990
Average spent amount:5000.0
Total amount:25000.0
Date Enrolled:12-12-2012
Rating:3.0

Details of customer 2:
Id:2
Name:James
Mobile Number:9876543201
Date of Birth:12-12-1991
Average spent amount:6000.0
Total amount:35000.0
Date Enrolled:12-12-2013
Rating:4.0

Customer 1 and Customer 2 are different

Sample INPUT & OUTPUT 2:

Enter the details of Customer 1:
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
Enter the details of Customer 2:
2,John,9876543210,12-12-1990,8000,28000,12-11-2012,3.5

Details of customer 1:
Id:1
Name:John
Mobile Number:9876543210
Date of Birth:12-12-1990
Average spent amount:5000.0
Total amount:25000.0
Date Enrolled:12-12-2012
Rating:3.0

Details of customer 2:
Id:2
Name:John
Mobile Number:9876543210
Date of Birth:12-12-1990
Average spent amount:8000.0
Total amount:28000.0
Date Enrolled:12-11-2012
Rating:3.5

Customer 1 is same as Customer 2



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Main {
public static void main(String args[]) throws IOException, NumberFormatException, ParseException {
//fill the code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
Customer c[]=new Customer[2];
for(int i=0;i<2;i++){
System.out.println("Enter the details of Customer "+(i+1)+":");
String cd=br.readLine();
String s[]=cd.split(",");
c[i]=new Customer(Long.parseLong(s[0]),s[1],s[2],sdf.parse(s[3]),Double.parseDouble(s[4]),Double.parseDouble(s[5]),sdf.parse(s[6]),Double.parseDouble(s[7]));
}
int idd=1;
for(Customer cus:c)
{
System.out.println("Details of customer "+(idd)+":");
System.out.println(cus);
idd++;
}
if(c[0].equals(c[1]))
{
System.out.println("Customer 1 is same as Customer 2");
}
else
System.out.println("Customer 1 and Customer 2 are different");
}
}



import java.text.SimpleDateFormat;
import java.util.Date;

public class Customer {
//fill the code
private Long id;
private String name;
private String mobileNumber;
private java.util.Date birthdate;
private Double averageSpendAmount;
private Double totalAmount;
private java.util.Date dateEnrolled;
private Double rating;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getMobileNumber() {
return mobileNumber;
}
public void setMobileNumber(String mobileNumber) {
this.mobileNumber = mobileNumber;
}
public java.util.Date getBirthdate() {
return birthdate;
}
public void setBirthdate(java.util.Date birthdate) {
this.birthdate = birthdate;
}
public Double getAverageSpendAmount() {
return averageSpendAmount;
}
public void setAverageSpendAmount(Double averageSpendAmount) {
this.averageSpendAmount = averageSpendAmount;
}
public Double getTotalAmount() {
return totalAmount;
}
public void setTotalAmount(Double totalAmount) {
this.totalAmount = totalAmount;
}
public java.util.Date getDateEnrolled() {
return dateEnrolled;
}
public void setDateEnrolled(java.util.Date dateEnrolled) {
this.dateEnrolled = dateEnrolled;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Customer(Long id, String name, String mobileNumber, Date birthdate,
Double averageSpendAmount, Double totalAmount, Date dateEnrolled,
Double rating) {
super();
this.id = id;
this.name = name;
this.mobileNumber = mobileNumber;
this.birthdate = birthdate;
this.averageSpendAmount = averageSpendAmount;
this.totalAmount = totalAmount;
this.dateEnrolled = dateEnrolled;
this.rating = rating;
}
public Customer() {
super();
}
@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result
+ ((birthdate == null) ? 0 : birthdate.hashCode());
result = prime * result
+ ((mobileNumber == null) ? 0 : mobileNumber.hashCode());
result = prime * result + ((name == null) ? 0 : name.hashCode());
return result;
}
@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
Customer other = (Customer) obj;
if (birthdate == null) {
if (other.birthdate != null)
return false;
} else if (!birthdate.equals(other.birthdate))
return false;
if (mobileNumber == null) {
if (other.mobileNumber != null)
return false;
} else if (!mobileNumber.equals(other.mobileNumber))
return false;
if (name == null) {
if (other.name != null)
return false;
} else if (!name.equals(other.name))
return false;
return true;
}
@Override
public String toString() {
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
return "Id:"+id+"\nName:"+name+"\nMobile Number:"+mobileNumber+"\nDate of Birth:"+sdf.format(birthdate)+"\nAverage spent amount:"+averageSpendAmount+"\nTotal amount:"+totalAmount+"\nDate Enrolled:"+sdf.format(dateEnrolled)+"\nRating:"+rating;
}
}

  Page of
Customer Table Booking - Requirement 2
Requirement 2:
One of the main features of any application is searching. In this requirement, you need to search customers based on name, birthdate, and rating.

a) Create a Customer Class with the following private attributes:
Member Field Name	Type
id	Long
name	String
mobileNumber	String
birthdate	java.util.Date
averageSpendAmount	Double
totalAmount	Double
dateEnrolled	java.util.Date
rating	Double

Mark all the attributes as private, Create / Generate appropriate Getters & Setters,Add a default constructor and a parameterized constructor to take in all attributes in the given order:Customer(Long id, String name, String mobileNumber, java.util.Date birthdate, Double averageSpendAmount, Double totalAmount, java.util.Date dateEnrolled, Double rating)

b) Create the following static methods in theContactBO class,
Method Name	Description
static Customer createCustomer(String line)	This method accepts a String as argument. Comma-separated Customer detail is passed to this method. Split the value then create a customer object and return the customer object.
static List<Customer> findCustomer(List<Customer> customerList,String name)	This method accepts customer list and a customer name as arguments. Find the list of customers with given name and return the list. If no customers found with the given name return null.
static List<Customer> findCustomer(List<Customer> customerList,Date birth)	This method accepts customer list and birth date as arguments. Find the list of customers with the given birth date and return the list. If no customers found with the givenbirth date return null.
static List<Customer> findCustomer(List<Customer> customerList,Double rating)	This method accepts customer list and rating as arguments. Find the list of customers with the given rating value and return the list. If no customers found with the givenrating return null.

The input format consists of customer details separated by comma in the below order,
(id, name, mobileNumber, birthdate, averageSpendAmount, totalAmount, dateEnrolled, rating)

When the “customer” object is printed, it should display the following format
Print format:
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");

Sample INPUT & OUTPUT 1:

Enter the number of customers:
3
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
2,James,9876543201,12-12-1991,6000,35000,12-12-2013,4
3,John,9567843201,14-09-1987,6000,35000,12-12-2013,4
Enter the search type:
1.By name
2.By birth date
3.By rating
1
Enter the name of the customer to be searched:
John
Id    Name            Mobile Number   Date of Birth   Average spent amount Total amount    Date Enrolled   Rating
1     John            9876543210      12-12-1990      5000.0               25000.0         12-12-2012      3.0
3     John            9567843201      14-09-1987      6000.0               35000.0         12-12-2013      4.0

Sample INPUT & OUTPUT 2:

Enter the number of customers:
3
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
2,James,9876543201,12-12-1991,6000,35000,12-12-2013,4
3,Parker,9567843201,14-09-1987,6000,35000,12-12-2013,4
Enter the search type:
1.By name
2.By birth date
3.By rating
3
Enter the rating of the customer to be searched:
4
Id    Name            Mobile Number   Date of Birth   Average spent amount Total amount    Date Enrolled   Rating
2     James           9876543201      12-12-1991      6000.0               35000.0         12-12-2013      4.0
3     Parker          9567843201      14-09-1987      6000.0               35000.0         12-12-2013      4.0

Sample INPUT & OUTPUT 3:

Enter the number of customers:
3
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
2,James,9876543201,12-12-1990,6000,35000,12-12-2013,4
3,Parker,9567843201,14-09-1987,6000,35000,12-12-2013,4
Enter the search type:
1.By name
2.By birth date
3.By rating
2
Enter the birth date of the customer to be searched:
12-12-1990
Id    Name            Mobile Number   Date of Birth   Average spent amount Total amount    Date Enrolled   Rating
1     John            9876543210      12-12-1990      5000.0               25000.0         12-12-2012      3.0
2     James           9876543201      12-12-1990      6000.0               35000.0         12-12-2013      4.0

Sample INPUT & OUTPUT 4:

Enter the number of customers:
3
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
2,James,9876543201,12-12-1991,6000,35000,12-12-2013,4
3,John,9567843201,14-09-1987,6000,35000,12-12-2013,4
Enter the search type:
1.By name
2.By birth date
3.By rating
1
Enter the name of the customer to be searched:
Starc
No customers found with the given name

Sample INPUT & OUTPUT 5:

Enter the number of customers:
3
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
2,James,9876543201,12-12-1991,6000,35000,12-12-2013,4
3,Parker,9567843201,14-09-1987,6000,35000,12-12-2013,4
Enter the search type:
1.By name
2.By birth date
3.By rating
3
Enter the rating of the customer to be searched:
3.5
No customers found with the given rating

Sample INPUT & OUTPUT 6:

Enter the number of customers:
3
1,John,9876543210,12-12-1990,5000,25000,12-12-2012,3
2,James,9876543201,12-12-1990,6000,35000,12-12-2013,4
3,Parker,9567843201,14-09-1987,6000,35000,12-12-2013,4
Enter the search type:
1.By name
2.By birth date
3.By rating
2
Enter the birth date of the customer to be searched:
10-10-1998
No customers found with the given birth date



import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class CustomerBO {
public static Customer createCustomer(String line) throws Exception{
//fill the code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
String a1[]=line.split(",");
Customer c=new Customer(Long.parseLong(a1[0]),a1[1],a1[2],sdf.parse(a1[3]),Double.parseDouble(a1[4]),Double.parseDouble(a1[5]),sdf.parse(a1[6]),Double.parseDouble(a1[7]));
return c;
}
public static List<Customer> findCustomer(List<Customer> customerList,String name) {
//fill the code
List<Customer> l1=new ArrayList<>();
for(Customer c:customerList)
{
if(c.getName().equals(name))
{
l1.add(c);
}
}
if(l1.isEmpty())
return null;
else
return l1;
}
public static List<Customer> findCustomer(List<Customer> customerList,Date birth) {
//fill the code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

List<Customer> l2=new ArrayList<>();
//System.out.println("yi");
for(Customer c1:customerList)
{
//System.out.println(sdf.format(c1.getBirthdate())+sdf.format(birth));
if(sdf.format(c1.getBirthdate()).equals(sdf.format(birth)))
{
// System.out.println(sdf.format(c1.getBirthdate())+sdf.format(birth));
l2.add(c1);
}
}
if(l2.isEmpty())
return null;
else
return l2;
}
public static List<Customer> findCustomer(List<Customer> customerList,Double rating) {
//fill the code
List<Customer> l3=new ArrayList<>();
for(Customer c2:customerList)
{
if(c2.getRating().equals(rating))
{
l3.add(c2);
}
}
if(l3.isEmpty())
return null;
else
return l3;
}
}



import java.util.Date;

public class Customer {
//fill the code
private Long id;
private String name;
private String mobileNumber;
private java.util.Date birthdate;
private Double averageSpendAmount;
private Double totalAmount;
private java.util.Date dateEnrolled;
private Double rating;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getMobileNumber() {
return mobileNumber;
}
public void setMobileNumber(String mobileNumber) {
this.mobileNumber = mobileNumber;
}
public java.util.Date getBirthdate() {
return birthdate;
}
public void setBirthdate(java.util.Date birthdate) {
this.birthdate = birthdate;
}
public Double getAverageSpendAmount() {
return averageSpendAmount;
}
public void setAverageSpendAmount(Double averageSpendAmount) {
this.averageSpendAmount = averageSpendAmount;
}
public Double getTotalAmount() {
return totalAmount;
}
public void setTotalAmount(Double totalAmount) {
this.totalAmount = totalAmount;
}
public java.util.Date getDateEnrolled() {
return dateEnrolled;
}
public void setDateEnrolled(java.util.Date dateEnrolled) {
this.dateEnrolled = dateEnrolled;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Customer(Long id, String name, String mobileNumber, Date birthdate,
Double averageSpendAmount, Double totalAmount, Date dateEnrolled,
Double rating) {
super();
this.id = id;
this.name = name;
this.mobileNumber = mobileNumber;
this.birthdate = birthdate;
this.averageSpendAmount = averageSpendAmount;
this.totalAmount = totalAmount;
this.dateEnrolled = dateEnrolled;
this.rating = rating;
}
public Customer() {
super();
}
}



import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class Main {
public static void main(String args[]) throws Exception{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
CustomerBO cb=new CustomerBO();
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
List<Customer> customerList=new ArrayList<>();
System.out.println("Enter the number of customers:");
Integer count = Integer.parseInt(br.readLine());
//fill the code
for(int i=0;i<count;i++)
{
String line=br.readLine();
Customer c=CustomerBO.createCustomer(line);
customerList.add(c);
}
System.out.println("Enter the search type:\n1.By name\n2.By birth date\n3.By rating");
Integer choice=Integer.parseInt(br.readLine());
//fill the code
switch(choice)
{
case 1:
System.out.println("Enter the name of the customer to be searched:");
String name=br.readLine();
List<Customer> l1=CustomerBO.findCustomer(customerList, name);
if(l1==null){
System.out.println("No customers found with the given name");
System.exit(0);}
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");
for(Customer c:l1)
{
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", c.getId(),c.getName(),c.getMobileNumber(),sdf.format(c.getBirthdate()),c.getAverageSpendAmount(),c.getTotalAmount(),sdf.format(c.getDateEnrolled()),c.getRating());
}
break;
case 2:
System.out.println("Enter the birth date of the customer to be searched:");
String birth=br.readLine();
Date d=sdf.parse(birth);
List<Customer> l2=CustomerBO.findCustomer(customerList,d);
if(l2==null){
System.out.println("No customers found with the given birth date");
System.exit(0);}
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");
for(Customer c1:l2)
{
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", c1.getId(),c1.getName(),c1.getMobileNumber(),sdf.format(c1.getBirthdate()),c1.getAverageSpendAmount(),c1.getTotalAmount(),sdf.format(c1.getDateEnrolled()),c1.getRating());
}
break;
case 3:
System.out.println("Enter the rating of the customer to be searched:");
Double rating=Double.parseDouble(br.readLine());
List<Customer> l3=CustomerBO.findCustomer(customerList, rating);
if(l3==null){
System.out.println("No customers found with the given rating ");
System.exit(0);}
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");
for(Customer c2:l3)
{
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", c2.getId(),c2.getName(),c2.getMobileNumber(),sdf.format(c2.getBirthdate()),c2.getAverageSpendAmount(),c2.getTotalAmount(),sdf.format(c2.getDateEnrolled()),c2.getRating());
}
break;
}
}
}

    Page of
Customer Table Booking - Requirement 3
Requirement 3:
   In this requirement, you need to validate the name and age of a customer. Also, you need to find if the customer is lucky or not.

i)  The name should contain only alphabets and not numbers or special characters.

ii)  The age is considered valid only if it is greater than equal to 18.(Take the current date as "01-01-2018")

iii) A customer is said to be lucky if the repetitive sum of his mobile number is equal to 1.

Ex:- Mobile number 9635285233 is lucky.
          step1- 9+6+3+5+2+8+5+2+3+3 - 46
         step 2 -  4+6 - 10
         step 3 - 1+0 - 1

a)Create a Class Main with the following static methods:
Method Name	Description
static Boolean validateAge(java.util.Date birth)	 This method accepts java.util.Date as argument and returns a boolean. Calculate the age and return True ifthe age of the customer is greater than or equal to 18, else return False
static Boolean validateName(String name)	This method accepts a String as argument and returns a boolean.Validate the name of the customer and return True if the name is valid, else returnFalse
static Boolean validateLuckyCustomer(String mobile)	This method accepts a String as argument and returns a boolean.Check whether the mobile number of the customer is lucky and return True, else return False

Print the following statements in the main method.
Print "Age is valid" if the age is greater than or equal to18, else print "Age is invalid".
Print "Name is valid" if the name contains only alphabets (a-z) or (A-Z), else print "Name is invalid".
Print "Lucky Customer" if the sum of the digits of the mobile number is 1, else print "Unlucky Customer".

Sample Input and Output 1:

1.Validate Age
2.Validate Name
3.Lucky Customer
Enter your choice:
1
Enter birthdate:
25-12-1989
Age is valid

Sample Input and Output 2:

1.Validate Age
2.Validate Name
3.Lucky Customer
Enter your choice:
1
Enter birthdate:
29-02-2000
Age is invalid

Sample Input and Output 3:

1.Validate Age
2.Validate Name
3.Lucky Customer
Enter your choice:
2
Enter name:
Jane
Name is valid

Sample Input and Output 4:

1.Validate Age
2.Validate Name
3.Lucky Customer
Enter your choice:
2
Enter name:
Jane Doe
Name is invalid

Sample Input and Output 5:

1.Validate Age
2.Validate Name
3.Lucky Customer
Enter your choice:
3
Enter mobile number:
9597074311
Lucky Customer

Sample Input and Output 6:

1.Validate Age
2.Validate Name
3.Lucky Customer
Enter your choice:
3
Enter mobile number:
9876543210
Unlucky Customer



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
public static void main(String args[]) throws IOException, ParseException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
System.out.println("1.Validate Age\n2.Validate Name\n3.Lucky Customer\nEnter your choice:");
Integer choice=Integer.parseInt(br.readLine());
if(choice==1) {
System.out.println("Enter birthdate:");
//fill your code
String bd=br.readLine();
Date birthDate=sdf.parse(bd);
if(validateAge(birthDate))
{
System.out.println("Age is valid");
}
else
System.out.println("Age is invalid");
}
if(choice==2) {
System.out.println("Enter name:");
//fill your code
String name=br.readLine();
if(validateName(name))
{
System.out.println("Name is valid");
}
else
System.out.println("Name is invalid");
}
if(choice==3) {
System.out.println("Enter mobile number:");
//fill your code
String mobile=br.readLine();
if(validateLuckyCustomer(mobile))
{
System.out.println("Lucky Customer");
}
else
System.out.println("Unlucky Customer");
}
}
public static Boolean validateAge(Date birthDate) throws ParseException{
//fill your code
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
 DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy");  
String curr="01-01-2018";
LocalDate currdate=LocalDate.parse(curr,format);
LocalDate bdate=LocalDate.parse(sdf.format(birthDate),format);
Period p=Period.between(currdate,bdate);
if(!(Math.abs(p.getYears())>=18))
{
return false;
}
else
return true;
}
public static Boolean validateName(String name){
//fill your code
for(int i=0;i<name.length();i++){
if(!(Character.isAlphabetic(name.charAt(i))))
{
return false;
}
}
return true;
}
public static Boolean validateLuckyCustomer(String mobile){
//fill your code
int sum=0;int num=0;
for(int i=0;i<mobile.length();i++)
{
sum=sum+Integer.parseInt(Character.toString(mobile.charAt(i)));
while(sum>9)
{
num=sum%10;
sum=sum/10;
sum=sum+num;
}
}
if(sum!=1)
{
return false;
}
else
return true;
}
}

   Page of
Customer Table Booking - Requirement 4
Requirement 4:
In this requirement, you need to sort the list of customers by name, amount or rating using Comparable and Comparator interfaces.
 
a) Create a Customer Class with the following private attributes:
Member Field Name	Type
id	Long
name	String
mobileNumber	String
birthdate	java.util.Date
averageSpendAmount	Double
totalAmount	Double
dateEnrolled	java.util.Date
rating	Double

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Customer(Long id, String name, StringmobileNumber, java.util.Date birthdate, Double averageSpendAmount, Double totalAmount, java.util.Date dateEnrolled, Double rating)

b) The Customer class should implement the Comparableinterface which sorts the customer list based on names.

c) Write a Comparator class namedAmountComparator implementing Comparator Interface. This comparator should sort the customers based on the averageSpendAmount.

d) Write a Comparator class namedRatingComparator implementing Comparator Interface. This comparator should sort the customers based on their rating.

The input format consists of customer details separated by comma in the below order,
(id, name, mobileNumber, birthdate, averageSpendAmount, totalAmount, dateEnrolled, rating)

Note: If any other option is selected display "Invalid choice".
Assume that name,amount spent and rating will be always unique.
When the “customer” object is printed, it should display the following format
Print format:
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");

Sample INPUT & OUTPUT 1:

Enter the number of customers:
3
222,John,9876543210,12-12-1990,4000,12000.5,12-12-2017,3.5
111,Mark,9632587410,13-01-1992,3000.0,8000,14-04-2014,4
333,Anil,9874563012,19-09-2015,6000.0,5000,16-09-2016,3.75
Enter a type to sort:
1.Name
2.Amount Spent
3.Rating
1
Id    Name            Mobile Number   Date of Birth   Average spent amount Total amount    Date Enrolled   Rating
333   Anil            9874563012      19-09-2015      6000.0               5000.0          16-09-2016      3.75
222   John            9876543210      12-12-1990      4000.0               12000.5         12-12-2017      3.5
111   Mark            9632587410      13-01-1992      3000.0               8000.0          14-04-2014      4.0

Sample INPUT & OUTPUT 2:

Enter the number of customers:
3
222,John,9876543210,12-12-1990,4000,12000.5,12-12-2017,3.5
111,Mark,9632587410,13-01-1992,3000.0,8000,14-04-2014,4
333,Anil,9874563012,19-09-2015,6000.0,5000,16-09-2016,3.75
Enter a type to sort:
1.Name
2.Amount Spent
3.Rating
2
Id    Name            Mobile Number   Date of Birth   Average spent amount Total amount    Date Enrolled   Rating
111   Mark            9632587410      13-01-1992      3000.0               8000.0          14-04-2014      4.0
222   John            9876543210      12-12-1990      4000.0               12000.5         12-12-2017      3.5
333   Anil            9874563012      19-09-2015      6000.0               5000.0          16-09-2016      3.75

Sample INPUT & OUTPUT 3:

Enter the number of customers:
3
222,John,9876543210,12-12-1990,4000,12000.5,12-12-2017,3.5
111,Mark,9632587410,13-01-1992,3000.0,8000,14-04-2014,4
333,Anil,9874563012,19-09-2015,6000.0,5000,16-09-2016,3.75
Enter a type to sort:
1.Name
2.Amount Spent
3.Rating
3
Id    Name            Mobile Number   Date of Birth   Average spent amount Total amount    Date Enrolled   Rating
222   John            9876543210      12-12-1990      4000.0               12000.5         12-12-2017      3.5
333   Anil            9874563012      19-09-2015      6000.0               5000.0          16-09-2016      3.75
111   Mark            9632587410      13-01-1992      3000.0               8000.0          14-04-2014      4.0

Sample INPUT & OUTPUT 4:

Enter the number of customers:
3
222,John,9876543210,12-12-1990,4000,12000.5,12-12-2017,3.5
111,Mark,9632587410,13-01-1992,3000.0,8000,14-04-2014,4
333,Anil,9874563012,19-09-2015,6000.0,5000,16-09-2016,3.75
Enter a type to sort:
1.Name
2.Amount Spent
3.Rating
4
Invalid choice     



import java.util.Comparator;

public class AmountComparator implements Comparator<Customer>{

@Override
public int compare(Customer a1, Customer a2) {
// TODO Auto-generated method stub
if(a1.getAverageSpendAmount()>a2.getAverageSpendAmount())
return 1;
else if(a1.getAverageSpendAmount()<a2.getAverageSpendAmount())
return -1;
else
return 0;
}
//fill the code
}



import java.util.Date;

public class Customer implements Comparable<Customer> {
//fill the code
private Long id;
private String name;
private String mobileNumber;
private java.util.Date birthdate;
private Double averageSpendAmount;
private Double totalAmount;
private java.util.Date dateEnrolled;
private Double rating;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getMobileNumber() {
return mobileNumber;
}
public void setMobileNumber(String mobileNumber) {
this.mobileNumber = mobileNumber;
}
public java.util.Date getBirthdate() {
return birthdate;
}
public void setBirthdate(java.util.Date birthdate) {
this.birthdate = birthdate;
}
public Double getAverageSpendAmount() {
return averageSpendAmount;
}
public void setAverageSpendAmount(Double averageSpendAmount) {
this.averageSpendAmount = averageSpendAmount;
}
public Double getTotalAmount() {
return totalAmount;
}
public void setTotalAmount(Double totalAmount) {
this.totalAmount = totalAmount;
}
public java.util.Date getDateEnrolled() {
return dateEnrolled;
}
public void setDateEnrolled(java.util.Date dateEnrolled) {
this.dateEnrolled = dateEnrolled;
}
public Double getRating() {
return rating;
}
public void setRating(Double rating) {
this.rating = rating;
}
public Customer(Long id, String name, String mobileNumber, Date birthdate,
Double averageSpendAmount, Double totalAmount, Date dateEnrolled,
Double rating) {
super();
this.id = id;
this.name = name;
this.mobileNumber = mobileNumber;
this.birthdate = birthdate;
this.averageSpendAmount = averageSpendAmount;
this.totalAmount = totalAmount;
this.dateEnrolled = dateEnrolled;
this.rating = rating;
}
public Customer() {
super();
}
@Override
public int compareTo(Customer c) {
// TODO Auto-generated method stub
return this.name.compareTo(c.name);
}

}



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class Main {
public static void main(String[] args) throws IOException, NumberFormatException, ParseException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
List<Customer> list=new ArrayList<Customer>();
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
System.out.println("Enter the number of customers:");
int n=Integer.parseInt(br.readLine());
for(int i=1;i<=n;i++){
String split=br.readLine();
String splitted[]=split.split(",");
list.add(new Customer(Long.parseLong(splitted[0]),splitted[1],splitted[2],sdf.parse(splitted[3]),Double.parseDouble(splitted[4]),Double.parseDouble(splitted[5]),sdf.parse(splitted[6]), Double.parseDouble(splitted[7])));
}
System.out.println("Enter a type to sort:\n1.Name\n2.Amount Spent\n3.Rating");
int choice=Integer.parseInt(br.readLine());
//fill the code
switch(choice)
{
case 1:
Collections.sort(list);
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");
for(Customer c:list)
{
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n",c.getId(),c.getName(),c.getMobileNumber(),sdf.format(c.getBirthdate()),c.getAverageSpendAmount(),c.getTotalAmount(),sdf.format(c.getDateEnrolled()),c.getRating());
}
break;
case 2:
Collections.sort(list,new AmountComparator());
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");
for(Customer c:list)
{
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n",c.getId(),c.getName(),c.getMobileNumber(),sdf.format(c.getBirthdate()),c.getAverageSpendAmount(),c.getTotalAmount(),sdf.format(c.getDateEnrolled()),c.getRating());
}
break;
case 3:
Collections.sort(list,new RatingComparator());
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n", "Id","Name","Mobile Number","Date of Birth","Average spent amount","Total amount","Date Enrolled","Rating");
for(Customer c:list)
{
System.out.format("%-5s %-15s %-15s %-15s %-20s %-15s %-15s %s\n",c.getId(),c.getName(),c.getMobileNumber(),sdf.format(c.getBirthdate()),c.getAverageSpendAmount(),c.getTotalAmount(),sdf.format(c.getDateEnrolled()),c.getRating());
}
break;
default:
System.out.println("Invalid choice");
break;
}
}
}


import java.util.Comparator;

public class RatingComparator implements Comparator<Customer> {

@Override
public int compare(Customer c1, Customer c2) {
// TODO Auto-generated method stub
if(c1.getRating()>c2.getRating())
return 1;
else if(c1.getRating()<c2.getRating())
return -1;
else
return 0;
}
//fill the code
}

REQUIREMENT-5
In this requirement, build a feature in which user can book tables. If the table is not available suggest alternate tables in ascending order of table number.

a) Create a Booking Class with the following private attributes:
Member Field Name	Type
id	Long
customerName	String
table	Table
membersPresent	Integer
billamount	Double
bookingTime	java.util.Date

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:Booking(Long id, String customerName, Table table, Integer membersPresent, Double billamount, Date bookingTime)

b) Create a Table Class with the following private attributes:
Member Field Name	Type
id	Long
number	Integer
capacity	Integer

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:Table(Long id, Integer number, Integer capacity)

c) The Table class should implement the Comparable interface which sorts the table list based on table number. 

d) Create the following static methods in the Table class, 
Method Name	Description
static Table createTable(String line)	This method accepts a String and returns a table object. The csv String is passed as value. Split the value, then create a table object and return it.

e) Create the following static methods in the Booking class, 
Method Name	Description
static void createBooking(List<Table> tableList,List<Booking> bookingList,String line)
 	This method accepts a list of table, booking list, and a booking detail from the user as arguments. Check if the table is already booked or not from bookinglist. If the table is not booked create a Booking object and add it to the booking list and display "Table successfully booked", if it is already booked display "Sorry the table is not available" followed by the available table details.

Note: The list of available tables and status of booking are displayed within the function. 

The input format of Table details are separated by comma in the below order,
(id, number, capacity)

The input format of Booking details are separated by comma in the below order,
(id, customerName, tableNumber, membersPresent, billamount, bookingTime) 

When the “table” object is printed, it should display the following format
Print format:
System.out.format("%-5s %-10s %s\n","ID","Number","Capacity");

Sample INPUT & OUTPUT 1:

Enter the number of tables:
2
101,10,10
102,20,15
Enter the booking details:
10,John,10,8,1200,12-01-2018
Table successfully booked
Do you want to continue(yes/no)
yes
Enter the booking details:
20,Peter,2,9,1300,12-01-2018
Sorry the table is not available
The available tables are:
ID    Number     Capacity
102   20         15
Do you want to continue(yes/no)
yes
Enter the booking details:
20,Peter,10,8,1300,12-01-2018
Sorry the table is not available
The available tables are:
ID    Number     Capacity
102   20         15
Do you want to continue(yes/no)
yes
Enter the booking details:
20,Peter,20,8,1300,12-01-2018
Table successfully booked
Do you want to continue(yes/no)
no


Main
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
public class Main {
public static void main(String args[]) throws Exception{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
List<Table> tableList=new ArrayList<Table>();
List<Booking> bookingList=new ArrayList<Booking>();
String choice="";
System.out.println("Enter the number of tables:");
Integer count=Integer.parseInt(br.readLine());
for(int i=0;i<count;i++)
tableList.add(Table.createTable(br.readLine()));
do
{
System.out.println("Enter the booking details:");
Booking.createBooking(tableList, bookingList, br.readLine());
System.out.println("Do you want to continue(yes/no)");
choice=br.readLine();
}
while(choice.equalsIgnoreCase("yes"));
}
}


Table

public class Table
{
Long id ;
Integer number;
Integer capacity;
public Table() {
super();
}

public Table(Long id, Integer number, Integer capacity) {
super();
this.id = id;
this.number = number;
this.capacity = capacity;
}

public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public Integer getNumber() {
return number;
}
public void setNumber(Integer number) {
this.number = number;
}
public Integer getCapacity() {
return capacity;
}
public void setCapacity(Integer capacity) {
this.capacity = capacity;
}

public static Table createTable(String line)
{
Table tab=null;
String in[]=line.split(",");
return tab=new Table(Long.parseLong(in[0]),Integer.parseInt(in[1]),Integer.parseInt(in[2]));
}
}


Booking
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
public class Booking 
{
Long id ;
String customerName;
Table table;
Integer membersPresent;
Double billamount;
Date bookingTime;
public Booking() {
super();
}

public Booking(Long id, String customerName, Table table,
Integer membersPresent, Double billamount, Date bookingTime) {
super();
this.id = id;
this.customerName = customerName;
this.table = table;
this.membersPresent = membersPresent;
this.billamount = billamount;
this.bookingTime = bookingTime;
}

public Long getId() {
return id;
}

public void setId(Long id) {
this.id = id;
}

public String getCustomerName() {
return customerName;
}

public void setCustomerName(String customerName) {
this.customerName = customerName;
}

public Table getTable() {
return table;
}

public void setTable(Table table) {
this.table = table;
}

public Integer getMembersPresent() {
return membersPresent;
}

public void setMembersPresent(Integer membersPresent) {
this.membersPresent = membersPresent;
}

public Double getBillamount() {
return billamount;
}

public void setBillamount(Double billamount) {
this.billamount = billamount;
}

public Date getBookingTime() {
return bookingTime;
}

public void setBookingTime(Date bookingTime) {
this.bookingTime = bookingTime;
}

public static void createBooking(List<Table> tableList,List<Booking> bookingList,String line) throws Exception
{
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
String in[]=line.split(",");
boolean flag=true;
for(Table tab:tableList)
{
if(tab.getNumber()==Integer.parseInt(in[2]))
{
Booking book=new Booking(Long.parseLong(in[0]),in[1],tab,Integer.parseInt(in[3]),Double.parseDouble(in[4]),sdf.parse(in[5]));
tableList.remove(tab);
bookingList.add(book);
System.out.println("Table successfully booked");
break;
}
else flag=false;
}
if(!flag)
{
System.out.println("Sorry the table is not available\nThe available tables are:");
System.out.format("%-5s %-10s %s\n","ID","Number","Capacity");
for(Table tab:tableList)
System.out.format("%-5s %-10s %s\n",tab.getId(),tab.getNumber(),tab.getCapacity());
}
}
}

 Page of
Customer Table Booking - Requirement 6
Requirement 6:
In this requirement, build a feature in which your friend will be able to see the amount of income gained on a daily basis.

a) Create a Booking Class with the following private attributes:
Member Field Name	Type
id	Long
customerName	String
tableNumber	Integer
membersPresent	Integer
billamount	Double
bookingTime	java.util.Date

Mark all the attributes as private, Create / Generate appropriate Getters & Setters,Add a default constructor and a parameterized constructor to take in all attributes in the given order: Booking(Long id, String customerName, Integer tableNumber, Integer membersPresent, Double billamount, Date bookingTime)

b) Create the following static method ofBooking class,
Method Name	Description
static Map<Date,Double> calculateDayBilling(List<Booking> bookings)	This method will accept a list of booking objects as an argument.
Create a map which contains the booking time as key(java.util.Date) and total amount for the Booking(Double) as value.
In this method iterate through the booking list and build a map having booking time as key and the total amount for particular day as value and return it.

The input format of Booking details is separated by comma in the below order,
(id, customerName, tableNumber, membersPresent, billamount, bookingTime)

Print the map details in the below format.
Print format:
System.out.format("%-20s %s\n","Date","Amount");

Note: The final details are printed in the main method. Display the details in ascending order of days. Display the amount correct to one decimal.

Sample INPUT & OUTPUT:

Enter the number of booking details:
5
10,John,10,8,1200,12-01-2018
20,Peter,20,8,1300,13-01-2018
30,Starc,30,4,1200,13-01-2018
40,Mark,10,4,900,14-01-2018
50,Jack,30,2,500,14-01-2018
Date                         Amount
12-01-2018           1200.0
13-01-2018           2500.0
14-01-2018           1400.0


import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Booking {
//fill the code
private Long id;
private String customerName;
private Integer tableNumber;
private Integer membersPresent;
private Double billamount;
private java.util.Date bookingTime;
public Long getId() {
return id;
}


public void setId(Long id) {
this.id = id;
}


public String getCustomerName() {
return customerName;
}


public void setCustomerName(String customerName) {
this.customerName = customerName;
}


public Integer getTableNumber() {
return tableNumber;
}


public void setTableNumber(Integer tableNumber) {
this.tableNumber = tableNumber;
}


public Integer getMembersPresent() {
return membersPresent;
}


public void setMembersPresent(Integer membersPresent) {
this.membersPresent = membersPresent;
}


public Double getBillamount() {
return billamount;
}


public void setBillamount(Double billamount) {
this.billamount = billamount;
}


public java.util.Date getBookingTime() {
return bookingTime;
}


public void setBookingTime(java.util.Date bookingTime) {
this.bookingTime = bookingTime;
}


public Booking(Long id, String customerName, Integer tableNumber,
Integer membersPresent, Double billamount, Date bookingTime) {
super();
this.id = id;
this.customerName = customerName;
this.tableNumber = tableNumber;
this.membersPresent = membersPresent;
this.billamount = billamount;
this.bookingTime = bookingTime;
}


public Booking() {
super();
}


public static Map<Date,Double> calculateDayBilling(List<Booking> bookings){
//fill the code
Map<Date,Double> cmap=new TreeMap<Date,Double>();
for(Booking b:bookings)
{
if(cmap.containsKey(b.getBookingTime()))
{
Double q=cmap.get(b.getBookingTime());
q=q+b.getBillamount();
cmap.put(b.getBookingTime(), q);
}
else
cmap.put(b.getBookingTime(), b.getBillamount());
}
return cmap;
}
}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
public class Main {
public static void main(String[] args) throws IOException, ParseException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
List<Booking> bookings=new ArrayList<>();
Booking b=new Booking();
System.out.println("Enter the number of booking details:");
int n=Integer.parseInt(br.readLine());
//fill the code
for(int i=0;i<n;i++)
{
String bdetail=br.readLine();
String s1[]=bdetail.split(",");
 b=new Booking(Long.parseLong(s1[0]),s1[1],Integer.parseInt(s1[2]),Integer.parseInt(s1[3]),Double.parseDouble(s1[4]),sdf.parse(s1[5]));
bookings.add(b);
}
Map <Date,Double> map=Booking.calculateDayBilling(bookings);
System.out.format("%-20s %s\n","Date","Amount");
//fill the code
for(Date d:map.keySet())
{
System.out.format("%-20s %.1f\n",sdf.format(d),map.get(d));
}
}
}

Mail Folder - Requirement 1
You work for a start-up company. The company has been using an outdated mail system. Looking at the difficulty in the old system, the management decided to build their own mail server. There are two major domains, Mail and Mail Folder. The mail details are stored in the mail domain. The mail folder is used to group the emails together.

Requirement 1:
Let’s start off by creating two Mail objects and check whether they are equal.
  
1.	Create a Mail Class with the following attributes:
Member Field Name	Type
id	Long
to	String
from	String
subject 	String
content	String
receivedDate	java.util.Date
size	Double 

  
2.	Mark all the attributes as private
3.	Create / Generate appropriate Getters & Setters
4.	Add a default constructor and a parameterized constructor to take in all attributes in the given order: Mail(Long id, String to, String from, String subject, String content, Date receivedDate,Double size)
5.	When the “mail” object is printed, it should display the following details: [Override the toString method]
Print format:
Id:"id"
To:"to"
From:"from"
Subject:"subject"
Content:"content"
Received Date:"receivedDate"
Size:"size"
6.	Two emails are considered same if they have the same to address, from address, and subject. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]

The input format consists of mail details separated by comma in the below order,
(id,to, from,subject,content,receivedDate,size)
The Input to your program would be details of two emails, you need to display their details as given in "5th point(refer above)" and compare the two emails and display if the Mails are same or different.

Note: There is an empty line between display statements. Print the empty lines in main function.
              Display one digit after the decimal point for Double datatype.

Sample INPUT & OUTPUT 1:

Enter mail 1 detail:
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0
Enter mail 2 detail:
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0

Mail 1:
Id:1001
To:meyyappan@gmail.com
From:satish@gmail.com
Subject:Master Copy
Content:Attached doc
ReceivedDate:05-05-2017
Size:10.0

Mail 2:
Id:1001
To:meyyappan@gmail.com
From:satish@gmail.com
Subject:Master Copy
Content:Attached doc
ReceivedDate:05-05-2017
Size:10.0

Mail 1 is same as Mail 2


Sample INPUT & OUTPUT 2:

Enter mail 1 detail:
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0
Enter mail 2 detail:
1002,satish@gmail.com,meyyappan@gmail.com,Master Copy,Attached doc,05-05-2017,10.0

Mail 1:
Id:1001
To:meyyappan@gmail.com
From:satish@gmail.com
Subject:Master Copy
Content:Attached doc
ReceivedDate:05-05-2017
Size:10.0

Mail 2:
Id:1002
To:satish@gmail.com
From:meyyappan@gmail.com
Subject:Master Copy
Content:Attached doc
ReceivedDate:05-05-2017
Size:10.0

Mail 1 and Mail 2 are different
  
import java.text.SimpleDateFormat;
import java.util.Date;

public class Mail {	
	//Your code goes here...
	private Long id;
	private String to,from,subject,content;
	private java.util.DatereceivedDate;
	private Double size;
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getTo() {
		return to;
	}
	public void setTo(String to) {
		this.to = to;
	}
	public String getFrom() {
		return from;
	}
	public void setFrom(String from) {
		this.from = from;
	}
	public String getSubject() {
		return subject;
	}
	public void setSubject(String subject) {
		this.subject = subject;
	}
	public String getContent() {
		return content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	public java.util.DategetReceivedDate() {
		return receivedDate;
	}
	public void setReceivedDate(java.util.DatereceivedDate) {
		this.receivedDate = receivedDate;
	}
	public Double getSize() {
		return size;
	}
	public void setSize(Double size) {
		this.size = size;
	}
	public Mail(Long id, String to, String from, String subject,
			String content, Date receivedDate, Double size) {
		super();
		this.id = id;
		this.to = to;
		this.from = from;
		this.subject = subject;
		this.content = content;
		this.receivedDate = receivedDate;
		this.size = size;
	}
	public Mail() {
		super();
	}
	
	@Override
	public inthashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((from == null) ?0 :from.hashCode());
		result = prime * result + ((subject == null) ?0 :subject.hashCode());
		result = prime * result + ((to == null) ?0 :to.hashCode());
		return result;
	}
	@Override
	public booleanequals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Mail other = (Mail) obj;
		if (from == null) {
			if (other.from != null)
				return false;
		} else if (!from.equals(other.from))
			return false;
		if (subject == null) {
			if (other.subject != null)
				return false;
		} else if (!subject.equals(other.subject))
			return false;
		if (to == null) {
			if (other.to != null)
				return false;
		} else if (!to.equals(other.to))
			return false;
		return true;
	}
	@Override
	public String toString() {
		SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
		return "Id:"+id+"\nTo:"+to+"\nFrom:"+from+"\nSubject:"+subject+"\nContent:"+content+"\nReceivedDate:"+sdf.format(receivedDate)+"\nSize:"+size;
		
	}
	
}






import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Main {
	public static void main(String []args) throws IOException, NumberFormatException, ParseException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		//Your code goes here...
		SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
		Mail m[]=new Mail[2];
		System.out.println("Enter mail 1 detail:");
		//Your code goes here...
		String m1=reader.readLine();
		String s[]=m1.split(",");
		m[0]=new Mail(Long.parseLong(s[0]),s[1],s[2],s[3],s[4],sdf.parse(s[5]),Double.parseDouble(s[6]));
		System.out.println("Enter mail 2 detail:");
		//Your code goes here...
		String m2=reader.readLine();
		String a[]=m2.split(",");
		m[1]=new Mail(Long.parseLong(a[0]),a[1],a[2],a[3],a[4],sdf.parse(a[5]),Double.parseDouble(a[6]));
		
		for(inti=0;i<2;i++)
		{
			System.out.println("Mail "+(i+1)+":");
			System.out.println(m[i]);
		}
		
		if(m[0].equals(m[1]))
		{
			System.out.println("Mail 1 is same as Mail 2");
		}
		else
			System.out.println("Mail 1 and Mail 2 are different");
		
	}
}
Page of 
Mail Folder - Requirement 2

Requirement 2:
Now we are gonna start creating a folder and add mail to it. Start with creating a folder and use menu-driven approach to add, remove, display details of the mail in the folder.

a)Create a Class Mail with the following attributes:
Member Field Name	Type
id	Long
from	String
to	String
subject	String
content	String
receivedDate	java.util.Date
size	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:  public Mail(Long id, String from, String to, String subject, String content, Date receivedDate, Double size)

b)Create a Class MailFolder with the following attributes:
Member Field Name	Type
name	String
mailList	ArrayList<Mail>

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: MailFolder(String name, List<Mail>mailList). In constructor pass the mailList value as an empty list. Only one folder will be present at a time.

c) Create the following static method in Mail class,
Method Name	Description
public static Mail createMail(String detail)	This method accepts a string which contains mail details separated by commas. Split the details and create a mail object from the details and return it.
The mail details should be given as a comma-separated value in the below order,
id,from,to, subject, content, receivedDate, size

d) Create the following methods in MailFolder class,
Method Name	Description
public void addMailToFolder(Mail mail)	This method accepts a mail object and add the mail to the mail list of the current mail folder.
public Boolean removeMailFromFolder(Long id)	This method will get the id of the mail and delete the mail with the specified id from the current folder.
If a mail with the given id found, delete the mail and return true. If a mail with the id is not found return false.
public void displayMails() 	This method will display the mail list in the current folder.
If the mail list is empty display "No mails to show", else
display "Mails in [folder name]" and display all the mail details in the specified format. Where [folder name] specifies the name of the folder.

After deletion, if true is returned print "Mail successfully deleted", else print "Mail not found in the folder". After adding mail to the folder, print "Mail successfully added".

Note: The above print statements should be present in the main method.

When the “mail” object is printed, it should display the following format
Print format:
String.format("%-10s%-15s%-15s%-15s%-20s%-15s%-10s\n", "Id","From","To","Subject","Content","ReceivedDate","Size"); Display 1 digit after decimal point in Double.

Sample Input and Output:

Enter the name of the folder:
Inbox
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
3
No mails to show
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
1
Enter the details of mail in CSV format:
12,john@abc.in,jane@abc.in,Hi,Happy New Year,01-01-2018,10
Mail successfully added
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
1
Enter the details of mail in CSV format:
16,jack@abc.in,jane@abc.in,Hi,Happy Pongal,14-01-2018,15
Mail successfully added
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
3
Mails in Inbox
Id        From           To             Subject        Content             Received Date  Size      
12        john@abc.in    jane@abc.in    Hi             Happy New Year      01-01-2018     10.0      
16        jack@abc.in    jane@abc.in    Hi             Happy Pongal        14-01-2018     15.0      
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
2
Enter the id of the mail to be deleted:
13
Mail not found in the folder
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
2
Enter the id of the mail to be deleted:
16
Mail successfully deleted
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
3
Mails in Inbox
Id        From           To             Subject        Content             Received Date  Size      
12        john@abc.in    jane@abc.in    Hi             Happy New Year      01-01-2018     10.0      
1.Add Mail
2.Delete Mail
3.Display Mails
4.Exit
Enter your choice:
4




import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;

public class Main {
public static void main(String args[]) throws NumberFormatException, IOException, ParseException {
BufferedReaderbr=new BufferedReader(new InputStreamReader(System.in));
System.out.println("Enter the name of the folder:");
MailFolder mf=new MailFolder(br.readLine(),new ArrayList<Mail>());
Integer choice=0;
do
{
System.out.println("1.Add Mail\n2.Delete Mail\n3.Display Mails\n4.Exit\nEnter your choice:");
choice=Integer.parseInt(br.readLine());
if(choice==1) {
System.out.println("Enter the details of mail in CSV format:");
String detail=br.readLine();
Mail m=Mail.createMail(detail);
mf.addMailToFolder(m);
System.out.println("Mail successfully added");
}
else if(choice==2) {
System.out.println("Enter the id of the mail to be deleted:");
Long id=Long.parseLong(br.readLine());
if(mf.removeMailFromFolder(id))
{
System.out.println("Mail successfully deleted");
}
else
{
System.out.println("Mail not found in the folder");
}
}
else if(choice==3) {
mf.displayMails();
}
else if(choice==4)
{
System.exit(0);
}
         }while(choice>0&&choice<4);
}

}
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;


public class Mail {
Long id;
String to;
String from;
String subject;
String content;
Date receivedDate;

Double size;

public Long getId() {
return id;
}

public void setId(Long id) {
this.id = id;
}

public String getTo() {
return to;
}

public void setTo(String to) {
this.to = to;
}

public String getFrom() {
return from;
}

public void setFrom(String from) {
this.from = from;
}

public String getSubject() {
return subject;
}

public void setSubject(String subject) {
this.subject = subject;
}

public String getContent() {
return content;
}

public void setContent(String content) {
this.content = content;
}

public Date getReceivedDate() {
return receivedDate;
}

public void setReceivedDate(Date receivedDate) {
this.receivedDate = receivedDate;
}

public Double getSize() {
return size;
}

public void setSize(Double size) {
this.size = size;
}
public Mail(){}
public Mail(Long id, String to, String from, String subject,
String content, Date receivedDate, Double size) {
super();
this.id = id;
this.to = to;
this.from = from;
this.subject = subject;
this.content = content;
this.receivedDate = receivedDate;
this.size = size;
}

public static Mail createMail(String detail) throws NumberFormatException, ParseException
{
SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
String a[]=detail.split(",");
Mail m=new Mail(Long.parseLong(a[0]),a[1],a[2],a[3],a[4],sdf.parse(a[5]),Double.parseDouble(a[6]));
return m;
} 
@Override
public String toString() {
SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
return String.format("%-10s%-15s%-15s%-15s%-20s%-15s%-10s\n",id,to,from,subject,
 content,sdf.format(receivedDate),size);
}
}
import java.util.ArrayList;


public class MailFolder 
{
String name;
ArrayList<Mail>mailList;
public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public ArrayList<Mail>getMailList() {
return mailList;
}

public void setMailList(ArrayList<Mail>mailList) {
this.mailList = mailList;
}
public MailFolder(){}
public MailFolder(String name, ArrayList<Mail>mailList) {
super();
this.name = name;
this.mailList = mailList;
}

public void addMailToFolder(Mail mail)
{
mailList.add(mail);
}
public Boolean removeMailFromFolder(Long id)
{
boolean flag=false;
for(inti=0;i<mailList.size();i++)
{
if(mailList.get(i).getId().equals(id))
{
mailList.remove(i);
flag=true;
}
}
return flag;
}
public void displayMails() 
{
if(mailList.size()==0)
{
System.out.println("No mails to show");
}
else
{
System.out.println("Mails in "+name);
System.out.printf("%-10s%-15s%-15s%-15s%-20s%-15s%-10s\n", "Id","From","To","Subject","Content","ReceivedDate","Size");
for(Mail m:mailList)
{
System.out.print(m);
}
}
}
}


Page of 
Mail Folder - Requirement 3
Requirement 3:
   In this requirement, you need to validate the email id. Also, you need to find whether the email is spam or not.

a)Create a Class Main with the following static methods:
Method Name	Description
static Boolean validateEmailId(String email)	Validate the email id based on the rules given below. Returns true if email id is valid else return false
static Boolean validateSpam(String email)	Checks for the spam domain name in the given email id. Returns true if the mail is spam else returns false

b) While validating email id follow the below rules. The format of the email id is given below
 
            username@domain.TLD

where, TLD - Top Level Domain

1. The email id should start only with alphabets(either uppercase or lowercase).
2. The email username can contain alphabets(either uppercase or lowercase), numbers and the special characters (  .   and   _    ).
3. The email username should not contain any special characters other than" . " and " _ ".
4. After the username special character @ should present.
5. The email domain should contain only alphabets(either uppercase or lowercase).
6. After email domain, a value dot ( . ) should present.
7. The email Top Level Domain should contain only alphabets(both uppercase and lowercase) and it should have only 2 to 6 characters.

Example: alpha_Beta.01@google.com is a valid email id.
Since the username contain only alphabets, numbers and a special character ( _ and . ), then the @ symbol is present. The domain name should contain only alphabets and the symbol dot( . ) and the Top Level Domain have only 3 characters.

c) While checking for spam follow the below rules,

If the domain name of the email id is one of the following then it is spam email id.
             {advancedpdfconverter, passwordmaster, smartfixer, downloadavideo }

Note: Print "Email is valid" if email is valid else print "Email is invalid". Print "Email is spam" if email is spam else print "Email is not spam".
            All the above print statements are present in the main method.

Menu:
1.Validate Email
2.Check for Spam

Sample Input and Output 1:

1.Validate Email
2.Check for Spam
Enter your choice:
1
Enter the email to be validated:
alpha_Beta.02@mail.com
Email is valid

Sample Input and Output 2:

1.Validate Email
2.Check for Spam
Enter your choice:
1
Enter the email to be validated:
0alpf&sk@mail.in
Email is invalid

Sample Input and Output 3:

1.Validate Email
2.Check for Spam
Enter your choice:
2
Enter the email to be validated:
jane@abc.in
Email is not spam

Sample Input and Output 4:

1.Validate Email
2.Check for Spam
Enter your choice:
2
Enter the email to be validated:
jack@passwordmaster.com
Email is spam

  
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	
	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReaderbr=new BufferedReader(new InputStreamReader(System.in));
		
		System.out.println("1.Validate Email\n2.Check for Spam\nEnter your choice:");
		Integer choice=Integer.parseInt(br.readLine());
		if(choice==1) {
			System.out.println("Enter the email to be validated:");
			
			//write your code here
			String email=br.readLine();
			if(validateEmailId(email))
			{
				System.out.println("Email is valid");
			}
			else
				System.out.println("Email is invalid");
			
		}
		if(choice==2) {
			System.out.println("Enter the email to be validated:");
			
			//write your code here
			String email=br.readLine();
			if(validateSpam(email))
			{
				System.out.println("Email is spam");
			}
			else
				System.out.println("Email is not spam");
		}
	}
	
	public static Boolean validateEmailId(String email) {
		
		//write your code here
		
		if(!(Character.isAlphabetic(email.charAt(0))))
		{
			return false;
			
			
		}
		String s1[]=email.split("@");
		String username=s1[0];
		for(inti=0;i<username.length();i++)
		{
			if(!(Character.isAlphabetic(username.charAt(i))||username.contains(".")||username.contains("_")))
			{
				return false;
				
			}
			
		}
		if(s1.length==1)
		{
			return false;
		}
		String s2[]=s1[1].split("\\.");
		String domain=s2[0];
		for(inti=0;i<domain.length();i++)
		{
			if(!(Character.isAlphabetic(domain.charAt(i))))
			{
				return false;
			}
		}
		if(s2.length==1)
		{
			return false;
		}
		String tld=s2[1];
		for(inti=0;i<tld.length();i++)
		{
			if(!(Character.isAlphabetic(tld.charAt(i))&&tld.length()>=2&&tld.length()<=6))
			{
				return false;
			}
		}
		return true;
		
	}
	
	public static Boolean validateSpam(String email) {
		
		//write your code here
		String s1[]=email.split("@");
		String s2[]=s1[1].split("\\.");
		String domain=s2[0];
		if(!(domain.equals("advancedpdfconverter")||domain.equals("passwordmaster")||domain.equals("smartfixer")||domain.equals("downloadavideo")))
		{
			return false;
		}
		return true;
		
	}
}
Page of 
Mail Folder - Requirement 4
Requirement 4:
In this requirement develop a feature in which you can search a List of Mails by to address, receivedDate and size.

a) Create a Class Mail with the following attributes:
  
Member Field Name	Type
id 	Long 
to 	String 
from 	String 
subject 	String 
content 	String 
receivedDate	java.util.Date
size 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Mail(Long id, String to, String from, String subject, String content,DatereceivedDate,Double size)

b) Create a class MailBOwith the following methods,
  
Method Name	Description
public List<Mail>findMail(List<Mail>mailList,String to) 	This method accepts a list of mails and to address as arguments and returns a list of mails that matches with given to address. 
public List<Mail>findMail(List<Mail>mailList,DatereceivedDate) 	This method accepts a list of mails and received date as arguments and returns a list of mails that were received on the given specified date. 
public List<Mail>findMail(List<Mail>mailList,Double size) 	This method accepts a list of mails and size as arguments, then find all the mails with the given size from the mail list and return the list of mails with the specified size. 

The mail details should be given as a comma-separated value in the below order,
id,to,from, subject, content, receivedDate,size

When the “mail” object is printed, it should display the following details
Print format:
System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", "Id","To","From","Subject","Content","ReceivedDate","Size");

Note: The mail lists are displayed in the main method.
              If any other choice is selected, display "Invalid Choice"
              Display one digit after the decimal point for Double Datatype.

Sample Input and Output 1:

Enter the number of Mails:
4
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0
1010,morsh@gmail.com,meyyappan@hotmail.com,TaskList,Attached doc,25-01-2018,15.1
1016,sami@rediff.com,morsh@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
1020,praveens@yahoo.com,roshan@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
Enter a search type:
1.By To Address
2.By Received Date
3.By Size
1
Enter the To Address:
praveens@yahoo.com
Id 	To 	From 	Subject 	   Content 	  Received Date 	Size 
1020 	praveens@yahoo.com 	roshan@gmail.com 	Remiander Mail 	  Today's schedule 	24-01-2018 	5.4 

Sample Input and Output 2:

Enter the number of Mails:
4
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0
1010,morsh@gmail.com,meyyappan@hotmail.com,TaskList,Attached doc,25-01-2018,15.1
1016,sami@rediff.com,morsh@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
1020,praveens@yahoo.com,roshan@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
Enter a search type:
1.By To Address
2.By Received Date
3.By Size
2
Enter the Received Date:
24-01-2018
Id 	To 	From 	Subject 	Content 	  Received Date 	Size 
1016 	sami@rediff.com 	morsh@gmail.com 	Remainder Mail 	  Today's schedule 	24-01-2018 	5.4 
1020 	praveens@yahoo.com 	roshan@gmail.com 	Remainder Mail 	  Today's schedule 	24-01-2018 	5.4 

Sample Input and Output 3:

Enter the number of Mails:
4
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0
1010,morsh@gmail.com,meyyappan@hotmail.com,TaskList,Attached doc,25-01-2018,15.1
1016,sami@rediff.com,morsh@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
1020,praveens@yahoo.com,roshan@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
Enter a search type:
1.By To Address
2.By Received Date
3.By Size
3
Enter the Size:
5.4
Id 	To 	From 	Subject 	  Content 	  Received Date 	Size 
1016 	sami@rediff.com 	morsh@gmail.com 	Remainder Mail 	Today's schedule 	24-01-2018 	5.4 
1020 	praveens@yahoo.com 	roshan@gmail.com 	Remainder Mail 	Today's schedule 	24-01-2018 	5.4 


Sample Input and Output 4:

Enter the number of Mails:
4
1001,meyyappan@gmail.com,satish@gmail.com,Master Copy,Attached doc,05-05-2017,10.0
1010,morsh@gmail.com,meyyappan@hotmail.com,TaskList,Attached doc,25-01-2018,15.1
1016,sami@rediff.com,morsh@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
1020,praveens@yahoo.com,roshan@gmail.com,Remainder Mail,Today'schedule,24-01-2018,5.4
Enter a search type:
1.By To Address
2.By Received Date
3.By Size
4
Invalid choice 


importjava.util.Date;

publicclass Mail {
	//Your code goes here...
	private Long id;
	private String to;
	private String from;
	private String subject;
	private String content;
	privatejava.util.DatereceivedDate;
	private Double size;
	public Long getId() {
		returnid;
	}
	publicvoidsetId(Long id) {
		this.id = id;
	}
	public String getTo() {
		returnto;
	}
	publicvoidsetTo(String to) {
		this.to = to;
	}
	public String getFrom() {
		returnfrom;
	}
	publicvoidsetFrom(String from) {
		this.from = from;
	}
	public String getSubject() {
		returnsubject;
	}
	publicvoidsetSubject(String subject) {
		this.subject = subject;
	}
	public String getContent() {
		returncontent;
	}
	publicvoidsetContent(String content) {
		this.content = content;
	}
	publicjava.util.DategetReceivedDate() {
		returnreceivedDate;
	}
	publicvoidsetReceivedDate(java.util.DatereceivedDate) {
		this.receivedDate = receivedDate;
	}
	public Double getSize() {
		returnsize;
	}
	publicvoidsetSize(Double size) {
		this.size = size;
	}
	publicMail(Long id, String to, String from, String subject,
			String content, Date receivedDate, Double size) {
		super();
		this.id = id;
		this.to = to;
		this.from = from;
		this.subject = subject;
		this.content = content;
		this.receivedDate = receivedDate;
		this.size = size;
	}
	publicMail() {
		super();
	}
	
}


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class MailBO {
    public List<Mail>findMail(List<Mail>mailList,String to){
	//Your code goes here...
	List<Mail>l1=new ArrayList<>();
	for(Mail m1:mailList)
	{
		if(m1.getTo().equals(to))
			l1.add(m1);
	}
	return l1;
	
	}
	public List<Mail>findMail(List<Mail>mailList,DatereceivedDate){
		//Your code goes here...
		List<Mail>l2=new ArrayList<>();
		for(Mail m2:mailList)
		{
			if(m2.getReceivedDate().equals(receivedDate))
			{
				l2.add(m2);
			}
		}
		return l2;
	}
	public List<Mail>findMail(List<Mail>mailList,Double size){
		//Your code goes here...
		List<Mail>l3=new ArrayList<>();
		for(Mail m3:mailList)
		{
			if(m3.getSize().equals(size))
			{
				l3.add(m3);
			}
		}
		return l3;
	}
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Main {
    public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
		BufferedReaderbr=new BufferedReader(new InputStreamReader(System.in));
		//Your code goes here...
		SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
		Mail m=new Mail();
		MailBOmo=new MailBO();
		List<Mail>mailList=new ArrayList<>();
		System.out.println("Enter the number of Mails:");
		//Your code goes here...
		int n=Integer.parseInt(br.readLine());
		for(inti=0;i<n;i++)
		{
			String s=br.readLine();
			String s1[]=s.split(",");
			m=new Mail(Long.parseLong(s1[0]),s1[1],s1[2],s1[3],s1[4],sdf.parse(s1[5]),Double.parseDouble(s1[6]));
			mailList.add(m);
		}
		System.out.println("Enter a search type:\n1.By To Address\n2.By Received Date\n3.By Size");
		//Your code goes here...
		int choice=Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:
			System.out.println("Enter the To Address:");
			String add=br.readLine();
			List<Mail> l1=mo.findMail(mailList, add);
			System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", "Id","To","From","Subject","Content","ReceivedDate","Size"); 
			for(Mail m1:l1)
			{
				System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", m1.getId(),m1.getTo(),m1.getFrom(),m1.getSubject(),m1.getContent(),sdf.format(m1.getReceivedDate()),m1.getSize());
			}
			break;
		case 2:
			System.out.println("Enter the Received Date:");
			String date=br.readLine();
			Date da=sdf.parse(date);
			List<Mail>l2=mo.findMail(mailList, da);
			System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", "Id","To","From","Subject","Content","ReceivedDate","Size"); 
			for(Mail m2:l2)
			{
				System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", m2.getId(),m2.getTo(),m2.getFrom(),m2.getSubject(),m2.getContent(),sdf.format(m2.getReceivedDate()),m2.getSize());
			}
			break;
		case 3:
			System.out.println("Enter the Size:");
			Double siz=Double.parseDouble(br.readLine());
			List<Mail>l3=mo.findMail(mailList, siz);
			System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", "Id","To","From","Subject","Content","ReceivedDate","Size"); 
			for(Mail m3:l3)
			{
				System.out.format("%-10s %-20s %-25s %-20s %-20s %-15s %s\n", m3.getId(),m3.getTo(),m3.getFrom(),m3.getSubject(),m3.getContent(),sdf.format(m3.getReceivedDate()),m3.getSize());
			}
			break;
			default:
				System.out.println("Invalid choice");
				break;
		}
	}
}
Page of 
Mail Folder - Requirement 5
Requirement 5:

In this requirement, you need to sort the list of mails based on from address, receivedDate or size.

a) Create a Class Mail with the following attributes:
Member Field Name	Type
id	Long
from	String
to	String
subject	String
content	String
receivedDate	java.util.Date
size	Double

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Mail(Long id, String from, String to, String subject, String content, Date receivedDate, Double size)

b) Create the following static methods in the Mail class,
Method Name	Description
static Mail createMail(String detail)	This method accepts a String. The mail detail separated by commas is passed as the argument. Split the details and create a mail object and returns it.
The mail details should be given as a comma-separated value in the below order,
id,from,to,subject,content,receivedDate,size

c) The Mail class should implement the Comparable interface which sorts the Mail list based on from address. While comparing, all the from address in the list are unique.

d) Create a class DateComparator which implements Comparator interface and sort the Mail list based on receivedDate. While comparing, all the receivedDate attributes in the list are unique.

e) Create a class SizeComparator which implements Comparator interface and sort the Mail list based on the size. While comparing, all the size attributes in the list are unique.

Get the number of Mail and mail details and create a mail list. Sort the mail according to the given option and display the list.

When the “mail” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", "Id","From","To","Subject","Content","Receiveddate","Size");
Display one digit after decimal point for Double datatype.

Sample Input and Output 1:

Enter the number of mails:
4
1,raj@abc.in,bala@abc.in,Freshers' list,PFA the Freshers db,05-01-2018,256
2,amir@abc.in,chris@abc.in,M.O.M,PFA the M.O.M,29-01-2018,678
3,abdul@abc.in,antony@abc.in,project requirement,PFA the requirements,20-01-2018,1658
4,karim@abc.in,krishna@abc.in,Accounts,PFA the accounts,27-01-2018,2048
Enter a type to sort:
1.Sort by from address
2.Sort by date received
3.Sort by size
1
Id       From                      To                               Subject                              Content                                  Received date     Size
3        abdul@abc.in    antony@abc.in   project requirement    PFA the requirements    20-01-2018            1658.0
2        amir@abc.in       chris@abc.in        M.O.M                                 PFA the M.O.M                   29-01-2018            678.0
4        karim@abc.in     krishna@abc.in  Accounts                          PFA the accounts             27-01-2018            2048.0
1        raj@abc.in            bala@abc.in       Freshers' list                    PFA the Freshersdb       05-01-2018            256.0

Sample Input and Output 2:

Enter the number of mails:
4
1,raj@abc.in,bala@abc.in,Freshers' list,PFA the Freshers db,05-01-2018,256
2,amir@abc.in,chris@abc.in,M.O.M,PFA the M.O.M,29-01-2018,678
3,abdul@abc.in,antony@abc.in,project requirement,PFA the requirements,20-01-2018,1658
4,karim@abc.in,krishna@abc.in,Accounts,PFA the accounts,27-01-2018,2048
Enter a type to sort:
1.Sort by from address
2.Sort by date received
3.Sort by size
2
Id       From                      To                               Subject                              Content                                  Received date     Size
1        raj@abc.in            bala@abc.in       Freshers' list                    PFA the Freshersdb       05-01-2018            256.0
3        abdul@abc.in    antony@abc.in   project requirement    PFA the requirements    20-01-2018            1658.0
4        karim@abc.in     krishna@abc.in  Accounts                          PFA the accounts             27-01-2018            2048.0
2        amir@abc.in       chris@abc.in        M.O.M                                 PFA the M.O.M                   29-01-2018            678.0

Sample Input and Output 3:

Enter the number of mails:
4
1,raj@abc.in,bala@abc.in,Freshers' list,PFA the Freshers db,05-01-2018,256
2,amir@abc.in,chris@abc.in,M.O.M,PFA the M.O.M,29-01-2018,678
3,abdul@abc.in,antony@abc.in,project requirement,PFA the requirements,20-01-2018,1658
4,karim@abc.in,krishna@abc.in,Accounts,PFA the accounts,27-01-2018,248
Enter a type to sort:
1.Sort by from address
2.Sort by date received
3.Sort by size
3
Id       From                      To                               Subject                              Content                                  Received date     Size
4        karim@abc.in     krishna@abc.in  Accounts                          PFA the accounts             27-01-2018            248.0
1        raj@abc.in            bala@abc.in       Freshers' list                    PFA the Freshersdb       05-01-2018            256.0
2        amir@abc.in       chris@abc.in        M.O.M                                 PFA the M.O.M                   29-01-2018            678.0
3        abdul@abc.in    antony@abc.in   project requirement    PFA the requirements    20-01-2018            1658.0

importjava.util.Comparator;



publicclassDateComparatorimplements Comparator<Mail>{

	@Override
	publicintcompare(Mail d1, Mail d2) {
		// TODO Auto-generated method stub
		returnd1.getReceivedDate().compareTo(d2.getReceivedDate());
	}

//Your code here
		
}



import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;



public class Mail implements Comparable<Mail>{
    //Your code here
	private Long id;
	private String from;
	private String to;
	private String subject;
	private String content;
	private java.util.DatereceivedDate;
	private Double size;
	

	public Long getId() {
		return id;
	}


	public void setId(Long id) {
		this.id = id;
	}


	public String getFrom() {
		return from;
	}


	public void setFrom(String from) {
		this.from = from;
	}


	public String getTo() {
		return to;
	}


	public void setTo(String to) {
		this.to = to;
	}


	public String getSubject() {
		return subject;
	}


	public void setSubject(String subject) {
		this.subject = subject;
	}


	public String getContent() {
		return content;
	}


	public void setContent(String content) {
		this.content = content;
	}


	public java.util.DategetReceivedDate() {
		return receivedDate;
	}


	public void setReceivedDate(java.util.DatereceivedDate) {
		this.receivedDate = receivedDate;
	}


	public Double getSize() {
		return size;
	}


	public void setSize(Double size) {
		this.size = size;
	}


	public Mail(Long id, String from, String to, String subject,
			String content, Date receivedDate, Double size) {
		super();
		this.id = id;
		this.from = from;
		this.to = to;
		this.subject = subject;
		this.content = content;
		this.receivedDate = receivedDate;
		this.size = size;
	}


	public Mail() {
		super();
	}


	public static Mail createMail(String detail) throws NumberFormatException, ParseException{
		//Your code here
		SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
		String s[]=detail.split(",");
		Mail m=new Mail(Long.parseLong(s[0]),s[1],s[2],s[3],s[4],sdf.parse(s[5]),Double.parseDouble(s[6]));
		return m;
	}


	@Override
	public intcompareTo(Mail m1) {
		// TODO Auto-generated method stub
		return this.from.compareTo(m1.getFrom());
	}
}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
	BufferedReaderbr = new BufferedReader(new InputStreamReader(System.in));
	//Your code here
	List<Mail>list=new ArrayList<>();
	SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
	//Mail m=new Mail();
	System.out.println("Enter the number of mails:");
		//Your code here
	int n=Integer.parseInt(br.readLine());
	for(inti=0;i<n;i++)
	{
		String detail=br.readLine();
		list.add(Mail.createMail(detail));
		
	}
		System.out.println("Enter a type to sort:\n1.Sort by from address\n2.Sort by date received\n3.Sort by size");
		//Your code here
		
		int choice=Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:
			Collections.sort(list);
			System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", "Id","From","To","Subject","Content","Receiveddate","Size");
			for(Mail m1:list)
			{
				System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", m1.getId(),m1.getFrom(),m1.getTo(),m1.getSubject(),m1.getContent(),sdf.format(m1.getReceivedDate()),m1.getSize());
			}
			break;
		case 2:
			Collections.sort(list,newDateComparator());
			System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", "Id","From","To","Subject","Content","Receiveddate","Size");
			for(Mail m2:list)
			{
				System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", m2.getId(),m2.getFrom(),m2.getTo(),m2.getSubject(),m2.getContent(),sdf.format(m2.getReceivedDate()),m2.getSize());
			}
			break;
			
		case 3:
			Collections.sort(list,newSizeComparator());
			System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", "Id","From","To","Subject","Content","Receiveddate","Size");
			for(Mail m3:list)
			{
				System.out.format("%-15s %-15s %-15s %-20s %-20s %-15s %s\n", m3.getId(),m3.getFrom(),m3.getTo(),m3.getSubject(),m3.getContent(),sdf.format(m3.getReceivedDate()),m3.getSize());
			}
			break;
		}
	}
}


importjava.util.Comparator;



publicclassSizeComparatorimplements Comparator<Mail>{

	@Override
	publicintcompare(Mail s1, Mail s2) {
		// TODO Auto-generated method stub
		if(s1.getSize()>s2.getSize())
		return 1;
		elseif(s1.getSize()<s2.getSize())
			return -1;
		else
			return 0;
	}

//Your code here
		
}
Page of 
Mail Folder - Requirement 6

Requirement 6:

In this requirement, given a list of mails you need to find the number of mails received each day using Map.

a) Create a Class Mail with the following attributes:
Member Field Name	Type
id 	String 
from 	String 
to 	String 
subject 	String 
content 	String 
receivedDate	java.util.Date
size 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters. Add a default constructor and a parameterized constructor to take in all attributes in the given order: Mail(Long id, String from, String to, String subject, String content, Date receivedDate, Double size)

b) Create the following static methods in the Mail class,
Method Name	Description
static Map<Date,Integer>calculateDateCount(List<Mail> list) 	This method accepts a list of Mail as arguments and returns a TreeMap with the receivedDate as key and number of mails received on that date as value and returns the map. 
In the TreeMap have the receivedDate as key and Count the number of mails received on the date and keep the number of mails as value. Print the value sorted by Date.

The mail details should be given as a comma separated value in the below order,
id,from,to,subject,content,receivedDate,size

Print format:
System.out.format("%-15s %s\n","Date","Count");

Sample Input and Output 1:

Enter the number of mails:
5
218,krish@abc.com,ram@abc.com,Freshers' list,PFA the Freshers db,05-10-2016,1256
569,ani@abc.com,gautham@abc.com,M.O.M,PFA the M.O.M,05-10-2016,1896
538,ram12@abc.com,ravi@abc.com,project requirement,PFA the requirements,20-11-2011,1058
102,ganesh@abc.com,chris@abc.com,Accounts,PFA the accounts,20-11-2011,48
997,sam@abc.com,rahim@abc.com,Appraisal,PFA appraisal db,27-01-2007,2148
Date                      Count
27-01-2007      1
20-11-2011      2
05-10-2016      2


import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;



public class Mail{
    //Your code here
	private Long id;
	private String from,to,subject,content;
	private java.util.DatereceivedDate;
	private Double size;
	
	
	

	public Long getId() {
		return id;
	}




	public void setId(Long id) {
		this.id = id;
	}




	public String getFrom() {
		return from;
	}




	public void setFrom(String from) {
		this.from = from;
	}




	public String getTo() {
		return to;
	}




	public void setTo(String to) {
		this.to = to;
	}




	public String getSubject() {
		return subject;
	}




	public void setSubject(String subject) {
		this.subject = subject;
	}




	public String getContent() {
		return content;
	}




	public void setContent(String content) {
		this.content = content;
	}




	public java.util.DategetReceivedDate() {
		return receivedDate;
	}




	public void setReceivedDate(java.util.DatereceivedDate) {
		this.receivedDate = receivedDate;
	}




	public Double getSize() {
		return size;
	}




	public void setSize(Double size) {
		this.size = size;
	}




	public Mail(Long id, String from, String to, String subject,
			String content, Date receivedDate, Double size) {
		super();
		this.id = id;
		this.from = from;
		this.to = to;
		this.subject = subject;
		this.content = content;
		this.receivedDate = receivedDate;
		this.size = size;
	}




	public Mail() {
		super();
	}




	public static Map<Date,Integer>calculateDateCount(List<Mail> list){
		//Your code here
		Map<Date,Integer>cmap=new TreeMap<>();
		int q=1;
		for(Mail m:list)
		{
			if(cmap.containsKey(m.getReceivedDate()))
			{
				q=cmap.get(m.getReceivedDate());
				q++;
				cmap.put(m.getReceivedDate(),q);
			}
			else
				cmap.put(m.getReceivedDate(), 1);
		}
		return cmap;
		
		
	}
}



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException{
		BufferedReaderbr=new BufferedReader(new InputStreamReader(System.in));	
		//Your code here
		List<Mail>list=new ArrayList<>();
		Mail m=new Mail();
		SimpleDateFormatsdf=new SimpleDateFormat("dd-MM-yyyy");
		System.out.println("Enter the number of mails:");
		//Your code here
		int n=Integer.parseInt(br.readLine());
		for(inti=0;i<n;i++)
		{
			String s=br.readLine();
			String s1[]=s.split(",");
			m=new Mail(Long.parseLong(s1[0]),s1[1],s1[2],s1[3],s1[4],sdf.parse(s1[5]),Double.parseDouble(s1[6]));
			list.add(m);
		}
		
		
		Map<Date,Integer>map=Mail.calculateDateCount(list);
		System.out.format("%-15s %s\n","Date","Count"); 
		for(Date j:map.keySet())
		{
			System.out.format("%-15s %d\n",sdf.format(j),map.get(j)); 
		}
		
	}
}
Page of 
Team - Requirement 1 
It's the month of January of a New Year, and its time for IPL auction. Watching the auction taking place you find it difficult to keep track of the players each team has picked. Being a techie you decide to create a small application which would help people to keep track of the players and team details. There are two major domains Player and Team

Requirement 1: 
Let’s start off by creating two Player objects and check whether they are equal.
  
1.	Create a Player Class with the following attributes: 
Member Field Name 	Type 
name 	String 
dateOfBirth 	java.util.Date 
skill 	String 
numberOfMatches 	Integer 
runs 	Integer 
wickets 	Integer 
nationality 	String 
powerRating 	Double 

  
2.	Mark all the attributes as private 
3.	Create / Generate appropriate Getters & Setters 
4.	Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Player(String name , Date dateOfBirth , String skill , Integer numberOfMatches , Integer runs , Integer wickets , String nationality , Double powerRating) 
5.	When the “player” object is printed, it should display the following details: [Override the toString method]
Print format:
Name:"name"
Date of Birth:"dateOfBirth"
Skill:"skill"
Number of Matches:"numberOfMatches"
Runs:"runs"
Wickets:"wickets"
Nationality:"nationality"
PowerRating:"powerRating" 
6.	Two players are considered same if they have the same name, skill, and nationality. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]

The input format consists of mail details separated by comma in the below order,
(name,dateOfBirth,skill,numberOfMatches,runs,wickets,nationality,powerRating) 
The Input to your program would be details of two players, you need to display their details as given in "5th point(refer above)" and compare the two players and display if the Players are same or different.

Note: There is an empty line between display statements. Print the empty lines in the main function.
              Display one digit after the decimal point for Double datatype.

Sample INPUT & OUTPUT 1:

Enter player 1 detail:
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9
Enter player 2 detail:
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9

Player 1:
Name:MSD
Date of Birth:07-07-1981
Skill:WK&BAT
Number of Matches:300
Runs:10000
Wickets:2
Nationality:Indian
Power Rating:4.9

Player 2:
Name:MSD
Date of Birth:07-07-1981
Skill:WK&BAT
Number of Matches:300
Runs:10000
Wickets:2
Nationality:Indian
Power Rating:4.9

Player 1 is same as Player 2

Sample INPUT & OUTPUT 2:

Enter player 1 detail:
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9
Enter player 2 detail:
ABD,17-02-1984,WK&BAT,300,10000,3,South African,4.9

Player 1:
Name:MSD
Date of Birth:07-07-1981
Skill:WK&BAT
Number of Matches:300
Runs:10000
Wickets:2
Nationality:Indian
Power Rating:4.9

Player 2:
Name:ABD
Date of Birth:17-02-1984
Skill:WK&BAT
Number of Matches:300
Runs:10000
Wickets:3
Nationality:South African
Power Rating:4.9

Player 1 and Player 2 are different 



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Main {
	public static void main(String []args) throws IOException, NumberFormatException, ParseException{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		//Your code goes here...
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		Player p[]=new Player[2];
		
		System.out.println("Enter player 1 detail:");
		//Your code goes here...		
		String s=reader.readLine();
		String s1[]=s.split(",");
		p[0]=new Player(s1[0],sdf.parse(s1[1]),s1[2],Integer.parseInt(s1[3]),Integer.parseInt(s1[4]),Integer.parseInt(s1[5]),s1[6],Double.parseDouble(s1[7]));
		System.out.println("Enter player 2 detail:");
		//Your code goes here...
		String p1=reader.readLine();
		String s2[]=p1.split(",");
		p[1]=new Player(s2[0],sdf.parse(s2[1]),s2[2],Integer.parseInt(s2[3]),Integer.parseInt(s2[4]),Integer.parseInt(s2[5]),s2[6],Double.parseDouble(s2[7]));
		
		for(int i=0;i<2;i++)
		{
			System.out.println("Player "+(i+1)+":");
			System.out.println(p[i]);
		}
		
		if(p[0].equals(p[1]))
		{
			System.out.println("Player 1 is same as Player 2 ");
		}
		else
			System.out.println("Player 1 and Player 2 are different");
	}
}



import java.text.SimpleDateFormat;
import java.util.Date;

public class Player {
	//your code goes here...
	private String name;
	private java.util.Date dateOfBirth;
	private String skill;
	private Integer numberOfMatches;
	private Integer runs;
	private Integer wickets;
	private String nationality;
	private Double powerRating;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public java.util.Date getDateOfBirth() {
		return dateOfBirth;
	}
	public void setDateOfBirth(java.util.Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}
	public String getSkill() {
		return skill;
	}
	public void setSkill(String skill) {
		this.skill = skill;
	}
	public Integer getNumberOfMatches() {
		return numberOfMatches;
	}
	public void setNumberOfMatches(Integer numberOfMatches) {
		this.numberOfMatches = numberOfMatches;
	}
	public Integer getRuns() {
		return runs;
	}
	public void setRuns(Integer runs) {
		this.runs = runs;
	}
	public Integer getWickets() {
		return wickets;
	}
	public void setWickets(Integer wickets) {
		this.wickets = wickets;
	}
	public String getNationality() {
		return nationality;
	}
	public void setNationality(String nationality) {
		this.nationality = nationality;
	}
	public Double getPowerRating() {
		return powerRating;
	}
	public void setPowerRating(Double powerRating) {
		this.powerRating = powerRating;
	}
	public Player(String name, Date dateOfBirth, String skill,
			Integer numberOfMatches, Integer runs, Integer wickets,
			String nationality, Double powerRating) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.skill = skill;
		this.numberOfMatches = numberOfMatches;
		this.runs = runs;
		this.wickets = wickets;
		this.nationality = nationality;
		this.powerRating = powerRating;
	}
	public Player() {
		super();
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result
				+ ((nationality == null) ? 0 : nationality.hashCode());
		result = prime * result + ((skill == null) ? 0 : skill.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Player other = (Player) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (nationality == null) {
			if (other.nationality != null)
				return false;
		} else if (!nationality.equals(other.nationality))
			return false;
		if (skill == null) {
			if (other.skill != null)
				return false;
		} else if (!skill.equals(other.skill))
			return false;
		return true;
	}
	@Override
	public String toString() {
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

		return "Name:"+name+"\nDate of Birth:"+sdf.format(dateOfBirth)+"\nSkill:"+skill+"\nNumber of Matches:"+numberOfMatches+"\nRuns:"+runs+"\nWickets:"+wickets+"\nNationality:"+nationality+"\nPower Rating:"+powerRating;
	}
	
	
}
Page of 
Team - Requirement 2 

Requirement 2:
In this requirement, we are gonna start creating a team and add players to it. Start with creating a team and use menu-driven approach to add, remove, display details of the player in the team.

a)Create a Class Player with the following attributes:
Member Field Name 	Type 
name 	String 
dateOfBirth 	java.util.Date 
skill 	String 
numberOfMatches 	Integer 
runs 	Integer 
wickets 	Integer 
nationality 	String 
powerRating 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public Player(String name, Date dateOfBirth, String skill, Integer numberOfMatches, Integer runs, Integer wickets, String nationality, Double powerRating). 

b)Create a Class Team with the following attributes:
Member Field Name 	Type 
name 	String 
playerList 	List<Player> 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public Team(String name, List<Player> playerList). In constructor pass the playerList value as an empty list. Only one team will be present at a time.

c) Create the following static method in Player class,
Method Name 	Description 
public static Player createPlayer(String detail) 	This method accepts a String which contains player details separated by commas. Split the details and create a player object from the details and return it. 
The player details should be given as a comma-separated value in the below order,
name,dateOfBirth,skill,numberOfMatches,runs,wickets,nationality,powerRating

d) Create the following methods in Team class,
Method Name 	Description 
public void addPlayerToTeam(Player player) 	This method accepts a Player object and add the player to the player list of the current team. 
public Boolean removePlayerFromTeam(String name) 	This method will get the name of the player and delete the player with the specified name from the current team.
If a player with the given name found, delete the player and return true. If a player with the name is not found return false.
The players name are unique. 
public void displayPlayers() 	This method will display the player list in the current team.
If the player list is empty display "No players to show", else
display "Players in [team name]" and display all the player details in the specified format. Where [team name] specifies the name of the team. 

After deletion, if true is returned print "Player successfully deleted", else print "Player not found in the team". After adding a player to the team, print "Player successfully added".

Note: The above print statements should be present in the main method.

When the “player” object is printed, it should display the following format
Print format:
System.out.printf("%-15s%-15s%-10s%-15s%-10s%-10s%-15s%-10s\n", "Name","Date of birth","Skill","No of matches","Runs","Wickets","Nationality","Rating"). Display 1 digit after decimal point in Double.

Sample Input and Output:

Enter the name of the Team:
Royal Challengers Banglore
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
3
No players to show
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
1
Enter the details of player in CSV format:
Virat Kohli,05-11-1988,Batsman,149,4418,4,India,4.7
Player successfully added
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
1
Enter the details of player in CSV format:
Ab de Villiers,7-02-1984,Batsman,129,3473,0,S Africa,4.7
Player successfully added
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
1
Enter the details of player in CSV format:
Bhuvneshwar,05-02-1990,Bowler,90,158,111,India,4.1
Player successfully added
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
1
Enter the details of player in CSV format:
Mitchell Stark,30-01-1990,Bowler,27,96,34,Australia,4.1
Player successfully added
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
2
Enter the name of the player to be deleted:
MS Dhoni
Player not found in the team
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
2
Enter the name of the player to be deleted:
Bhuvneshwar
Player successfully deleted
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
3
Players in:Royal Challengers Banglore
Name           Date of birth  Skill     No of matches  Runs      Wickets   Nationality    Rating    
Virat Kohli    05-11-1988     Batsman   149            4418      4         India          4.7       
Ab de Villiers 07-02-1984     Batsman   129            3473      0         S Africa       4.7       
Mitchell Stark 30-01-1990     Bowler    27             96        34        Australia      4.1       
1.Add Player
2.Delete Player
3.Display Players
4.Exit
Enter your choice:
4



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		
		System.out.println("Enter the name of the Team:");
		
		
		//List<Player> playerList=new ArrayList<>();
		
		//write your code here
		String name=br.readLine();
		
		Team t=new Team(name,new ArrayList<>());
		System.out.println("1.Add Player\n2.Delete Player\n3.Display Players\n4.Exit\nEnter your choice:");
		Integer choice=Integer.parseInt(br.readLine());
		while(choice>0&&choice<4) {
			if(choice==1) {
				System.out.println("Enter the details of player in CSV format:");
				
				//write your code here
				String details=br.readLine();
				
				t.addPlayerToTeam(Player.createPlayer(details));
				System.out.println("Player successfully added");
			}
			else if(choice==2) {
				System.out.println("Enter the name of the player to be deleted:");
				
				//write your code here
				String name1=br.readLine();
				if(t.removePlayerFromTeam(name1))
				{
					System.out.println("Player successfully deleted");
				}
				else
					System.out.println("Player not found in the team");
				
			}
			else if(choice==3) {
				
				//write your code here
				t.displayPlayers();
			}
				else if(choice==4)
				{
					System.exit(0);
				}
			
			System.out.println("1.Add Player\n2.Delete Player\n3.Display Players\n4.Exit\nEnter your choice:");
			choice=Integer.parseInt(br.readLine());
		}
	}

}




import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Player {
	//write your code here
	private String name;
	private java.util.Date dateOfBirth;
	private String skill;
	private Integer numberOfMatches;
	private Integer runs;
	private Integer wickets;
	private String nationality;
	private Double powerRating;
	
	
	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public java.util.Date getDateOfBirth() {
		return dateOfBirth;
	}


	public void setDateOfBirth(java.util.Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}


	public String getSkill() {
		return skill;
	}


	public void setSkill(String skill) {
		this.skill = skill;
	}


	public Integer getNumberOfMatches() {
		return numberOfMatches;
	}


	public void setNumberOfMatches(Integer numberOfMatches) {
		this.numberOfMatches = numberOfMatches;
	}


	public Integer getRuns() {
		return runs;
	}


	public void setRuns(Integer runs) {
		this.runs = runs;
	}


	public Integer getWickets() {
		return wickets;
	}


	public void setWickets(Integer wickets) {
		this.wickets = wickets;
	}


	public String getNationality() {
		return nationality;
	}


	public void setNationality(String nationality) {
		this.nationality = nationality;
	}


	public Double getPowerRating() {
		return powerRating;
	}


	public void setPowerRating(Double powerRating) {
		this.powerRating = powerRating;
	}


	public Player(String name, Date dateOfBirth, String skill,
			Integer numberOfMatches, Integer runs, Integer wickets,
			String nationality, Double powerRating) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.skill = skill;
		this.numberOfMatches = numberOfMatches;
		this.runs = runs;
		this.wickets = wickets;
		this.nationality = nationality;
		this.powerRating = powerRating;
	}


	public Player() {
		super();
	}


	public static Player createPlayer(String detail) throws NumberFormatException, ParseException {
		//write your code here
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		String s[]=detail.split(",");
		Player p=new Player(s[0],sdf.parse(s[1]),s[2],Integer.parseInt(s[3]),Integer.parseInt(s[4]),Integer.parseInt(s[5]),s[6],Double.parseDouble(s[7]));
		return p;
	}
	
}



import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;

public class Team {
	//write your code here
	private String name;
	private List<Player> playerList;
	Player p=new Player();
	//DecimalFormat df=new DecimalFormat("0.0");
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Player> getPlayerList() {
		return playerList;
	}

	public void setPlayerList(List<Player> playerList) {
		this.playerList = playerList;
	}

	public Team(String name, List<Player> playerList) {
		super();
		this.name = name;
		this.playerList = playerList;
	}

	public Team() {
		super();
	}

	public void addPlayerToTeam(Player player) {
		//write your code here
		
		playerList.add(player);
		
	}
	
	public Boolean removePlayerFromTeam(String name) {
		//write your code here
		for(Player p:playerList)
		{
			if(p.getName().equals(name))
			{
				playerList.remove(p);
				
				return true;
			}
		}
		return false;
		
		
	}
	
	public void displayPlayers() {
		//write your code here
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

		if(playerList.size()==0)
		{
			System.out.println("No players to show");
			
		}
		else{
			System.out.println("Players in:"+name);
		System.out.printf("%-15s%-15s%-10s%-15s%-10s%-10s%-15s%-10s\n", "Name","Date of birth","Skill","No of matches","Runs","Wickets","Nationality","Rating");
		for(Player p:playerList)
		{
			System.out.printf("%-15s%-15s%-10s%-15d%-10d%-10d%-15s%-10.1f\n", p.getName(),sdf.format(p.getDateOfBirth()),p.getSkill(),p.getNumberOfMatches(),p.getRuns(),p.getWickets(),p.getNationality(),p.getPowerRating());

		}

	}
	}
}


Page of 
Team - Requirement 3 
Requirement 3:
In this requirement develop a feature in which you can search a List of Players by nationality, dateOfBirth or powerRating.

a) Create a Class Player with the following attributes:
  
Member Field Name 	Type 
name 	String 
dateOfBirth 	java.util.Date 
skill 	String 
numberOfMatches 	Integer 
runs 	Integer 
wickets 	Integer 
nationality 	String 
  powerRating 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Player(String name, Date dateOfBirth, String skill, Integer numberOfMatches, Integer runs,Integer wickets,String nationality,Double powerRating)

b) Create a class PlayerBO with the following methods,
  
Method Name 	Description 
public List<Player> findPlayer(List<Player> playerList,String nationality) 	This method accepts a list of players and Nationality as arguments and returns a list of players that match with given Nationality. 
public List<Player> findPlayer(List<Player> playerList,Date dateOfBirth) 	This method accepts a list of players and date of birth as arguments and returns a list of players who were born on the given date. 
public List<Player> findPlayer(List<Player> playerList,Double powerRating) 	This method accepts a list of players and power rating as arguments, then find all the players with the given power rating from the player list and return the list of players with the specified power rating. 

The player details should be given as a comma-separated value in the below order,
name,dateOfBirth,skill,numberOfMatches,runs,wickets,nationality,powerRating

Get the number of player and the player details, build a player list and perform the search by nationality,dateOfBirth or powerRating.

When the “player” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-15s %-20s %-15s %-15s %-15s %s\n","Name","Date of Birth","Skill","Number of Wickets","Runs","Wickets","Nationality","Power Rating");

Note: The player lists are displayed in the main method.
              If any other choice is selected, display "Invalid choice"
              Display one digit after the decimal point for Double Datatype.

Sample Input and Output 1:

Enter the number of Players:
4
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9
ABD,17-02-1984,WK&BAT,300,10000,3,South African,4.9
SRaina,27-11-1986,BAT,100,5000,50,Indian,4.5
Maxwell,14-10-1988,ALLROUNDER,200,4000,50,Australian,4.5
Enter a search type:
1.By Nationality
2.By Date of Birth
3.By Power Rating
1
Enter the Nationality:
Australian 
Name 	Date of Birth 	Skill 	Number of Matches 	Runs 	Wickets 	Nationality 	Power Rating 
Maxwell 	14-10-1988 	ALLROUNDER 	200 	4000 	50 	Australian 	4.5 

Sample Input and Output 2:

Enter the number of Players:
4
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9
ABD,17-02-1984,WK&BAT,300,10000,3,South African,4.9
SRaina,27-11-1986,BAT,100,5000,50,Indian,4.5
Maxwell,14-10-1988,ALLROUNDER,200,4000,50,Australian,4.5
Enter a search type:
1.By Nationality
2.By Date of Birth
3.By Power Rating
2
Enter the Date of Birth:
07-07-1981 
Name 	Date of Birth 	Skill 	Number of Matches 	Runs 	Wickets 	Nationality 	Power Rating 
MSD 	07-07-1981 	WK&BAT 	300 	10000 	2 	Indian 	4.9 

Sample Input and Output 3:

Enter the number of Players:
4
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9
ABD,17-02-1984,WK&BAT,300,10000,3,South African,4.9
SRaina,27-11-1986,BAT,100,5000,50,Indian,4.5
Maxwell,14-10-1988,ALLROUNDER,200,4000,50,Australian,4.2
Enter a search type:
1.By Nationality
2.By Date of Birth
3.By Power Rating
3
Enter the Power Rating:
4.5 
Name 	Date of Birth 	Skill 	Number of Matches 	Runs 	Wickets 	Nationality 	Power Rating 
SRaina 	27-11-1986 	BAT 	100 	5000 	50 	Indian 	4.5 


Sample Input and Output 4:

Enter the number of Players:
4
MSD,07-07-1981,WK&BAT,300,10000,2,Indian,4.9
ABD,17-02-1984,WK&BAT,300,10000,3,South African,4.9
SRaina,27-11-1986,BAT,100,5000,50,Indian,4.5
Maxwell,14-10-1988,ALLROUNDER,200,4000,50,Australian,4.2
Enter a search type:
1.By Nationality
2.By Date of Birth
3.By Power Rating
4
Invalid choice 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		//Your code goes here...
		List<Player>playerList=new ArrayList<>();
		PlayerBO bo=new PlayerBO();
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		System.out.println("Enter the number of Players:");
		//Your code goes here...
		int n=Integer.parseInt(br.readLine());
		for(int i=0;i<n;i++)
		{
			String detail=br.readLine();
			String s[]=detail.split(",");
			Player p=new Player(s[0],sdf.parse(s[1]),s[2],Integer.parseInt(s[3]),Integer.parseInt(s[4]),Integer.parseInt(s[5]),s[6],Double.parseDouble(s[7]));
			playerList.add(p);
		}
		System.out.println("Enter a search type:\n1.By Nationality\n2.By Date of Birth\n3.By Power Rating");
		//Your code goes here...
		
		int choice=Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:
			System.out.println("Enter the Nationality:");
			String a=br.readLine();
			List<Player> pl=bo.findPlayer(playerList, a);
			System.out.format("%-15s %-15s %-15s %-20s %-15s %-15s %-15s %s\n","Name","Date of Birth","Skill","Number of Wickets","Runs","Wickets","Nationality","Power Rating");
			for(Player p:pl)
			{
				System.out.format("%-15s %-15s %-15s %-20d %-15d %-15d %-15s %.1f\n",p.getName(),sdf.format(p.getDateOfBirth()),p.getSkill(),p.getNumberOfMatches(),p.getRuns(),p.getWickets(),p.getNationality(),p.getPowerRating());

			}
			break;
		case 2:
			System.out.println("Enter the Date of Birth:");
			String d=br.readLine();
			Date date=sdf.parse(d);
			List<Player>pl1=bo.findPlayer(playerList, date);
			System.out.format("%-15s %-15s %-15s %-20s %-15s %-15s %-15s %s\n","Name","Date of Birth","Skill","Number of Wickets","Runs","Wickets","Nationality","Power Rating");

			for(Player p:pl1)
			{
				System.out.format("%-15s %-15s %-15s %-20d %-15d %-15d %-15s %.1f\n",p.getName(),sdf.format(p.getDateOfBirth()),p.getSkill(),p.getNumberOfMatches(),p.getRuns(),p.getWickets(),p.getNationality(),p.getPowerRating());

			}
			break;
			
		case 3:
			System.out.println("Enter the Power Rating:");
			Double rating=Double.parseDouble(br.readLine());
			List<Player>pl2=bo.findPlayer(playerList, rating);
			System.out.format("%-15s %-15s %-15s %-20s %-15s %-15s %-15s %s\n","Name","Date of Birth","Skill","Number of Wickets","Runs","Wickets","Nationality","Power Rating");

			for(Player p:pl2)
			{
				System.out.format("%-15s %-15s %-15s %-20d %-15d %-15d %-15s %.1f\n",p.getName(),sdf.format(p.getDateOfBirth()),p.getSkill(),p.getNumberOfMatches(),p.getRuns(),p.getWickets(),p.getNationality(),p.getPowerRating());

			}
			break;
		default:
			System.out.println("Invalid choice");
			break;
			}
			
			
					
		}
	}




import java.util.Date;

public class Player {
	//your code goes here...	
	private String name;
	private java.util.Date dateOfBirth;
	private String skill;
	private Integer numberOfMatches;
	private Integer runs;
	private Integer wickets;
	private String nationality;
	private Double powerRating;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public java.util.Date getDateOfBirth() {
		return dateOfBirth;
	}
	public void setDateOfBirth(java.util.Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}
	public String getSkill() {
		return skill;
	}
	public void setSkill(String skill) {
		this.skill = skill;
	}
	public Integer getNumberOfMatches() {
		return numberOfMatches;
	}
	public void setNumberOfMatches(Integer numberOfMatches) {
		this.numberOfMatches = numberOfMatches;
	}
	public Integer getRuns() {
		return runs;
	}
	public void setRuns(Integer runs) {
		this.runs = runs;
	}
	public Integer getWickets() {
		return wickets;
	}
	public void setWickets(Integer wickets) {
		this.wickets = wickets;
	}
	public String getNationality() {
		return nationality;
	}
	public void setNationality(String nationality) {
		this.nationality = nationality;
	}
	public Double getPowerRating() {
		return powerRating;
	}
	public void setPowerRating(Double powerRating) {
		this.powerRating = powerRating;
	}
	public Player(String name, Date dateOfBirth, String skill,
			Integer numberOfMatches, Integer runs, Integer wickets,
			String nationality, Double powerRating) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.skill = skill;
		this.numberOfMatches = numberOfMatches;
		this.runs = runs;
		this.wickets = wickets;
		this.nationality = nationality;
		this.powerRating = powerRating;
	}
	public Player() {
		super();
	}
	
}




import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PlayerBO {
	public List<Player> findPlayer(List<Player> playerList,String nationality){
	//your code goes here...
		List<Player> p1=new ArrayList<>();
		for(Player p:playerList)
		{
			if(p.getNationality().equals(nationality))
			{
				p1.add(p);
			}
		}
		return p1;
		
	}
	public List<Player> findPlayer(List<Player> playerList,Date dateOfBirth){
	//your code goes here...
		List<Player> p2=new ArrayList<>();
		for(Player p:playerList)
		{
			if(p.getDateOfBirth().equals(dateOfBirth))
			{
				p2.add(p);
			}
		}
		return p2;
	}
	public List<Player> findPlayer(List<Player> playerList,Double powerRating){
	//your code goes here...		
		
		List<Player> p3=new ArrayList<>();
		for(Player p:playerList)
		{
			if(p.getPowerRating().equals(powerRating))
			{
				p3.add(p);
			}
		}
		return p3;
	}
}
Page of 
Team - Requirement 4 
Requirement 4:

In this requirement, you need to sort the list of players based on number of matches played, runs scored or powerRating.

a) Create a Class Player with the following attributes:
Member Field Name 	Type 
name 	String 
dateOfBirth 	java.util.Date 
skill 	String 
numberOfMatches 	Integer 
runs 	Integer 
wickets 	Integer 
nationality 	String 
powerRating 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Player(String name, java.util.Date dateOfBirth, String skill, Integer numberOfMatches,Integer runs, Integer wickets, String nationality, Double powerRating)

b) Create the following static methods in the Player class,
Method Name 	Description 
static Player createPlayer(String detail) 	This method accepts a String and returns a Player object. The player detail separated by commas is passed as value. This method will split the details and creates a player object and returns it. 
The Player details should be given as a comma-separated value in the below order,
name, dateOfBirth, skill, numberOfMatches, runs, wickets, nationality, powerRating

c) The Player class should implement the Comparable interface which sorts the Player list based on the number of matches. While comparing, all the numberOfMatches attributes in the list are unique.

d) Create a class PowerRatingComparator which implements Comparator interface and sort the Player list based on powerRating. While comparing, all the powerRating attributes in the list are unique.

e) Create a class RunComparator which implements Comparator interface and sort the Player list based on the runs. While comparing, all the runs attributes in the list are unique.

When the “player” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", "Name","Date of birth","Skill","No of matches","Runs","wickets","Nationality","Power rating");
Display one digit after decimal point for Double datatype.

Sample Input and Output 1:

Enter the number of the players:
5
MS Dhoni,07-07-1981,Batsman,159,3561,0,India,4.4
Virat Kohli,05-11-1988,Batsman,149,4418,4,India,4.7
Ab de Villiers,7-02-1984,Batsman,129,3473,0,S Africa,4.6
Mitchell Starc,30-01-1990,Bowler,27,96,34,Australia,4
Bhuvneshwar,05-02-1990,Bowler,90,158,111,India,4.1
Enter a type to sort:
1.Sort by number of matches played
2.Sort by runs scored
3.Sort by power rating
1
Name                  Date of birth   Skill              No of matches   Runs       wickets    Nationality     Power rating
Mitchell Starc  30-01-1990     Bowler       27                             96             34               Australia         4.0
Bhuvneshwar  05-02-1990     Bowler       90                             158          111             India                  4.1
Ab de Villiers    07-02-1984     Batsman  129                          3473        0                  S Africa            4.6
Virat Kohli          05-11-1988     Batsman  149                          4418        4                  India                  4.7
MS Dhoni           07-07-1981     Batsman  159                          3561        0                  India                  4.4

Sample Input and Output 2:

Enter the number of the players:
5
MS Dhoni,07-07-1981,Batsman,159,3561,0,India,4.4
Virat Kohli,05-11-1988,Batsman,149,4418,4,India,4.7
Ab de Villiers,7-02-1984,Batsman,129,3473,0,S Africa,4.6
Mitchell Starc,30-01-1990,Bowler,27,96,34,Australia,4
Bhuvneshwar,05-02-1990,Bowler,90,158,111,India,4.1
Enter a type to sort:
1.Sort by number of matches played
2.Sort by runs scored
3.Sort by power rating
2
Name                  Date of birth   Skill              No of matches   Runs       wickets    Nationality     Power rating
Mitchell Starc  30-01-1990     Bowler       27                             96             34               Australia         4.0
Bhuvneshwar  05-02-1990     Bowler       90                             158          111             India                  4.1
Ab de Villiers    07-02-1984     Batsman  129                          3473        0                  S Africa            4.6
MS Dhoni           07-07-1981     Batsman  159                          3561        0                  India                  4.4
Virat Kohli          05-11-1988     Batsman  149                          4418        4                  India                  4.7

Sample Input and Output 3:

Enter the number of the players:
5
MS Dhoni,07-07-1981,Batsman,159,3561,0,India,4.4
Virat Kohli,05-11-1988,Batsman,149,4418,4,India,4.7
Ab de Villiers,7-02-1984,Batsman,129,3473,0,S Africa,4.6
Mitchell Starc,30-01-1990,Bowler,27,96,34,Australia,4
Bhuvneshwar,05-02-1990,Bowler,90,158,111,India,4.1
Enter a type to sort:
1.Sort by number of matches played
2.Sort by runs scored
3.Sort by power rating
3
Name                  Date of birth   Skill              No of matches   Runs       wickets    Nationality     Power rating
Mitchell Starc  30-01-1990     Bowler       27                             96             34               Australia         4.0
Bhuvneshwar  05-02-1990     Bowler       90                             158          111             India                  4.1
MS Dhoni           07-07-1981     Batsman  159                          3561        0                  India                  4.4
Ab de Villiers    07-02-1984     Batsman  129                          3473        0                  S Africa            4.6
Virat Kohli          05-11-1988     Batsman  149                          4418        4                  India                  4.7 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	//Player pl=new Player();
    	SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
    	List<Player> playerList=new ArrayList<>();
		System.out.println("Enter the number of the players:");
    	//Your code here
		int n=Integer.parseInt(br.readLine());
		for(int i=0;i<n;i++)
		{
			String detail=br.readLine();
			playerList.add(Player.createPlayer(detail));
		}
		System.out.println("Enter a type to sort:\n1.Sort by number of matches played\n2.Sort by runs scored\n3.Sort by power rating");
		//Your code here
		int choice=Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:
			Collections.sort(playerList);
			System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", "Name","Date of birth","Skill","No of matches","Runs","wickets","Nationality","Power rating");
			for(Player p:playerList)
			{
				System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", p.getName(),sdf.format(p.getDateOfBirth()),p.getSkill(),p.getNumberOfMatches(),p.getRuns(),p.getWickets(),p.getNationality(),p.getPowerRating());
				
			}
			break;
		case 2:
			Collections.sort(playerList,new RunComparator() );
			System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", "Name","Date of birth","Skill","No of matches","Runs","wickets","Nationality","Power rating");
			for(Player p1:playerList)
			{
				System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", p1.getName(),sdf.format(p1.getDateOfBirth()),p1.getSkill(),p1.getNumberOfMatches(),p1.getRuns(),p1.getWickets(),p1.getNationality(),p1.getPowerRating());
				
			}
			break;
		case 3:
			Collections.sort(playerList,new PowerRatingComparator());
			System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", "Name","Date of birth","Skill","No of matches","Runs","wickets","Nationality","Power rating");
			for(Player p2:playerList)
			{
				System.out.format("%-15s %-15s %-15s %-15s %-10s %-10s %-15s %s\n", p2.getName(),sdf.format(p2.getDateOfBirth()),p2.getSkill(),p2.getNumberOfMatches(),p2.getRuns(),p2.getWickets(),p2.getNationality(),p2.getPowerRating());
				
			}
			break;
		}
	}
}



import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;




public class Player implements Comparable<Player>{
	//Your code here
	private String name;
	private java.util.Date dateOfBirth;
	private String skill;
	private Integer numberOfMatches;
	private Integer runs;
	private Integer wickets;
	private String nationality;
	private Double powerRating;
	
	
	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public java.util.Date getDateOfBirth() {
		return dateOfBirth;
	}


	public void setDateOfBirth(java.util.Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}


	public String getSkill() {
		return skill;
	}


	public void setSkill(String skill) {
		this.skill = skill;
	}


	public Integer getNumberOfMatches() {
		return numberOfMatches;
	}


	public void setNumberOfMatches(Integer numberOfMatches) {
		this.numberOfMatches = numberOfMatches;
	}


	public Integer getRuns() {
		return runs;
	}


	public void setRuns(Integer runs) {
		this.runs = runs;
	}


	public Integer getWickets() {
		return wickets;
	}


	public void setWickets(Integer wickets) {
		this.wickets = wickets;
	}


	public String getNationality() {
		return nationality;
	}


	public void setNationality(String nationality) {
		this.nationality = nationality;
	}


	public Double getPowerRating() {
		return powerRating;
	}


	public void setPowerRating(Double powerRating) {
		this.powerRating = powerRating;
	}


	public Player(String name, Date dateOfBirth, String skill,
			Integer numberOfMatches, Integer runs, Integer wickets,
			String nationality, Double powerRating) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.skill = skill;
		this.numberOfMatches = numberOfMatches;
		this.runs = runs;
		this.wickets = wickets;
		this.nationality = nationality;
		this.powerRating = powerRating;
	}


	public Player() {
		super();
	}


	public static Player createPlayer(String detail) throws NumberFormatException, ParseException{
		//Your code here
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		String s[]=detail.split(",");
		Player p=new Player(s[0],sdf.parse(s[1]),s[2],Integer.parseInt(s[3]),Integer.parseInt(s[4]),Integer.parseInt(s[5]),s[6],Double.parseDouble(s[7]));
		return p;
	}


	@Override
	public int compareTo(Player p1) {
		// TODO Auto-generated method stub
		if(this.numberOfMatches>p1.numberOfMatches)
		return 1;
		else if(this.numberOfMatches<p1.numberOfMatches)
			return -1;
		else
			return 0;
	}
}




import java.util.Comparator;




public class PowerRatingComparator implements Comparator<Player>{

	@Override
	public int compare(Player r1, Player r2) {
		// TODO Auto-generated method stub
		if(r1.getPowerRating()>r2.getPowerRating())
		return 1;
		else if(r1.getPowerRating()<r2.getPowerRating())
		return -1;
		else
			return 0;
	}
	//Your code here
}







import java.util.Comparator;




public class RunComparator implements Comparator<Player>{

	@Override
	public int compare(Player ru1, Player ru2) {
		// TODO Auto-generated method stub
		if(ru1.getRuns()>ru2.getRuns())
		return 1;
		else if(ru1.getRuns()<ru2.getRuns())
			return -1;
		else
			return 0;
	}
	//Your code here
}

Page of 
Team - Requirement 5 

Requirement 5:

In this requirement, given a list of players you need to find the number of players playing for a country using Map.

a) Create a Class Player with the following attributes:
Member Field Name 	Type 
name 	String 
dateOfBirth 	java.util.Date 
skill 	String 
numberOfMatches 	Integer 
runs 	Integer 
wickets 	Integer 
nationality 	String 
powerRating 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters. Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Player(String name, java.util.Date dateOfBirth, String skill, Integer numberOfMatches, Integer runs, Integer wickets, String nationality, DoublepowerRating)

b) Create the following static methods in the Player class,
Method Name 	Description 
static Map<String,Integer> calculateNationalityCount(List<Player> list) 	This method accepts a list of Player as arguments and returns a TreeMap with the nationality as key and number of players playing for the country as value and returns the map. 
In the TreeMap have the nationality as key and Count the number of players playing for the country and keep the number of players as value. Print the value sorted by country name.

The player details should be given as a comma separated value in the below order,
name, dateOfBirth, skill, numberOfMatches, runs, wickets, nationality, powerRating

Print format:
System.out.format("%-15s %s\n","Country","Count");

Sample Input and Output 1:

Enter the number of players:
5
MS Dhoni,07-07-1981,Batsman,159,3561,0,India,4.4
Virat Kohli,05-11-1988,Batsman,149,4418,4,India,4.7
Bhuvneshwar,05-02-1990,Bowler,90,158,111,India,4.1
Mike hussey,27-05-1975,Batsman,59,1977,0,Australia,4.5
Mitchell Stark,30-01-1990,Bowler,27,96,34,Australia,4
Country         Count
Australia       2
India              3 


import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;




public class Player{
	//Your code here
	private String name;
	private java.util.Date dateOfBirth;
	private String skill;
	private Integer numberOfMatches;
	private Integer runs;
	private Integer wickets;
	private String nationality;
	private Double powerRating;
	
	
	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public java.util.Date getDateOfBirth() {
		return dateOfBirth;
	}


	public void setDateOfBirth(java.util.Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}


	public String getSkill() {
		return skill;
	}


	public void setSkill(String skill) {
		this.skill = skill;
	}


	public Integer getNumberOfMatches() {
		return numberOfMatches;
	}


	public void setNumberOfMatches(Integer numberOfMatches) {
		this.numberOfMatches = numberOfMatches;
	}


	public Integer getRuns() {
		return runs;
	}


	public void setRuns(Integer runs) {
		this.runs = runs;
	}


	public Integer getWickets() {
		return wickets;
	}


	public void setWickets(Integer wickets) {
		this.wickets = wickets;
	}


	public String getNationality() {
		return nationality;
	}


	public void setNationality(String nationality) {
		this.nationality = nationality;
	}


	public Double getPowerRating() {
		return powerRating;
	}


	public void setPowerRating(Double powerRating) {
		this.powerRating = powerRating;
	}


	public Player(String name, Date dateOfBirth, String skill,
			Integer numberOfMatches, Integer runs, Integer wickets,
			String nationality, Double powerRating) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.skill = skill;
		this.numberOfMatches = numberOfMatches;
		this.runs = runs;
		this.wickets = wickets;
		this.nationality = nationality;
		this.powerRating = powerRating;
	}


	public Player() {
		super();
	}


	public static Map<String,Integer> calculateNationalityCount(List<Player> list){
		//Your code here
		Map<String,Integer> cmap=new TreeMap<>();
		int n=0;
		for(Player p:list){
		if(cmap.containsKey(p.getNationality()))
		{
			n=cmap.get(p.getNationality());
			n++;
			cmap.put(p.getNationality(), n);
		}
		else
			cmap.put(p.getNationality(), 1);
	}
		return cmap;
} 
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;




public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		List<Player>list=new ArrayList<>();
		System.out.println("Enter the number of players:");
		//Your code here
		int n=Integer.parseInt(br.readLine());
		for(int i=0;i<n;i++){
		String s=br.readLine();
		String s1[]=s.split(",");
		Player p=new Player(s1[0],sdf.parse(s1[1]),s1[2],Integer.parseInt(s1[3]),Integer.parseInt(s1[4]),Integer.parseInt(s1[5]),s1[6],Double.parseDouble(s1[7]));
		list.add(p);
		}
		
		Map<String,Integer> map=Player.calculateNationalityCount(list);
		
		System.out.format("%-15s %s\n","Country","Count");
		for(String pp:map.keySet())
		{
			System.out.format("%-15s %d\n",pp,map.get(pp));
		}
		
	}
}
Page of 
Team - Requirement 6 
Requirement 6:
   In this requirement, you need to find the country from which the maximum number of overseas players is taking part in the IPL.

a)Create a Class Player with the following attributes:
  
Member Field Name 	Type 
name 	String 
dateOfBirth 	java.util.Date 
skill 	String 
numberOfMatches 	Integer 
runs 	Integer 
wickets 	Integer 
nationality 	String 
powerRating 	Double 

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public Player(String name, java.util.Date dateOfBirth, String skill, Integer numberOfMatches, Integer runs, Integer wickets, String nationality, Double powerRating)

b) Create the following static method in Player class,
Method Name 	Description 
public static Player createPlayer(String detail) 	This method accepts a string which contains player details separated by commas. Split the details and create a player object from the details and return the player object. 
public static String highestCount(List<Player> playerList) 	This accepts a list as argument and returns a String. It takes a player list as argument and returns the country from which the maximum number of players are playing. 

The player details should be given as a comma-separated value in the below order,
name,dateOfBirth,skill,numberOfMatches,runs,wickets,nationality,powerRating

Create a driver class Main with the main method to get details and display details.

Sample Input and Output:

Enter the number of players:
6
MS Dhoni,07-07-1981,Batsman,159,3561,0,India,4.4
Virat Kohli,05-11-1988,Batsman,149,4418,4,India,4.7
Bhuvneshwar,05-02-1990,Bowler,90,158,111,India,4.1
Ab de Villiers,7-02-1984,Batsman,129,3473,0,S Africa,4.7
Mitchell Stark,30-01-1990,Bowler,27,96,34,Australia,4.1
Faf du Plessis,13-07-1984,Batsman,53,1295,0,S Africa,4.5
The nationality with maximum players:India
  

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Player {
	//write your code here
	private String name;
	private java.util.Date dateOfBirth;
	private String skill;
	private Integer numberOfMatches;
	private Integer runs;
	private Integer wickets;
	private String nationality;
	private Double powerRating;
	
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public java.util.Date getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(java.util.Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	public String getSkill() {
		return skill;
	}

	public void setSkill(String skill) {
		this.skill = skill;
	}

	public Integer getNumberOfMatches() {
		return numberOfMatches;
	}

	public void setNumberOfMatches(Integer numberOfMatches) {
		this.numberOfMatches = numberOfMatches;
	}

	public Integer getRuns() {
		return runs;
	}

	public void setRuns(Integer runs) {
		this.runs = runs;
	}

	public Integer getWickets() {
		return wickets;
	}

	public void setWickets(Integer wickets) {
		this.wickets = wickets;
	}

	public String getNationality() {
		return nationality;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	public Double getPowerRating() {
		return powerRating;
	}

	public void setPowerRating(Double powerRating) {
		this.powerRating = powerRating;
	}

	public Player(String name, Date dateOfBirth, String skill,
			Integer numberOfMatches, Integer runs, Integer wickets,
			String nationality, Double powerRating) {
		super();
		this.name = name;
		this.dateOfBirth = dateOfBirth;
		this.skill = skill;
		this.numberOfMatches = numberOfMatches;
		this.runs = runs;
		this.wickets = wickets;
		this.nationality = nationality;
		this.powerRating = powerRating;
	}

	public Player() {
		super();
	}

	public static Player createPlayer(String detail) throws NumberFormatException, ParseException {
		//write your code here
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		String s[]=detail.split(",");
		Player p=new Player(s[0],sdf.parse(s[1]),s[2],Integer.parseInt(s[3]),Integer.parseInt(s[4]),Integer.parseInt(s[5]),s[6],Double.parseDouble(s[7]));
		return p;
	}
	
	public static String highestCount(List<Player> playerList) {
		//write your code here
		int n=0;String s1="";
		Map<String,Integer>cmap=new TreeMap<>();
		for(Player p:playerList){
		
		
		if(cmap.containsKey(p.getNationality()))
		{
			n=cmap.get(p.getNationality());
			n++;
			cmap.put(p.getNationality(), n);
			//System.out.println("bb");
		}
		else
			cmap.put(p.getNationality(), 1);
		
		}
		
		int max=0;
	
	for(String s:cmap.keySet())
	{
		
		if(cmap.get(s)>=max)
		{s1=s;
			max=cmap.get(s);
			//System.out.println(max);
			
		}
	}
	
	

		return s1;
}
}



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		System.out.println("Enter the number of players:");
		
		
		Integer count=Integer.parseInt(br.readLine());
		List<Player>playerList=new ArrayList<>();
		//write your code here
		for(int i=0;i<count;i++)
		{
			String s=br.readLine();
			String s1[]=s.split(",");
			Player p1=new Player(s1[0],sdf.parse(s1[1]),s1[2],Integer.parseInt(s1[3]),Integer.parseInt(s1[4]),Integer.parseInt(s1[5]),s1[6],Double.parseDouble(s1[7]));
			
			playerList.add(p1);
			
		}
		String h=Player.highestCount(playerList);
		System.out.println("The nationality with maximum players:"+h);
	}	
}--------------------------------------------------------------------------------------------------------------------------------------
UPI
Requirement 1:
Let’s start off by creating two User objects and check whether they are equal.
 
1.	Create a User Class with the following attributes:
Member Field Name	Type
name	String
mobileNumber	String
email	String
DOB	Date
2.	Mark all the attributes as private
3.	Create / Generate appropriate Getters & Setters
4.	Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
User ( String name, String mobileNumber, String email, Date DOB )
5.	When the “User” object is printed, it should display the following details: [Override the toString method]
Print format:
Name: "name"
MobileNumber: "mobileNumber"
Email: "email"
DOB: "DOB"
6.	Two Users are considered same if they have the same name, and mobileNumber. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]

The input format consists of User details separated by a comma in the below order,
name, mobileNumber, email, DOB
The Input to your program would be details of two Users, you need to display their details as given in "5th point(refer above)" and compare the two Users and display if the Users are same or different.

Note: There is an empty line between display statements. Print the empty lines in the main method.
Sample Input/Output 1:
 
Enter user 1 detail:
Emma,9659659790,emma@gmail.com,15/03/1993
Enter user 2 detail:
Leslie,9595878580,leslie@gmail.com,26/09/1989
 
User 1
Name: Emma
MobileNumber: 9659659790
Email: emma@gmail.com
Dob: 15/03/1993
 
User 2
Name: Leslie
MobileNumber: 9595878580
Email: leslie@gmail.com
Dob: 26/09/1989
 
User 1 and User 2 are different
 
Sample Input/Output 2:
 
Enter user 1 detail:
Mona,9898798652,mona@gmail.com,27/02/1987
Enter user 2 detail:
MONA,9898798652,mona@gmail.com,27/02/1987
 
User 1
Name: Mona
MobileNumber: 9898798652
Email: mona@gmail.com
Dob: 27/02/1987
 
User 2
Name: MONA
MobileNumber: 9898798652
Email: mona@gmail.com
Dob: 27/02/1987
 
User 1 is same as User 2



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Main {
public static void main(String[] args) throws ParseException, IOException {

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
System.out.println("Enter user 1 detail:");
String line = br.readLine();
String str[] = line.split(",", 4);
User u = new User(str[0], str[1], str[2],sdf.parse(str[3]));
System.out.println("Enter user 2 detail:");
String line2 = br.readLine();
String str2[] = line2.split(",", 4);
User u2 = new User(str2[0], str2[1], str2[2],sdf.parse(str2[3]));
System.out.println();
System.out.println("User 1");
System.out.println(u.toString());
System.out.println();
System.out.println("User 2");
System.out.println(u2.toString());
System.out.println();
if(u.equals(u2))
System.out.println("User 1 is same as User 2");
else
System.out.println("User 1 and User 2 are different");
}
}

-----------------------------------------------------------------------------------------------------------------------
import java.text.SimpleDateFormat;
import java.util.Date;

public class User {

private String name, mobileNumber, email;
private Date DOB;

public User() {
}

public User(String name, String mobileNumber, String email, Date dOB) {
this.name = name;
this.mobileNumber = mobileNumber;
this.email = email;
DOB = dOB;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public String getMobileNumber() {
return mobileNumber;
}

public void setMobileNumber(String mobileNumber) {
this.mobileNumber = mobileNumber;
}

public String getEmail() {
return email;
}

public void setEmail(String email) {
this.email = email;
}

public Date getDOB() {
return DOB;
}

public void setDOB(Date dOB) {
DOB = dOB;
}

SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

@Override
public String toString() {
return "Name: " + name + "\nMobileNumber: " + mobileNumber + "\nEmail: " + email + "\nDob: " + sdf.format(DOB);
}

public boolean equals(User u) {
if (this.getName().equalsIgnoreCase(u.getName())
&& this.getMobileNumber().equalsIgnoreCase(u.getMobileNumber()))
return true;
else
return false;
}

}

Requirement 2:
   In this requirement, you need to validate the email id of the users.

a)Create a class Main with the following static methods:
Method Name	Description
static Boolean validateEmailId(String email)	Validate the email id based on the rules given below. Returns trueif email id is valid else return false

b) While validating email id follow the below rules. The format of the email id is given below
 
            username@domain.TLD

where, TLD - Top Level Domain

1. The email id should start only with alphabets(either uppercase or lowercase).
2. The email username can contain alphabets(either uppercase or lowercase), numbers and the special characters (  .   and   _    ).
3. The email username should not contain any special characters other than " . " and " _ ".
4. After the username special character @ should present.
5. The email domain should contain only alphabets(either uppercase or lowercase).
6. After the email domain, a value dot ( . ) should present.
7. The email Top Level Domain should contain only alphabets(both uppercase and lowercase) and it should have only 2 to 6 characters.

Example: alpha_Beta.01@google.com is a valid email id.
Since the username contain only alphabets, numbers and a special character ( _ and . ), then the @ symbol is present. The domain name contains only alphabets and the symbol dot( . ) and theTop Level Domain has only 3 characters.

Note: Print "Email is valid" if email is valid else print "Email is invalid".
            All the above print statements are present in the main method.

Sample Input and Output 1:

Enter the email to be validated:
alpha_Beta.02@mail.com
Email is valid

Sample Input and Output 2:

Enter the email to be validated:
0alpf&sk@mail.in
Email is invalid



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
public static void main(String args[]) throws IOException {
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
System.out.println("Enter the email to be validated:");
String input = br.readLine();
boolean b = validateEmailId(input);
if (b == true) {
System.out.println("Email is valid");
} else {
System.out.println("Email is invalid");
}
}
public static Boolean validateEmailId(String email) {
String email1="^[a-zA-Z]+[a-zA-Z0-9._]+@+[a-zA-Z]+.[a-zA-Z]{2,6}";
if(email.matches(email1))
return true;
else
return false;
}
}

Requirement 3: 

In this requirement, let's find the total amount that has been credited in a specified month.

Create a class Transaction with the following private attributes 
Attribute Name	Datatype
type	String
upi	UPI
amount	Double
date	Date

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
Transaction (String type, UPI upi , Double amount, Date date)

Create a class UPI with the following private attributes 
Attribute Name	Datatype
number	String
accountNumber	String
transactionList	List<Transaction>

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
UPI (String number, String accountNumber,List<Transaction> transactionList)

The following methods are present in the UPI class 

Method Name	Description
static List<UPI> prefill()	This method returns a List of prefilled UPI objects.
static Double getCreditedAmount(List<UPI> upiList,String month)	This method returns the total amount that has been credited in the given month.

Obtain transaction details from the user and store it in, appropriate UPI objects. Finally, print the total credited amount by calling the required methods.

The Transaction details are given in comma separated format in the below order
type, upi, amount, date

Note : Use "dd/MM/yyyy" for formatting date attribute.
           While printing Double datatype, print one digit after the decimal point. 

Sample Input/Output 1:
 
Enter the number of transactions:
5
credit,joe@okicici,5000,27/01/2018
debit,joe@okicici,1000,28/01/2018
credit,jack@okboi,4000,22/01/2018
credit,monica@okiob,6000,01/02/2018
credit,emma@oksbi,5000,03/02/2018
Enter the month:
January
The total credited amount in the month of January is 9000.0
 
Sample Input/Output 2:
 
Enter the number of transactions:
6
credit,mona@ib,20000,04/05/2018
credit,frank@okhdfc,15000,06/07/2018
debit,leslie@oksbi,1000,06/05/2018
credit,jack@okboi,14000,27/05/2018
debit,emma@oksbi,15000,13/05/2018
credit,frank@okhdfc,1500,29/03/2018
Enter the month:
May
The total credited amount in the month of May is 34000.0




import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class UPI
{
private String number,accountNumber;
private List<Transaction> transactionList;
public UPI() {
// TODO Auto-generated constructor stub
}
public UPI(String number, String accountNumber, List<Transaction> transactionList) {
super();
this.number = number;
this.accountNumber = accountNumber;
this.transactionList = transactionList;
}

public String getNumber() {
return number;
}

public void setNumber(String number) {
this.number = number;
}

public String getAccountNumber() {
return accountNumber;
}

public void setAccountNumber(String accountNumber) {
this.accountNumber = accountNumber;
}

public List<Transaction> getTransactionList() {
return transactionList;
}

public void setTransactionList(List<Transaction> transactionList) {
this.transactionList = transactionList;
}

//Your code here
public static List<UPI> prefill(){
List<UPI> upiList=new ArrayList<>();
upiList.add(new UPI("joe@okicici","298265245213",new ArrayList<Transaction>()));
upiList.add(new UPI("leslie@oksbi","987265254113",new ArrayList<Transaction>()));
upiList.add(new UPI("chandler@okiob","723265243253",new ArrayList<Transaction>()));
upiList.add(new UPI("mona@ib","362261115213",new ArrayList<Transaction>()));
upiList.add(new UPI("charlie@boi","85265243333",new ArrayList<Transaction>()));
upiList.add(new UPI("frank@okhdfc","569265555213",new ArrayList<Transaction>()));
upiList.add(new UPI("emma@oksbi","723265245402",new ArrayList<Transaction>()));
upiList.add(new UPI("jack@okboi","102265245169",new ArrayList<Transaction>()));
upiList.add(new UPI("monica@okiob","208265245359",new ArrayList<Transaction>())); 
return upiList;

}
public static Double getCreditedAmount(List<UPI> upiList,String month)
{
Double amount=0.0;
SimpleDateFormat sdf = new SimpleDateFormat("MMMM");
String type=new String("credit");
for(UPI u:upiList)
{
List<Transaction> li=u.getTransactionList();
for(int i=0;i<li.size();i++)
{
if(month.equals(sdf.format(li.get(i).getDate()) ))
{
if(li.get(i).getType().equals(type))
amount=amount+li.get(i).getAmount();
}
}
}
return amount;
}
}
================================Transaction====================================
import java.util.Date;

public class Transaction 
{
//Your code here
private String type;
private UPI upi;
private Double amount;
private Date date;
public Transaction() {
// TODO Auto-generated constructor stub
}
public Transaction(String type, UPI upi, Double amount, Date date) {
super();
this.type = type;
this.upi = upi;
this.amount = amount;
this.date = date;
}
public String getType() {
return type;
}
public void setType(String type) {
this.type = type;
}
public UPI getUpi() {
return upi;
}
public void setUpi(UPI upi) {
this.upi = upi;
}
public Double getAmount() {
return amount;
}
public void setAmount(Double amount) {
this.amount = amount;
}
public Date getDate() {
return date;
}
public void setDate(Date date) {
this.date = date;
}
}
================================Main======================================

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class Main {
public static void main(String[] args) throws NumberFormatException, IOException, ParseException
{
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
System.out.println("Enter the number of transactions:");
SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
int n=Integer.parseInt(br.readLine());
List<UPI> list=UPI.prefill();
for(int i=0;i<n;i++)
{
String details[]=br.readLine().split(",");
for(UPI u:list)
{
if(u.getNumber().equals(details[1]))
u.getTransactionList().add(new Transaction(details[0],u, 
Double.parseDouble(details[2]),sdf.parse(details[3])));
}
}
System.out.println("Enter the month:");
String month=br.readLine();
Double amount=UPI.getCreditedAmount(list, month);
DecimalFormat d=new DecimalFormat("###0.0");
System.out.println("The total credited amount in the month of "+month+" is "
+d.format(amount));
//Your code here
}
}

Requirement4

In this requirement, you need to sort the debit type transactions in ascending order of amount of transaction.

a) Create a class User with the following private attributes, 
Member Field Name	Type
name	String
mobileNumber	String
email	String
DOB	Date
upi	UPI
transactionList	List<Transaction>

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public User(String name, String mobileNumber, String email, Date dOB, UPI upi, List<Transaction> transactionList)

b) Create a class UPI with the following private attributes, 
Member Field Name	Type
number	String
accountNumber	String
user	User

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public UPI(String number, String accountNumber, User user)

c) Create a class Transaction with the following private attributes, 
Member Field Nae	Type
type	String
upi	UPI
amount	Double
date	Date

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public Transaction(String type, UPI upi, Double amount, Date date)

d) Create the following static methods in UPI method, 
Method Name	Description
List<UPI> prefill()	This method returns a list of upi available. (given in the template)
List<Transaction> filterAndSort(List<UPI> upiList)	This method takes upi list as parameter and returns a transaction list (which are of "debit" type and sorted in ascending order of amount)

The transaction details are given in comma-separated format,
type,upiNumber,amount,date
Date Format : dd/MM/yyyy

When the “Transaction” object is printed, it should display the following format
Print format:
System.out.printf("%-10s%-8s%-10s%s\n","UserName","Type","Amount","Date");
The amount should be printed with 1 decimal digits.

Sample Input and Output: 

Enter the number of transactions:
6
credit,mona@ib,20000,04/05/2018
credit,frank@okhdfc,15000,06/07/2018
debit,leslie@oksbi,1000,06/05/2018
credit,jack@okboi,14000,27/05/2018
debit,emma@oksbi,15000,13/05/2018
credit,frank@okhdfc,1500,29/03/2018
UserName  Type    Amount    Date
Leslie    debit   1000.0    06/05/2018
Emma      debit   15000.0   13/05/2018

MAIN:

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		
		SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
		System.out.println("Enter the number of transactions:");
		
		Integer n=Integer.parseInt(br.readLine());
		String str;
		
		List<UPI> upiList=UPI.prefill();
		
		
		for(int i=0;i<n;i++)
		{
			str=br.readLine();
			String a[]=str.split(",");
			
			for(UPI u:upiList){
			if(u.getNumber().equals(a[1])){
				
				u.getUser().getTransactionList().add(new Transaction(a[0],u,Double.parseDouble(a[2]),sdf.parse(a[3])));
			}
			}
		}
		
		List<Transaction> tList=UPI.filterAndSort(upiList);
		
		System.out.format("%-10s%-8s%-10s%s\n","UserName","Type","Amount","Date");
		for(Transaction t:tList){
			System.out.format("%-10s%-8s%-10s%s\n",t.getUpi().getUser().getName(),t.getType(),t.getAmount(),sdf.format(t.getDate()));
		}
		
	}


Transaction:

}import java.util.*;
public class Transaction implements Comparable<Transaction>{
	
	private String type;
	private UPI upi;
	private Double amount;
	private Date date;
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public UPI getUpi() {
		return upi;
	}
	public void setUpi(UPI upi) {
		this.upi = upi;
	}
	public Double getAmount() {
		return amount;
	}
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	public Date getDate() {
		return date;
	}
	public void setDate(Date date) {
		this.date = date;
	}
	public Transaction(String type, UPI upi, Double amount, Date date) {
		super();
		this.type = type;
		this.upi = upi;
		this.amount = amount;
		this.date = date;
	}
	
	public Transaction()
	{
		super();
	}
	@Override
	public int compareTo(Transaction a) {
		// TODO Auto-generated method stub
		return this.amount.compareTo(a.amount);
	}
}
UPI:
\
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class UPI {

	private String number;
	private String accountNumber;
	private User user;
	
	
	
	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public String getAccountNumber() {
		return accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public static UPI favouriteUPI(List<UPI> upiList) {
		return null;
		
		
	}
	
	public UPI(String number, String accountNumber, User user) {
		super();
		this.number = number;
		this.accountNumber = accountNumber;
		this.user = user;
	}
	
	public UPI()
	{
		super();
	}
	
	public static List<Transaction> filterAndSort(List<UPI> upiList)
	{	List<Transaction> tList=new ArrayList<>();
		String type;
		for(UPI u:upiList){
				for(Transaction t:u.getUser().getTransactionList()){
					if(t.getType().equals("debit")){
						tList.add(t);
					}
				}
		}
		
		Collections.sort(tList);
		
		
		return tList;
	}

	public static List<UPI> prefill() throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		List<UPI> upiList=new ArrayList<>();
		User u;
		UPI upi;
		
		u = new User("Chandler","9876543210","chandler@gmail.com",sdf.parse("31/01/1990"),null,new ArrayList<Transaction>());
		upi = new UPI("chandler@okiob","723265243253",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Mona","9898798652","mona@gmail.com",sdf.parse("27/02/1987"),null,new ArrayList<Transaction>());
		upi = new UPI("mona@ib","362261115213",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Monica","9787621230","monica@gmail.com",sdf.parse("15/09/1988"),null,new ArrayList<Transaction>());
		upi = new UPI("monica@okiob","208265245359",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Joe","9879865898","joe@gmail.com",sdf.parse("23/07/1992"),null,new ArrayList<Transaction>());
		upi = new UPI("joe@okicici","298265245213",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Charlie","9856985620","charlie@gmail.com",sdf.parse("24/05/1982"),null,new ArrayList<Transaction>());
		upi = new UPI("charlie@boi","852652433334",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Frank","9765659820","frank@gmail.com",sdf.parse("13/03/1993"),null,new ArrayList<Transaction>());
		upi = new UPI("frank@okhdfc","569265555213",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Leslie","9595878580","leslie@gmail.com",sdf.parse("26/09/1989"),null,new ArrayList<Transaction>());
		upi = new UPI("leslie@oksbi","987265254113",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Emma","9659659790","emma@gmail.com",sdf.parse("15/03/1993"),null,new ArrayList<Transaction>());
		upi = new UPI("emma@oksbi","723265245402",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		u = new User("Jack","9873213210","jack@gmail.com",sdf.parse("24/01/1983"),null,new ArrayList<Transaction>());
		upi = new UPI("jack@okboi","102265245169",u);
		u.setUpi(upi);
		upiList.add(upi);
		
		return upiList;
	}
}

USER:


import java.util.Date;
import java.util.List;

public class User {
	//Your code here
	private String name;
	private String mobileNumber;
	private String email;
	private Date DOB;
	private UPI upi;
	private List<Transaction> transactionList;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getMobileNumber() {
		return mobileNumber;
	}
	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDOB() {
		return DOB;
	}
	public void setDOB(Date dOB) {
		DOB = dOB;
	}
	public UPI getUpi() {
		return upi;
	}
	public void setUpi(UPI upi) {
		this.upi = upi;
	}
	public List<Transaction> getTransactionList() {
		return transactionList;
	}
	public void setTransactionList(List<Transaction> transactionList) {
		this.transactionList = transactionList;
	}
	public User() {
		super();
		// TODO Auto-generated constructor stub
	}
	public User(String name, String mobileNumber, String email, Date dOB, UPI upi, List<Transaction> transactionList) {
		super();
		this.name = name;
		this.mobileNumber = mobileNumber;
		this.email = email;
		DOB = dOB;
		this.upi = upi;
		this.transactionList = transactionList;
	}
	
	
}




Requirement 5:

In this requirement, let's find the total count of transactions per day.

Create a class Transaction with the following private attributes

Attribute Name	Datatype
type	String
upi	UPI
amount	Double
date	Date

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
Transaction (String type, UPI upi, Double amount, Date date)



Create a Class User with the following private attributes
Attribute Name	Datatype
name	String
mobileNumber	String
email	String
DOB	Date
upi	UPI
transactionList	List<Transaction>

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
User(String name, String mobileNumber, String email, Date dOB, UPI upi, List<Transaction> transactionList)

Create a class UPI with the following private attributes

Attribute Name	Datatype
number	String
accountNumber	String
user	User

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
UPI (String number, String accountNumber,User user)


The following methods are present in the UPI class


Method Name	Description
static List<UPI> prefill()	This method returns a List of prefilled UPI objects.
static Map<Date,Integer> getPerDateTransaction(List<UPI> upiList)	This method returns a map that has date as key and number of transactions in that date as value.


Obtain transaction details from the user and store it in, appropriate User objects. Finally, print the number of transactions each day in chronological order. 

The Transaction details are given in comma separated format in the below order
type, upi, amount, date

Note : Use "dd/MM/yyyy" for formatting date attribute.
           Use System.out.format("%-15s %s\n","Date","Number of Transactions") while printing the details
           Use TreeMap to store the per day count.
Sample Input/Output 1:
 
Enter the number of transactions:
6
credit,mona@ib,20000,20/07/2018
credit,frank@okhdfc,15000,21/07/2018
debit,leslie@oksbi,1000,21/07/2018
credit,jack@okboi,14000,22/07/2018
credit,frank@okhdfc,4500,15/07/2018
debit,emma@oksbi,15000,13/07/2018 
Date	Number of Transactions
13/07/2018	1
15/07/2018	1
20/07/2018	1
21/07/2018	2
22/07/2018	1
 
Sample Input/Output 2:
 
Enter the number of transactions:
7
credit,monica@okiob,6000,01/02/2018
credit,emma@oksbi,5000,01/02/2018
debit,mona@ib,1500,01/02/2018
credit,emma@oksbi,1000,02/02/2018
debit,leslie@oksbi,1000,05/02/2018
credit,frank@okhdfc,1500,05/02/2018
debit,leslie@oksbi,1000,02/02/2018 
Date	Number of Transactions
01/02/2018	3
02/02/2018	2
05/02/2018	2
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class Main 
{
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
		System.out.println("Enter the number of transactions:");
		int n=Integer.parseInt(br.readLine());
		//Your code here
		List<UPI> upiList=UPI.prefill();
		Transaction t[]=new Transaction[n];
		//UPI upi;
		for(int i=0;i<n;i++)
		{
			String details=br.readLine();
			String s[]=details.split(",");
			for(UPI ul:upiList)
			{
				if(ul.getNumber().equals(s[1]))
				{
					t[i]=new Transaction(s[0],new UPI(ul.getNumber(),ul.getAccountNumber(),ul.getUser()),Double.parseDouble(s[2]),sdf.parse(s[3]));
					ul.getUser().getTransactionList().add(t[i]);
				}
			}
			
		}
		Map<Date,Integer> m=UPI.getPerDateTransaction(upiList);
		System.out.format("%-15s%s\n","Date","Number of Transactions");
		for(Map.Entry<Date, Integer> mp:m.entrySet())
		{
			System.out.format("%-15s%s\n",sdf.format(mp.getKey()),mp.getValue());

		}
		
	}
}


Transaction:


import java.util.Date;


public class Transaction {
	//Your code here
	private String type;
	private UPI upi;
	private Double amount;
	private Date date;
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public UPI getUpi() {
		return upi;
	}
	public void setUpi(UPI upi) {
		this.upi = upi;
	}
	public Double getAmount() {
		return amount;
	}
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	public Date getDate() {
		return date;
	}
	public void setDate(Date date) {
		this.date = date;
	}
	public Transaction() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Transaction(String type, UPI upi, Double amount, Date date) {
		super();
		this.type = type;
		this.upi = upi;
		this.amount = amount;
		this.date = date;
	}
	
}UPI:


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class UPI 
{
	//Your code here
	private String number;
	private String accountNumber;
	private User user;
	
	
	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public String getAccountNumber() {
		return accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public UPI() {
		super();
		// TODO Auto-generated constructor stub
	}

	public UPI(String number, String accountNumber, User user) {
		super();
		this.number = number;
		this.accountNumber = accountNumber;
		this.user = user;
	}

	public static List<UPI> prefill() throws ParseException
	{
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        List<UPI> upiList=new ArrayList<>();
        User u;
        UPI upi;
        u = new User("Chandler","9876543210","chandler@gmail.com",sdf.parse("31/01/1990"),null,new ArrayList<Transaction>());
        upi = new UPI("chandler@okiob","723265243253",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Mona","9898798652","mona@gmail.com",sdf.parse("27/02/1987"),null,new ArrayList<Transaction>());
        upi = new UPI("mona@ib","362261115213",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Monica","9787621230","monica@gmail.com",sdf.parse("15/09/1988"),null,new ArrayList<Transaction>());
        upi = new UPI("monica@okiob","208265245359",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Joe","9879865898","joe@gmail.com",sdf.parse("23/07/1992"),null,new ArrayList<Transaction>());
        upi = new UPI("joe@okicici","298265245213",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Charlie","9856985620","charlie@gmail.com",sdf.parse("24/05/1982"),null,new ArrayList<Transaction>());
        upi = new UPI("charlie@boi","852652433334",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Frank","9765659820","frank@gmail.com",sdf.parse("13/03/1993"),null,new ArrayList<Transaction>());
        upi = new UPI("frank@okhdfc","569265555213",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Leslie","9595878580","leslie@gmail.com",sdf.parse("26/09/1989"),null,new ArrayList<Transaction>());
        upi = new UPI("leslie@oksbi","987265254113",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Emma","9659659790","emma@gmail.com",sdf.parse("15/03/1993"),null,new ArrayList<Transaction>());
        upi = new UPI("emma@oksbi","723265245402",u);
        u.setUpi(upi);
        upiList.add(upi);
        u = new User("Jack","9873213210","jack@gmail.com",sdf.parse("24/01/1983"),null,new ArrayList<Transaction>());
        upi = new UPI("jack@okboi","102265245169",u);
        u.setUpi(upi);
        upiList.add(upi);
        return upiList;
    }
	
	public static Map<Date,Integer> getPerDateTransaction(List<UPI> upiList)
	{
		//Your code here
		Map<Date,Integer> pdc=new TreeMap<Date,Integer>();
		List<Date> l=new ArrayList<Date>();
		for(UPI ul:upiList)
		{
			List<Transaction> tList=ul.getUser().getTransactionList();
			for(int i=0;i<tList.size();i++)
			{
			  l.add(tList.get(i).getDate());
			   pdc.put(tList.get(i).getDate(), Collections.frequency(l,tList.get(i).getDate()));

			}

		}
		return pdc;
		
	}
}
USER:

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class User {
	
	private String name;
	private String mobileNumber;
	private String email;
	private Date DOB;
	private  UPI upi;
	private List<Transaction> transactionList=new ArrayList<Transaction>();
	
	
	
	public String getName() {
		return name;
	}



	public void setName(String name) {
		this.name = name;
	}



	public String getMobileNumber() {
		return mobileNumber;
	}



	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}



	public String getEmail() {
		return email;
	}



	public void setEmail(String email) {
		this.email = email;
	}



	public Date getDOB() {
		return DOB;
	}



	public void setDOB(Date dOB) {
		DOB = dOB;
	}



	public UPI getUpi() {
		return upi;
	}



	public void setUpi(UPI upi) {
		this.upi = upi;
	}



	public List<Transaction> getTransactionList() {
		return transactionList;
	}



	public void setTransactionList(List<Transaction> transactionList) {
		this.transactionList = transactionList;
	}


  
	public User(String name, String mobileNumber, String email, Date dOB, UPI upi, List<Transaction> transactionList) {
		super();
		this.name = name;
		this.mobileNumber = mobileNumber;
		this.email = email;
		DOB = dOB;
		this.upi = upi;
		this.transactionList = transactionList;
	}



	public User()
	{
		super();
	}
	
	
	
}





Requirment6


In this requirement, you need to find the user to whom highest amount is debited.

a) Create a class User with the following private attributes, 
Member Field Name	Type
name	String
mobileNumber	String
email	String
DOB	Date
upi	UPI
transactionList	List<Transaction>

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public User(String name, String mobileNumber, String email, Date dOB, UPI upi, List<Transaction> transactionList)

b) Create a class UPI with the following private attributes, 
Member Field Name	Type
number	String
accountNumber	String
user	User

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public UPI(String number, String accountNumber, User user)

c) Create a class Transaction with the following provate attributes, 
Member Field Nae	Type
type	String
upi	UPI
amount	Double
date	Date

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: public Transaction(String type, UPI upi, Double amount, Date date)

d) Create the following static methods in UPI method, 
Method Name	Description
List<UPI> prefill()	This method returns a list of upi available for transaction (given in the template)
UPI favouriteUPI(List<UPI> upiList)	This method takes upi list as parameter and returns a upi object for whom highest amount is debited


The transaction deatils are given in comma separated format,
type,upiNumber,amount,date
Date Format: dd/MM/yyyy

Sample Input and Output:

Enter the number of transactions:
5
debit,joe@okicici,5000,27/01/2018
debit,joe@okicici,1000,28/01/2018
debit,jack@okboi,4000,22/01/2018
debit,monica@okiob,5500,01/02/2018
debit,emma@oksbi,5001,03/02/2018
Maximum amount is transferred to Joe 








FOOD AGGREGRATOR
Requirement-1
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		 		
		System.out.println("Enter user 1 detail:");
		String line=br.readLine();
		String str[]=line.split(",",4);
		User u=new User(str[0],str[1],str[2],str[3]);
		System.out.println("Enter user 2 detail:");
		String line2=br.readLine();
		String str2[]=line2.split(",",4);
		User u2=new User(str2[0],str2[1],str2[2],str2[3]);
		
		System.out.println();
		System.out.println("User 1");
		System.out.println(u.toString());
		System.out.println();
		System.out.println("User 2");
		System.out.println(u2.toString());
		System.out.println();
				
		if(u.equals(u2))
			System.out.println("User 1 is same as User 2");
		else
			System.out.println("User 1 and User 2 are different");
	}
}


public class User {

	private String name, email, phoneNumber, location;

	public User() {
	}

	public User(String name, String email, String phoneNumber, String location) {
		this.name = name;
		this.email = email;
		this.phoneNumber = phoneNumber;
		this.location = location;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	@Override
	public String toString() {
		return "Name: " + name + "\nEmail: " + email + "\nPhoneNumber: " + phoneNumber + "\nLocation: " + location;
	}

	public boolean equals(User u) {
		if (this.getName().equalsIgnoreCase(u.getName()) && this.getEmail().equalsIgnoreCase(u.getEmail()))
			return true;
		else
			return false;
	}

}

Requirement 2:
  In this requirement, you need to validate the email of the User.

a) Create a class Main with the following static methods:
Method Name
Description
static Boolean validateEmail(String email)
Validate the Email based on the rules given below. Returns true if Email is valid else return false
b) While validating email follow the below rules. The format of the email id is given below
 
           username@domain.TLD

where, TLD - Top Level Domain

1. The email should start only with alphabets(lowercase).
2. The username part of email can contain alphabets(lowercase), numbers and the special characters ( .  and _   ).
3. The username part of the email should not contain any special characters other than " . " and " _ ".
4. After the username special character @ should present.
5. The email domain should contain only alphabets(lowercase).
6. After the email domain, a dot ( . ) should be present.
7. The email Top Level Domain should contain only alphabets(lowercase) and it should have only 2 to 6 characters.

Example: harson_Wells.01@google.com is a valid email id.

Note: Print "Email is valid" if email is valid else print "Email is invalid".
      All the above print statements are present in the main method.

[All text in bold corresponds to input]
Sample Input and Output 1:

Enter the email to be validated:
harry@gmail.com
Email is valid

Sample Input and Output 2:

Enter the email to be validated:
jerin$80@yahoo.com
Email is invalid

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		boolean b;
		System.out.println("Enter the email to be validated:");
		String input = reader.readLine();
		b = validateEmail(input);
		if (b == true) {
			System.out.println("Email is valid");
		} else {
			System.out.println("Email is invalid");
		}
	}

	static Boolean validateEmail(String email) {
		String email1 = "^[a-z]{1}+[a-z0-9._]+@+[a-z]+.[a-z]{2,6}";
		if (email.matches(email1))
			return true;
		else
			return false;
	}

}
Requirement-3
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
public class Main {
public static void main(String[] args) throws NumberFormatException, IOException{
List<Item> la=new ArrayList<>();
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
System.out.println("Enter the number of items:");
int n=Integer.parseInt(reader.readLine());
ItemBO x=new ItemBO();
for(int i=0;i<n;i++){
String m[]=reader.readLine().split(",");
Item a=new Item(m[0],Double.parseDouble(m[1]),m[2]);
la.add(a);
}
System.out.println("Enter a search type:\n1.By Type\n2.By Price");
int ch=Integer.parseInt(reader.readLine());
if(ch==1){
System.out.println("Enter the Type:");
la=x.findItem(la,reader.readLine());
}
else if(ch==2){
System.out.println("Enter the price:");
la=x.findItem(la, Double.parseDouble(reader.readLine()));
}
else
{
System.out.println("Invalid choice");
System.exit(0);
}
System.out.printf("%-20s %-5s %s\n","Name","Price","Type");
for(Item n1:la)
System.out.print(n1);
}
}

import java.util.ArrayList;
import java.util.List;
public class ItemBO {
public List<Item> findItem(List<Item> itemList,String type){
List<Item> la=new ArrayList<>();
for(Item i:itemList){
if(i.getType().equals(type))
la.add(i);
}
if(la.isEmpty()){
System.out.println("No such item is present");
System.exit(0);

}
return la;
}

public List<Item> findItem(List<Item> itemList,Double price){
List<Item> la=new ArrayList<>();
for(Item i:itemList){
if(i.getPrice().equals(price))
la.add(i);
}
if(la.isEmpty()){
System.out.println("No such item is present");
System.exit(0);

}
return la;
}
}

import java.text.DecimalFormat;
public class Item {
private String name;
private Double price;
private String type;
public Item(String name, Double price, String type) {
super();
this.name = name;
this.price = price;
this.type = type;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public Double getPrice() {
return price;
}
public void setPrice(Double price) {
this.price = price;
}
public String getType() {
return type;
}
public void setType(String type) {
this.type = type;
}
public Item() {
super();
// TODO Auto-generated constructor stub
}
@Override
public String toString() {
DecimalFormat df=new DecimalFormat("0.0");
return String.format("%-20s %-5s %s\n",name,df.format(price),type);
}
}
Requirement 4:

In this requirement, you need to sort the list of items based on name and price.

a) Create a class Item with the following attributes:

Member Field Name Type name
String
price
Double
type
String
Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Item( String name, Double price, String type )

b) Create the following static methods in the Item class,

Method Name Description static Item createItem(String detail) This method accepts a String. The item detail separated by commas is passed as the argument. Split the details and create an item object and returns it. The item details should be given as a comma-separated value in the below order,
name, type, price

c) The Item class should implement the Comparable interface which sorts the Item list based on name(case-insensitive). While comparing, all the name attributes in the list are unique.

d) Create a class PriceComparator which implements Comparator interface and sort the Item list based on price. While comparing, all the price attributes in the list are unique.

Get the number of Items and item details and create an item list. Sort the Items according to the given option and display the list.

When the “item” object is printed, it should display the following details
Print format:
System.out.format("%-20s %-10s %-12s\n","Name","Price","Type");
Note: Display one digit after decimal point for Double datatype.

Sample Input & Output 1:

Enter the number of items:
4
Paneer Fried Rice,150.0,Veg
Chicken Fried Rice,210.0,NonVeg
Bucket Chicken,479.0,NonVeg
Ghee Roast,75.0,Veg
Enter a type to sort:
1.Sort by Name
2.Sort by Price
1
Name                             Price     Type       
Bucket Chicken        479.0     NonVeg     
Chicken Fried Rice  210.0     NonVeg     
Ghee Roast                 75.0       Veg        
Paneer Fried Rice    150.0     Veg 


Sample Input & Output 2:

Enter the number of items:
4
Paneer Fried Rice,150.0,Veg
Chicken Fried Rice,210.0,NonVeg
Bucket Chicken,479.0,NonVeg
Ghee Roast,75.0,Veg
Enter a type to sort:
1.Sort by Name
2.Sort by Price
2
Name                             Price     Type       
Ghee Roast                 75.0       Veg        
Paneer Fried Rice    150.0     Veg        
Chicken Fried Rice  210.0     NonVeg     
Bucket Chicken        479.0     NonVeg

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
public static void main(String args[]) throws NumberFormatException, IOException{
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
List<Item> la=new ArrayList<>();
System.out.println("Enter the number of items:");
int n=Integer.parseInt(reader.readLine());
for(int i=0;i<n;i++){
String m[]=reader.readLine().split(",");
Item a=new Item(m[0],Double.parseDouble(m[1]),m[2]);
la.add(a);
}
System.out.println("Enter a type to sort:\n1.Sort by Name\n2.Sort by Price");
int ch=Integer.parseInt(reader.readLine());
if(ch==1)
Collections.sort(la);
if(ch==2)
Collections.sort(la,new PriceComparator());
System.out.printf("%-20s %-10s %-12s\n","Name","Price","Type");
for(Item n1:la)
System.out.print(n1);
}
}
import java.util.Comparator;
public class PriceComparator implements Comparator<Item>{
@Override
public int compare(Item i1, Item i2) {
return i1.getPrice().compareTo(i2.getPrice());
}
}
import java.text.DecimalFormat;
public class Item implements Comparable<Item>{
private String name;
private Double price;
private String type;
public Item(String name, Double price, String type) {
super();
this.name = name;
this.price = price;
this.type = type;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public Double getPrice() {
return price;
}
public void setPrice(Double price) {
this.price = price;
}
public String getType() {
return type;
}
public void setType(String type) {
this.type = type;
}
public Item() {
super();
// TODO Auto-generated constructor stub
}
@Override
public String toString() {
DecimalFormat df=new DecimalFormat("0.0");
return String.format("%-20s %-10s %-12s\n",name,df.format(price),type);
}
static Item createItem(String detail){
String m[]=detail.split(",");
Item a=new Item(m[0],Double.parseDouble(m[1]),m[2]);
return a;
}
@Override
public int compareTo(Item i) {
return this.name.
compareToIgnoreCase(i.name);
}
}
Requirement 5:
In this requirement develop a feature to compute the price for every purchase based on the price of each item, quantity and coupon code.

a) Create a class Purchase with the following attributes:

Member Field Name	Type
id				Integer
price				Double
couponCode			String
purchaseDate			java.util.Date
orderList			List<Order>

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Purchase (Integer id, String couponCode, Date purchaseDate, List<Order> orderList)

b) Create the following methods for Purchase class,
  	Method Name						Description
public static void computePrice(List<Purchase> list)	This method accepts a list of purchase objects as arguments and sets the computed price value for each purchase.
c) Create a class Order with the following attributes:
  	Member Field Name	Type
quantity			Integer
item				Item
Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Order( Integer quantity, Item item)

d) Create a class Item with the following attributes:
  	Member Field Name	Type
name				String
price				Double
type				String

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Item (String name, String type, Double price)

e) Create the following methods for Item class,
 
Method Name			Description
public static List<Item> prefill()	This method returns a list of prefilled Item objects

The purchase details should be given as a comma-separated value in the below order,
id, couponCode, purchaseDate
The order details should be given as a comma-separated value in the below order,
quantity, itemName

Print format:
System.out.format("%-5s %-10s %-12s %s\n","Id","Price","Coupon Code","Purchase Date");

Note: use the prefill() method, given in the template, to get the Item objects.
              Display one digit after the decimal point for Double Datatype.

While computing price, multiply the quantity with the item's price in the orderList.
If anyone of the coupon codes is applied, discount the price based on the below criteria.

FIRST Rs.100 discount BUYFIVE Rs.500 discount ORDER50 50% discount ORDER75 75% discount DEAL25 25% discount CHICKEN70 70% discount 
Sample Input and Output:

Enter the number of Purchase
2
Enter purchase detail 1
1,FIRST,12-02-2018
Enter the number of Orders
2
2,Grill
1,Margherita
Enter purchase detail 2
2,ORDER50,13-02-2018
Enter the number of Orders
3
2,Tandoori Chicken
1,Barbeque Chicken
1,Ghee Roast
Id   Price     Coupon Code Purchased Date
1    799.0     FIRST                12-02-2018
2    737.5     ORDER50       13-02-2018
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class Main {

public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
List<Item> itemList = Item.prefill();
List<Purchase> purchaseList = new ArrayList<>();
SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
System.out.println("Enter the number of Purchases");
int n = Integer.parseInt(br.readLine());

for(int i = 1; i <= n; i++) {
System.out.println("Enter purchase detail " + i);
String purchase = br.readLine();
String arr[] = purchase.split(",");
System.out.println("Enter the number of Orders");
List<Order> orderList = new ArrayList<>();
int m = Integer.parseInt(br.readLine());
for(int j = 1; j <= m; j++) {
String order[] = br.readLine().split(",");
Item item = Item.getItem(itemList, order[1]);
orderList.add(new Order(Integer.parseInt(order[0]), item));
}
Purchase p = new Purchase(Integer.parseInt(arr[0]), arr[1], sdf.parse(arr[2]), orderList);
purchaseList.add(p);
}
Purchase.computePrice(purchaseList);
System.out.format("%-5s %-10s %-12s %s\n","Id","Price","Coupon Code","Purchase Date");
for(Purchase p : purchaseList)
System.out.println(p);
}
}


import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class Purchase {
int id;
double price;
String couponCode;
Date purchaseDate;
List<Order> orderList;

public int getId() {
return id;
}

public void setId(int id) {
this.id = id;
}

public double getPrice() {
return price;
}

public void setPrice(double price) {
this.price = price;
}

public String getCouponCode() {
return couponCode;
}

public void setCouponCode(String couponCode) {
this.couponCode = couponCode;
}

public java.util.Date getPurchaseDate() {
return purchaseDate;
}

public void setPurchaseDate(java.util.Date purchaseDate) {
this.purchaseDate = purchaseDate;
}

public List<Order> getOrderList() {
return orderList;
}

public void setOrderList(List<Order> orderList) {
this.orderList = orderList;
}

public Purchase(int id,String couponCode, Date purchaseDate, List<Order> orderList) {
super();
this.id = id;
this.price = price;
this.couponCode = couponCode;
this.purchaseDate = purchaseDate;
this.orderList = orderList;
}

public Purchase() {
super();
}

public static void computePrice(List<Purchase> purchaseList) {
for (Purchase p : purchaseList) {
double total = 0.0;
List<Order> ol = p.getOrderList();
for (Order o : ol) {
total += (o.getItem().getPrice() * o.getQuantity());
}
switch (p.getCouponCode().toUpperCase()) {
case "FIRST":
total -= 100;
break;
case "BUYFIVE":
total -= 500;
break;
case "ORDER50":
total = total - (total * .5);
break;
case "ORDER75":
total = total - (total * .75);
break;
case "DEAL25":
total = total - (total * .25);
break;
case "CHICKEN70":
total = total - (total * .7);
}
p.setPrice(total);
}
}

public String toString() {
SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
DecimalFormat df = new DecimalFormat("#.0");
return String.format("%-5s %-10s %-12s %s", id, df.format(price), couponCode, sdf.format(purchaseDate));
}
}



import java.util.ArrayList;
import java.util.List;

public class Item {
private String name;
private double price;
private String type;

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public double getPrice() {
return price;
}

public void setPrice(double price) {
this.price = price;
}

public String getType() {
return type;
}

public void setType(String type) {
this.type = type;
}

public Item() {
super();
// TODO Auto-generated constructor stub
}

public Item(String name, double price, String type) {
super();
this.name = name;
this.price = price;
this.type = type;
}

public static List<Item> prefill() {

List<Item> list = new ArrayList<>();

list.add(new Item("Paneer Fried Rice", Double.parseDouble("150"), "Veg"));

list.add(new Item("Chicken Fried Rice", Double.parseDouble("210"), "NonVeg"));

list.add(new Item("Bucket Chicken", Double.parseDouble("479"), "Veg"));

list.add(new Item("Ghee Roast", Double.parseDouble("75"), "Veg"));

list.add(new Item("Masal Roast", Double.parseDouble("65"), "Veg"));

list.add(new Item("Grill", Double.parseDouble("250"), "NonVeg"));

list.add(new Item("Tomato Soup", Double.parseDouble("100"), "Veg"));

list.add(new Item("Prawn Fry", Double.parseDouble("185"), "NonVeg"));

list.add(new Item("Mushroom Briyani", Double.parseDouble("140"), "Veg"));

list.add(new Item("Baby Corn Chilli", Double.parseDouble("80"), "Veg"));

list.add(new Item("Barbeque Chicken", Double.parseDouble("400"), "NonVeg"));

list.add(new Item("Veg Extravaganza", Double.parseDouble("99"), "Veg"));

list.add(new Item("Margherita", Double.parseDouble("399"), "Veg"));

list.add(new Item("Tandoori Chicken", Double.parseDouble("500"), "NonVeg"));

list.add(new Item("Mutton Balls", Double.parseDouble("90"), "NonVeg"));

return list;
}
public static Item getItem(List<Item> itemList, String name) {
for(Item i : itemList) {
if(i.getName().equals(name))
return i;
}
return null;
}
}




public class Order {
private int quantity;
private Item item;

public int getQuantity() {
return quantity;
}

public void setQuantity(int quantity) {
this.quantity = quantity;
}

public Item getItem() {
return item;
}

public void setItem(Item item) {
this.item = item;
}

public Order() {
super();
// TODO Auto-generated constructor stub
}

public Order(int quantity, Item item) {
super();
this.quantity = quantity;
this.item = item;
}

}

Requirement 6:
In this requirement develop a feature to find the most valuable customer in a given month.

Create a User class with the following private attributes

Member Field Name	Type
name 				String
email 				String
phoneNumber 		String
location 			String
purchaseList 			List<Purchase>

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
User ( String name, String email, String phoneNumber , String location ,List<Purchase> purchaseList )

The following methods are present in the User class

Method Name description
static List<User> prefill() This method returns a List of User objects.
static User getValuableUser(List<User> userList, String month) This method accepts List of User objects and month name as arguments. This method returns a user object that has the maximum cumulative purchase amount in the specified month. 

Create a Purchase class with the following private attributes
 
Member Field Name 	Type
id 				Integer
price 				Double
couponCode 			String
purchaseDate 		Date
user 				User

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
Purchase(Integer id, Double price, String couponCode, Date purchaseDate, User user)

The inputs to the purchase are given the order below,
id, price, couponCode, purchaseDate, username

Create a driver class called Main. In the main method, obtain purchase details and display the valuable user of the specified month by calling appropriate methods.

Note: The output should be in the format "The valuable user of the month [month name] is [valuable user name] (Refer Input/Output specification)
       Use "dd-MM-yyyy" for the purchaseDate attribute.Sample Input/Output 1:
 
Enter the number of purchases:
4
1,750,FIRST,05-06-2018,Rob
2,1500,DEAL25,05-06-2018,Brandon
3,2500,FIRST,07-07-2018,Joe
4,800,DEAL25,08-06-2018,Rob
Enter the month:
June
The valuable user of the month June is Rob
 
Sample Input/Output 2:

Enter the number of purchases:
5
120,1500,CHICKEN70,06-04-2018,Oliver
160,2500,CHICKEN70,08-04-2018,Harry
190,3000,FIRST,09-04-2018,Oliver
225,4500,BUYFIVE,08-04-2018,Oliver
280,500,BUYFIVE,12-04-2018,Rob
Enter the month:
April
The valuable user of the month April is Oliver

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.List;
public class Main {
 public static void main(String args[]) throws NumberFormatException, IOException, ParseException 
 {
  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
  List<User> userList = User.prefill();
  User u;
  Purchase p;

  
  System.out.println("Enter the number of purchases:");
  int n = Integer.parseInt(br.readLine());

  for(int i=0; i<n; i++) 
  {
	   String input = br.readLine();
	   String arr[] = input.split(",");
	   
	   u = User.getUserObject(userList, arr[4]);
	   p = Purchase.createPurchase(input, u);
	   u.addToPurchaseList(p);
  }
  
  System.out.println("Enter the month:");
  String month = br.readLine();
  u = User.getValuableUser(userList, month);
  System.out.println("The valuable user of the month " + month + " is " + u.getName());
 }
}

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class Purchase {
 private Integer id;
 private Double price;
 private String couponCode;
 private Date purchaseDate;
 private User user;
 static SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
 
 public Purchase() {}
 public Purchase(Integer id, Double price, String couponCode, Date purchaseDate, User user) {
  super();
  this.id = id;
  this.price = price;
  this.couponCode = couponCode;
  this.purchaseDate = purchaseDate;
  this.user = user;
 }
 public Integer getId() {
  return id;
 }
 public void setId(Integer id) {
  this.id = id;
 }
 public Double getPrice() {
  return price;
 }
 public void setPrice(Double price) {
  this.price = price;
 }
 public String getCouponCode() {
  return couponCode;
 }
 public void setCouponCode(String couponCode) {
  this.couponCode = couponCode;
 }
 public Date getPurchaseDate() {
  return purchaseDate;
 }
 public void setPurchaseDate(Date purchaseDate) {
  this.purchaseDate = purchaseDate;
 }
 public User getUser() {
  return user;
 }
 public void setUser(User user) {
  this.user = user;
 }
 
 public static Purchase createPurchase(String detail, User user) throws NumberFormatException, ParseException {
  String arr[] = detail.split(",");
  return new Purchase(Integer.parseInt(arr[0]), Double.parseDouble(arr[1]), arr[2], sdf.parse(arr[3]), user);
 }
}

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class User {

	private String name, email, phoneNumber,location;
	 private List<Purchase> purchaseList;
	 
	 public User() {}
	 public User(String name, String email, String phoneNumber, String location, List<Purchase> purchaseList) {
	  super();
	  this.name = name;
	  this.email = email;
	  this.phoneNumber = phoneNumber;
	  this.location = location;
	  this.purchaseList = purchaseList;
	 }
	 public String getName() {
	  return name;
	 }
	 public void setName(String name) {
	  this.name = name;
	 }
	 public String getEmail() {
	  return email;
	 }
	 public void setEmail(String email) {
	  this.email = email;
	 }
	 public String getPhoneNumber() {
	  return phoneNumber;
	 }
	 public void setPhoneNumber(String phoneNumber) {
	  this.phoneNumber = phoneNumber;
	 }
	 public String getLocation() {
	  return location;
	 }
	 public void setLocation(String location) {
	  this.location = location;
	 }
	 public List<Purchase> getPurchaseList() {
	  return purchaseList;
	 }
	 public void setPurchaseList(List<Purchase> purchaseList) {
	  this.purchaseList = purchaseList;
	 }
	
	 public static List<User> prefill(){
		 List<User> userList=new ArrayList<>();
		 userList.add(new User("Harry","harry@gmail.com","9856231478","NewYork", new ArrayList<Purchase>()));
		 userList.add(new User("Joe","joe@gmail.com","8956231548","Chicago", new ArrayList<Purchase>()));
		 userList.add(new User("Oliver","oliver@gmail.com","7856124589","SanFrancisco", new ArrayList<Purchase>()));
		 userList.add(new User("Danny","danny@gmail.com","9382714568","Los Angeles", new ArrayList<Purchase>()));
		 userList.add(new User("Brandon","brandon@gmail.com","98596215488","Boston", new ArrayList<Purchase>()));
		 userList.add(new User("Rob","rob@gmail.com","9584596662","NewYork", new ArrayList<Purchase>()));
		 return userList;
		 }
	
public static User getValuableUser(List<User> userList,String month){
	double max = 0.0;
	  User user = null;
	  String[] monthNames = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
	  for(User u : userList) {
	   double sum = 0.0;
	   List<Purchase> pl = u.getPurchaseList();
	   for(Purchase p : pl) {
	    Date d = p.getPurchaseDate();
	    Calendar c = Calendar.getInstance();
	    c.setTime(d);
	    if(month.equals(monthNames[c.get(Calendar.MONTH)]))
	     sum += p.getPrice();
	   }
	   
	   if(sum > max) {
	    max = sum;
	    user = u;
	   }
	  }
	  return user;
}

public static User getUserObject(List<User> userList, String name) {
	for(User u : userList) 
	{
	   if(u.getName().equals(name))
	    return u;
	}
	return null;
}

public void addToPurchaseList(Purchase p) {
	  purchaseList.add(p);
}
}

MOVIE
You being an aspiring developer want to step up your programming skills. You decide to create an IMDB clone using your Java skills. To start simple, you decide to have 3 domains namely Movie, Cast, and CastMovieAssignment where the CastMovieAssignment is the bridge domain that links the actors to the movies. Starting from this requirement, you develop features in your application.
 
Requirement 1:
Let’s start off by creating two Movie objects and check whether they are equal.
 
Create a Movie Class with the following attributes:
Member Field Name		Type

name				String		
boxoffice			Double
budget				Double
rating				Double

Mark all the attributes as private

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
Movie ( String name, Double boxoffice, Double budget, Double rating )
When the “Movie” object is printed, it should display the following details: [Override the toString method]
Print format:
Name: "name"
Box Office: "boxoffice"
Budget: "budget"
Rating: "rating"
Two Movies are considered same if they have the same name, and rating. Implement the logic in the appropriate function. (Case – Insensitive) [Override the equals method]

The input format consists of Movie details separated by comma in the below order,
name, boxoffice, budget, rating
The Input to your program would be details of two Movies, you need to display their details as given in "5th point(refer above)" and compare the two Movies and display if the Movies are same or different.

Note: There is an empty line between display statements. Print the empty lines in the main method.
               Display two digits after the decimal point for the Double datatype.
               Box Office and Budget values are represented in USD Crores.

Sample Input and Output 1:
Enter movie 1 detail:
Avengers,151.9,22,8.2
Enter movie 2 detail:
Avengers,151.9,22,8.2

Movie 1
Name: Avengers
Box Office: 151.90
Budget: 22.00
Rating: 8.20

Movie 2
Name: Avengers
Box Office: 151.90
Budget: 22.00
Rating: 8.20

Movie 1 is same as Movie 2

Sample Input and Output 2:Enter movie 1 detail:
Avengers,151.9,22,8.2
Enter movie 2 detail:
Incredible Hulk,13.48,15,6.8

Movie 1
Name: Avengers
Box Office: 151.90
Budget: 22.00
Rating: 8.20

Movie 2
Name: Incredible Hulk
Box Office: 13.48
Budget: 15.00
Rating: 6.80

Movie 1 and Movie 2 are different




MAIN:

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;

public class Main {
	public static void main(String []args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		DecimalFormat df = new DecimalFormat("#.00");
		Movie m[] = new Movie[2];
 		//Your code goes here...
		System.out.println("Enter movie 1 detail:");
		String a[] = br.readLine().split(",");
		m[0] = new Movie(a[0],Double.parseDouble(a[1]),Double.parseDouble(a[2]),Double.parseDouble(a[3]));
		System.out.println("Enter movie 2 detail:");
		//Your code goes here...
		String b[] = br.readLine().split(",");
		m[1] = new Movie(b[0],Double.parseDouble(b[1]),Double.parseDouble(b[2]),Double.parseDouble(b[3]));
		
		for(int i=0;i<2;i++)
		{
			System.out.println();
			System.out.println("Movie "+(i+1));
			System.out.println(m[i]);
		}
		System.out.println();
		
		if(m[0].equals(m[1]))
		{
			System.out.println("Movie 1 is same as Movie 2");
		}
		else
		{
			System.out.println("Movie 1 and Movie 2 are different");
		}
		
	}
}


MOVIE:
import java.text.DecimalFormat;

public class Movie {
	//Your code goes here...
	private String name;
	private Double boxoffice,budget,rating;
	
	
	DecimalFormat df = new DecimalFormat("#.00");
	
	@Override
	public String toString() {
		return String.format("Name: " + getName() + "\nBox Office: " + df.format(getBoxoffice()) + "\nBudget: " + df.format(getBudget()) + "\nRating: " + df.format(getRating()));
	}

	public Movie()
	{
		super();
	}
	
	public Movie(String name, Double boxoffice, Double budget, Double rating) {
		super();
		this.name = name;
		this.boxoffice = boxoffice;
		this.budget = budget;
		this.rating = rating;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getBoxoffice() {
		return boxoffice;
	}

	public void setBoxoffice(Double boxoffice) {
		this.boxoffice = boxoffice;
	}

	public Double getBudget() {
		return budget;
	}

	public void setBudget(Double budget) {
		this.budget = budget;
	}

	public Double getRating() {
		return rating;
	}

	public void setRating(Double rating) {
		this.rating = rating;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((rating == null) ? 0 : rating.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Movie other = (Movie) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equalsIgnoreCase(other.name))
			return false;
		if (rating == null) {
			if (other.rating != null)
				return false;
		} else if (!rating.equals(other.rating))
			return false;
		return true;
	}
	
	
	
}



Movie - Requirement 2

Requirement 2:	
In this requirement develop a feature in which you can search a List of Casts by nationality and dob.

a) Create a Class Cast with the following attributes:
 
Member Field Name

Type

name

String

nationality

String

gender

String

dob

java.util.Date


Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Cast( String name, String nationality, String gender, java.util.Date dob )

b) Create a class CastBO with the following methods,
 

Method Name

Description

public List<Cast> findCast(List<Cast> castList, String nationality)

This method accepts a list of casts and nationality as arguments and returns a list of casts that match with the given nationality.

public List<Cast> findCast(List<Cast> castList, java.util.Date dob)

This method accepts a list of casts and dob as arguments and returns a list of casts that match with the given dob.


The cast details should be given as a comma-separated value in the below order,
name, nationality, gender, dob

Print format:
System.out.format("%-22s %-12s %-8s %s\n","Name","Nationality","Gender", "DOB");

Note: The cast lists are displayed in the main method.
            If any other choice is selected, display "Invalid choice"
            If the search detail is not found, display "No such cast is present"
            Display one digit after the decimal point for Double Datatype.

Sample Input & Output 1:

Enter the number of casts:
4
Michael Jordan,USA,Male,09-02-1987
Letitia Wright,Guyana,Female,31-10-1993
Benedict Cumberbatch,UK,Male,19-07-1976
Tom Hiddleston,UK,Male,09-02-1981
Enter a search type:
1.By Nationality
2.By Date of Birth
1
Enter the nationality:
UK
Name                   Nationality  Gender   DOB
Benedict Cumberbatch   UK           Male     19-07-1976
Tom Hiddleston         UK           Male     09-02-1981

Sample Input & Output 2:

Enter the number of casts:
5
Hugo,Nigeria,Male,04-04-1960
Tim Roth,UK,Male,14-05-1961
Edward Norton,USA,Male,18-08-1969
Chris Hemsworth,Australia,Male,11-08-1983
Tom Hiddleston,UK,Male,09-02-1981
Enter a search type:
1.By Nationality
2.By Date of Birth
2
Enter the date of Birth:
11-08-1983
Name                   Nationality  Gender   DOB
Chris Hemsworth        Australia    Male     11-08-1983




MAIN:


import java.util.List;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Map;
public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		Cast c = new Cast();
		CastBO cb = new CastBO();
		List<Cast> l = new ArrayList<Cast>();
			
		//Your code goes here
		System.out.println("Enter the number of casts:");
		//Your code goes here		
		int n = Integer.parseInt(br.readLine());
		
		for(int i=0;i<n;i++)
		{
			String a[] = br.readLine().split(",");
			 c = new Cast(a[0],a[1],a[2],sdf.parse(a[3]));
			 l.add(c);
		}
		
		System.out.println("Enter a search type:\n1.By Nationality\n2.By Date of Birth");
		//Your code goes here		
		switch(Integer.parseInt(br.readLine()))
		{
			case 1: System.out.println("Enter the nationality:");
					l = cb.findCast(l, br.readLine());
					if(l.isEmpty())
					{
						System.out.println("No such cast is present");
					}
					else
					{
						System.out.format("%-22s %-12s %-8s %s\n","Name","Nationality","Gender","DOB");
						for(Cast cs: l)
						{
							System.out.print(cs);
						}
					}
					break;
					
			case 2: System.out.println("Enter the date of Birth:");
					l = cb.findCast(l, sdf.parse(br.readLine()));
					if(l.isEmpty())
					{
						System.out.println("No such cast is present");
					}
					else
					{
						System.out.format("%-22s %-12s %-8s %s\n","Name","Nationality","Gender","DOB");
						for(Cast cs: l)
						{
							System.out.print(cs);
						}
					}
					break;
					
			default: System.out.println("Invalid choice");
					break;
			
		}
	}
}	



CAST:

import java.text.SimpleDateFormat;
import java.util.Date;

public class Cast {
			//Your code goes here
	private String name,nationality,gender;
	java.util.Date dob;
	
	
	
	@Override
	public String toString() {
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		return String.format("%-22s %-12s %-8s %s\n",getName(),getNationality(),getGender(),sdf.format(getDob()));
	}



	public Cast(String name, String nationality, String gender, Date dob) {
		super();
		this.name = name;
		this.nationality = nationality;
		this.gender = gender;
		this.dob = dob;
	}

	

	public Cast() {
		super();
		// TODO Auto-generated constructor stub
	}



	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public String getNationality() {
		return nationality;
	}


	public void setNationality(String nationality) {
		this.nationality = nationality;
	}


	public String getGender() {
		return gender;
	}


	public void setGender(String gender) {
		this.gender = gender;
	}


	public java.util.Date getDob() {
		return dob;
	}


	public void setDob(java.util.Date dob) {
		this.dob = dob;
	}
	
	
	
	
}


CAST BO:


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class CastBO {
	public List<Cast> findCast(List<Cast> castList,String nationality){
		//Your code goes here
		List<Cast> l = new ArrayList<Cast>();
		for(Cast c:castList)
		{
			if(c.getNationality().equals(nationality))
			{
				l.add(c);
			}
		}
		return l;
	}
	
	public List<Cast> findCast(List<Cast> castList,Date dob){
		//Your code goes here
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		List<Cast> l = new ArrayList<Cast>();
		for(Cast c:castList)
		{
			if(c.getDob().equals(dob))
			{
				l.add(c);
			}
		}
		return l;
	}
}

Movie - Requirement 3

Requirement 3:

Let's store all the details of the given movies and find the top 5 films based on the rating of the film.
 
Create a Movie Class with the following attributes:
Member Field Name

Type

name

String

boxoffice

Double

budget

Double

rating

Double

Mark all the attributes as private

Create / Generate appropriate Getters & Setters
Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
Movie ( String name, Double boxoffice, Double budget, Double rating )
 
c) Create the following static method in Movie class, 
Method Name	Description
public static Movie createMovie(String detail)	This method accepts a string which contains movie details separated by commas. Split the details and create a movie object from the details and return it.
public static List<Movie> getTopFilms(List<Movie> movieList)	This method accepts movieList as an argument and returns the top 5 films list based on the rating provided to that film.The movie details should be given as a comma-separated value in the below order,
Name,Boxoffice,Budget,Rating

Print format: System.out.format("%-22s %-10s %-8s %s\n","Name","Box Office","Budget","Rating");
Note: Display two digit after decimal places for Double datatype.
            Box Office and Budget values are represented in USD Crores.

Sample Input and Output:
Enter the number of movies:
6
Iron Man 1,58.52,14,7.9
Captain America,17.66,25,7.8
Incredible Hulk,13.48,15,6.8
Thor,44.93,15,7
Avengers,151.9,22,8.2
Guardians of Galaxy,86.38,20,8.1 
Name	Box Office	Budget	Rating
Avengers	151.90	22.00	8.20
Guardians of Galaxy	86.38	20.00	8.10
Irom Man 1	58.52	14.00	7.90
Captain America	17.66	25.00	7.80
Thor	44.93	15.00	7.00            





MAIN::

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//Your code goes here...
		Movie m = new Movie();
		List<Movie> l = new ArrayList<Movie>();
		
		System.out.println("Enter the number of movies:");
		//Your code goes here...
		int n = Integer.parseInt(br.readLine());
		
		for(int i=0;i<n;i++)
		{
			m = Movie.createMovie(br.readLine());
			l.add(m);
		}
		
		
		l = Movie.getTopFilms(l);
		System.out.format("%-22s %-10s %-8s %s\n","Name","Box Office","Budget","Rating");
		for(Movie mv:l)
		{
			System.out.print(mv);
		}

	}
}



MOVIE:

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class Movie implements Comparable<Movie> {
		//Your code goes here...
		private String name;
		private Double boxoffice,budget,rating;
		
	

		@Override
		public String toString() {
			return String.format("%-22s %-10.2f %-8.2f %.2f\n",getName(),getBoxoffice(),getBudget(),getRating());
		}

		public Movie()
		{
			super();
		}
		
		public Movie(String name, Double boxoffice, Double budget, Double rating) {
			super();
			this.name = name;
			this.boxoffice = boxoffice;
			this.budget = budget;
			this.rating = rating;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public Double getBoxoffice() {
			return boxoffice;
		}

		public void setBoxoffice(Double boxoffice) {
			this.boxoffice = boxoffice;
		}

		public Double getBudget() {
			return budget;
		}

		public void setBudget(Double budget) {
			this.budget = budget;
		}

		public Double getRating() {
			return rating;
		}

		public void setRating(Double rating) {
			this.rating = rating;
		}

		

	public static List<Movie> getTopFilms(List<Movie> movieList){
		//Your code goes here...
		List<Movie> l = new ArrayList<Movie>();
		Collections.sort(movieList);
		int cnt=0;
		for(Movie m:movieList)
		{
			l.add(m);
			cnt++;
			
			if(cnt==5)
				break;
		}
		
		return l;
		
		
	}
	public static Movie createMovie(String movie) throws ParseException{
		//Your code goes here...
		String b[] = movie.split(",");
		Movie m = new Movie(b[0],Double.parseDouble(b[1]),Double.parseDouble(b[2]),Double.parseDouble(b[3]));
		return m;
	}

	@Override
	public int compareTo(Movie arg0) {
		// TODO Auto-generated method stub
		
		if(this.rating>(arg0.getRating()))
		{
			return -1;
		}
		else if(this.rating<arg0.getRating())
			return 1;
		else
			return 0;
			
			
	}
}


Movie DB - Requirement 4

Requirement 4:
In this requirement develop a feature in which you can get a List of successful movie.
a) Create a class Movie with the following attributes:
 
Member Field Name

Type

name

String

boxoffice

Double

budget

Double

rating

Double


Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:
Movie(String name, Double boxoffice, Double budget, Double rating)

b) Create a class MovieBO with the following methods,
 

Method Name

Description

public List<Movie> getSuccessMovies(List<Movie> movieList)

This method accepts a list of movies as arguments and returns a list of successful movies if none of the movie is successful return empty list. A movie will be successful if profit is greater than or equals to half the budget. Profit is  calculated using box office and budget


The Movie details should be given as a comma-separated value in the below order,
name,box office,budget,rating

Print format:
System.out.format("%-22s %-10s %-8s %s\n","Name","Box Office","Budget","Rating");

Note: The Movie lists are displayed in the main method.
            If the search detail is not found, display "None of the movies are successful"
            Display one digit after the decimal point for Double Datatype.

Sample Input & Output 1 :


Enter the number of movies:
5
Iron Man 1,58.52,14,7.9
Captain America,17.66,25,7.8
Incredible Hulk,13.48,15,6.8
Thor,44.93,15,7
Avengers,151.9,22,8.1
Successful movies are
Name                      Box Office Budget   Rating
Iron Man 1             58.52           14.0          7.9
Thor                         44.93            15.0          7.0
Avengers              51.9               22.0          8.1


MAIN:


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			//Your code goes here
		
		Movie m = new Movie();
		MovieBO mb = new MovieBO();
		List<Movie> l = new ArrayList<Movie>();
		
		System.out.println("Enter the number of movies:");
			//Your code goes here
		int n= Integer.parseInt(br.readLine());
		for(int i=0;i<n;i++)
		{
			String a[] = br.readLine().split(",");
			m = new Movie(a[0],Double.parseDouble(a[1]),Double.parseDouble(a[2]),Double.parseDouble(a[3]));
			l.add(m);
		}
		
		l = mb.getSuccessMovies(l);
		
		if(l.isEmpty())
		{
			System.out.println("None of the movies are successful");
		}
		else
		{
			System.out.println("Successful movies are");
			System.out.format("%-22s %-10s %-8s %s\n","Name","Box Office","Budget","Rating");
			for(Movie mv: l)
			{
				System.out.print(mv);
			}
		}
	}
}



MOVIE:

import java.text.DecimalFormat;

public class Movie {
			//Your code goes here
	private String name;
	private Double boxoffice,budget,rating;
	DecimalFormat df = new DecimalFormat("#.0#");
	@Override
	public String toString() {
		return String.format("%-22s %-10s %-8s %s\n",getName(),df.format(getBoxoffice()),df.format(getBudget()),df.format(getRating()));
	}
	
	public Movie()
	{
		super();
	}
	
	public Movie(String name, Double boxoffice, Double budget, Double rating) {
		super();
		this.name = name;
		this.boxoffice = boxoffice;
		this.budget = budget;
		this.rating = rating;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getBoxoffice() {
		return boxoffice;
	}

	public void setBoxoffice(Double boxoffice) {
		this.boxoffice = boxoffice;
	}

	public Double getBudget() {
		return budget;
	}

	public void setBudget(Double budget) {
		this.budget = budget;
	}

	public Double getRating() {
		return rating;
	}

	public void setRating(Double rating) {
		this.rating = rating;
	}

	
}


MOVIE BO:

import java.util.ArrayList;
import java.util.List;

public class MovieBO {
	public List<Movie> getSuccessMovies(List<Movie> movieList){
		//Your code goes here
		List<Movie> l = new ArrayList<>();
		for(Movie m:movieList)
		{
			double p = m.getBoxoffice() - m.getBudget();
			if(p>=m.getBudget()/2)
			{
				l.add(m);
			}
		}
		return l;
	}
}

Requirement 5:

In this requirement, given the list of movie details and cast details, find the number of movies that each actor is part of.

Create a class Movie with the following private attributes 

Attribute	Datatype
name	String
boxoffice	Double
budget	Double
rating	Double
castMovieAssignmentList	List<CastMovieAssignment>
Generate getters and setters for the above attributes.
Create a default and a parameterized constructors for the above class. The parameterized constructors to take all attributes in the following order 
Movie(String name, Double boxoffice, Double budget, Double rating,List<CastMovieAssignment> castMovieAssignment)

Create a class Cast with the following private attributes 

Attribute	Datatype
name	String
nationality	String
gender	String
dob	Java.Util.Date
castMovieAssignmentList	List<CastMovieAssignment>
Generate getters and setters for the above attributes.
Create a default and a parameterized constructors for the above class. The parameterized constructors to take all attributes in the following order 
Cast(String name, String nationality, String gender, Date dob,List<CastMovieAssignment> castMovieAssignment) 

The Cast class contains the following methods 

Method name	Description
static List<Cast> prefill()	This method returns a list of cast objects.
static TreeMap<String,Integer> getActorWiseCount(List<Cast> list)	This method returns a treemap with actor name as key and number of movies thay are a part of as value.
The prefill method is given in the template which has all the cast objects filled in the castList. 

Create a class CastMovieAssignment with the following private attributes 

Attribute	Datatype
salary	Double
role	String
movie	Movie
cast	Cast
Generate getters and setters for the above attributes.
Create a default and a parameterized constructors for the above class. The parameterized constructors to take all attributes in the following order 
CastMovieAssignment(Double salary, String role, Movie movie,Cast cast)

Create a driver class called Main. In the Main method, obtain movie and cast details. 

The input for a movie is given in the format  (movieName, boxoffice, budget, rating)
The input for cast assignment is given in the format (castName, salary, role)
Get the input and create a CastMovieAssignment object (with movie and cast object in it) then add it to castAssignmentList of both Cast and Movie objects.

The print format is System.out.printf("%-20s %s\n","Actor","Movie Count");
Note: The above print statement should in the main method.
          While creating Movie and Cast objects, the  castMovieAssignmentList should be given as an empty list.

Sample Input and Output: 

Enter the number of movies
3
Black Panther,134.4,20,7.5
Enter the number of cast
3
Chadwick Boseman,9.9,T'Challa
Michael Jordan,4,KillMonger
Letitia Wright,3,Shuri
Civil War,1132100000,25,7.8
Enter the number of cast
4
Chris Evans,9,Steve Rogers
Robert Downey,10,Tony Stark
Sebastian Stan,7.5,Bucky barnes
Chadwick Boseman,9.9,T'Challa
Captain America,17.66,25,7.8
Enter the number of cast
3
Chris Evans,9,Steve Rogers
Sebastian Stan,7.5,Bucky barnes
Hugo,5,Red Skull
Actor                Movie Count
Benedict Cumberbatch 0
Chadwick Boseman     2
Chris Evans          2
Chris Hemsworth      0
Gwyneth Paltrow      0
Hugo                 1
Letitia Wright       1
Mark Ruffalo         0
Michael Jordan       1
Robert Downey        1
Scarlett Johansson   0
Sebastian Stan       2
Tom Hiddleston       0 


MAIN:

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		
	
		Movie m = new Movie();
		
		
		List<CastMovieAssignment> lcm = new ArrayList<CastMovieAssignment>();
		List<Cast> l = Cast.prefill();
		
		System.out.println("Enter the number of movies");
		//write your code here
		int x = Integer.parseInt(br.readLine());
		
		for(int i=0;i<x;i++)
		{	
			String s[] = br.readLine().split(",");
			m = new Movie(s[0],Double.parseDouble(s[1]),Double.parseDouble(s[2]),Double.parseDouble(s[3]),lcm);
			System.out.println("Enter the number of cast");
			int y = Integer.parseInt(br.readLine());
			Cast c = new Cast();
			for(int j=0;j<y;j++)
			{
				String p[] = br.readLine().split(",");
				for(Cast ct:l )
				{
					if(p[0].equals(ct.getName()))
					{
						c=ct;
					}
				}
				CastMovieAssignment cm = new CastMovieAssignment(Double.parseDouble(p[1]),p[2],m,c);
				
				c.getCastMovieAssignmentList().add(cm);
				m.getCastMovieAssignmentList().add(cm);
			}
		}
		
		TreeMap<String,Integer> map = Cast.getActorWiseCount(l);
		 
		System.out.printf("%-20s %s\n","Actor","Movie Count");
		
		for(String s:map.keySet())
		{
			System.out.printf("%-20s %d\n",s,map.get(s));
		}
	}
}


MOVIE:

import java.util.List;

public class Movie {
	
	//write your code here
	String name;
	Double boxoffice,budget,rating;
	List<CastMovieAssignment> castMovieAssignmentList;
	
	public Movie(String name, Double boxoffice, Double budget, Double rating,
			List<CastMovieAssignment> castMovieAssignmentList) {
		super();
		this.name = name;
		this.boxoffice = boxoffice;
		this.budget = budget;
		this.rating = rating;
		this.castMovieAssignmentList = castMovieAssignmentList;
	}
	
	

	public Movie() {
		super();
		// TODO Auto-generated constructor stub
	}



	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getBoxoffice() {
		return boxoffice;
	}

	public void setBoxoffice(Double boxoffice) {
		this.boxoffice = boxoffice;
	}

	public Double getBudget() {
		return budget;
	}

	public void setBudget(Double budget) {
		this.budget = budget;
	}

	public Double getRating() {
		return rating;
	}

	public void setRating(Double rating) {
		this.rating = rating;
	}

	public List<CastMovieAssignment> getCastMovieAssignmentList() {
		return castMovieAssignmentList;
	}

	public void setCastMovieAssignmentList(List<CastMovieAssignment> castMovieAssignmentList) {
		this.castMovieAssignmentList = castMovieAssignmentList;
	}
	
	
}


CAST :


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TreeMap;

public class Cast {
	
	//write your code here
	private String name;
	private String nationality;
	private String gender;
	private Date dob;
	private List<CastMovieAssignment> castMovieAssignmentList;
	
	
	
	public Cast() {
		super();
	}

	public Cast(String name, String nationality, String gender, Date dob,
			List<CastMovieAssignment> castMovieAssignmentList) {
		super();
		this.name = name;
		this.nationality = nationality;
		this.gender = gender;
		this.dob = dob;
		this.castMovieAssignmentList = castMovieAssignmentList;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getNationality() {
		return nationality;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Date getDob() {
		return dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	public List<CastMovieAssignment> getCastMovieAssignmentList() {
		return castMovieAssignmentList;
	}

	public void setCastMovieAssignmentList(List<CastMovieAssignment> castMovieAssignmentList) {
		this.castMovieAssignmentList = castMovieAssignmentList;
	}

	public static List<Cast> prefill() throws ParseException {
		List<Cast> castList=new ArrayList<Cast>();
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		castList.add(new Cast("Robert Downey","USA","Male",sdf.parse("04-04-1965"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Gwyneth Paltrow","USA","Female",sdf.parse("27-09-1972"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Chris Hemsworth","Australia","Male",sdf.parse("11-08-1983"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Tom Hiddleston","UK","Male",sdf.parse("09-02-1981"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Scarlett Johansson","USA","Female",sdf.parse("22-11-1984"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Mark Ruffalo","USA","Male",sdf.parse("22-11-1967"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Benedict Cumberbatch","UK","Male",sdf.parse("19-07-1976"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Chris Evans","USA","Male",sdf.parse("13-06-1981"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Sebastian Stan","USA","Male",sdf.parse("13-08-1982"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Chadwick Boseman","USA","Male",sdf.parse("29-11-1977"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Michael Jordan","USA","Male",sdf.parse("09-02-1987"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Letitia Wright","Guyana","Female",sdf.parse("31-10-1993"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Sebastian Stan","USA","Male",sdf.parse("13-08-1982"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Hugo","Nigeria","Male",sdf.parse("04-04-1960"),new ArrayList<CastMovieAssignment>()));
		return castList;
	}
	
	public static TreeMap<String,Integer> getActorWiseCount(List<Cast> list){
		
		//write your code here
		TreeMap<String,Integer> m = new TreeMap<String,Integer>();
		
		for(Cast c:list)
		{
			m.put(c.getName(),c.getCastMovieAssignmentList().size());
		}
		
		return m;
	}
}



CASTMOVIEASSIGNMENT:


public class CastMovieAssignment {
	
	//write your code here
	Double salary;
	String role;
	Movie moive;
	Cast cast;
	
	public CastMovieAssignment() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	public CastMovieAssignment(Double salary, String role, Movie moive, Cast cast) {
		super();
		this.salary = salary;
		this.role = role;
		this.moive = moive;
		this.cast = cast;
	}
	
	public Double getSalary() {
		return salary;
	}
	public void setSalary(Double salary) {
		this.salary = salary;
	}
	public String getRole() {
		return role;
	}
	public void setRole(String role) {
		this.role = role;
	}
	public Movie getMoive() {
		return moive;
	}
	public void setMoive(Movie moive) {
		this.moive = moive;
	}
	public Cast getCast() {
		return cast;
	}
	public void setCast(Cast cast) {
		this.cast = cast;
	}
	
	
}

Requirement 6:

In this requirement, given the list of movie details and cast details, find the most paid actor in a single movie.

Create a class Movie with the following private attributes 

Attribute	Datatype
name	String
boxoffice	Double
budget	Double
rating	Double
castMovieAssignmentList	List<CastMovieAssignment>
Generate getters and setters for the above attributes.
Create a default and a parameterized constructors for the above class. The parameterized constructors to take all attributes in the following order
Movie(String name, Double boxoffice, Double budget, Double rating, List<CastMovieAssignment> castMovieAssignment)

Create a class Cast with the following private attributes 

Attribute	Datatype
name	String
nationality	String
gender	String
dob	Java.Util.Date
castMovieAssignmentList	List<CastMovieAssignment>
Generate getters and setters for the above attributes.
Create a default and a parameterized constructors for the above class. The parameterized constructors to take all attributes in the following order 
Cast(String name, String nationality, String gender, Date dob, List<CastMovieAssignment> castMovieAssignment) 

The Cast class contains the following methods 

Method name	Description
static List<Cast> prefill()	This method returns a list of cast objects.
static CastMovieAssignment getTopActor(List<Cast> castList)	This method returns the CastMovieAssignment object of the highest paid actor and the corresponding movie.
Create a class CastMovieAssignment with the following private attributes 

Attribute	Datatype
salary	Double
role	String
movie	Movie
cast	Cast
Generate getters and setters for the above attributes.
Create a default and a parameterized constructors for the above class. The parameterized constructors to take all attributes in the following order
CastMovieAssignment(Double salary, String role, Movie movie,Cast cast)


Create a driver class called Main. In the Main method, obtain movie and corresponding cast (CastMovieAssignment) details. Obtain the top paid actor by calling appropriate methods and print the statement "The top paid actor is actorName for movieName" (Sample test cases).
The input for the movie is given in the format  (movieName, boxoffice, budget, rating)
The input for cast assignment is given in the format (castName, salary, role) 

Note: The above print statement should in the main method.
          While creating Movie and Cast objects, the  castMovieAssignmentList should be given as an empty list.
          All the salary details are given in USD Millions.

Sample Input and Output: 

Enter the number of movies
3
Avengers,151.9,22,8.1
Enter the number of cast
3
Robert Downey,10,Tony Stark
Mark Ruffalo,4,Bruce Banner
Chris Evans,9,Steve Rogers
Thor,44.93,15,7
Enter the number of cast
1
Chris Hemsworth,7.5,Thor
Infinity War,66.43,20.2,8.8
Enter the number of cast
3
Robert Downey,12,Tony Stark
Gwyneth Paltrow,1,Pepper Pots
Scarlett Johansson,8.7,Natasha
The top paid actor is Robert Downey for Infinity War



MAIN:


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String[] args) throws IOException, ParseException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		Movie m = new Movie();
		
		
		List<CastMovieAssignment> lcm = new ArrayList<CastMovieAssignment>();
		List<Cast> l = Cast.prefill();
		
		System.out.println("Enter the number of movies");
		//write your code here
		int x = Integer.parseInt(br.readLine());
		
		for(int i=0;i<x;i++)
		{	
			String s[] = br.readLine().split(",");
			m = new Movie(s[0],Double.parseDouble(s[1]),Double.parseDouble(s[2]),Double.parseDouble(s[3]),lcm);
			System.out.println("Enter the number of cast");
			int y = Integer.parseInt(br.readLine());
			Cast c = new Cast();
			for(int j=0;j<y;j++)
			{
				String p[] = br.readLine().split(",");
				for(Cast ct:l )
				{
					if(s[0].equals(ct.getName()))
					{
						c=ct;
					}
				}
				CastMovieAssignment cm = new CastMovieAssignment(Double.parseDouble(p[1]),p[2],m,c);
				
				c.getCastMovieAssignment().add(cm);
				m.getCastMovieAssignment().add(cm);
			}
		}
		
		CastMovieAssignment cma = Cast.getTopActor(l);
		System.out.println("The top paid actor is "+cma.getCast().getName()+" for "+cma.getMovie().getName());
}
}



MOVIE:


import java.util.List;

public class Movie {
	//Your code here
	String name;
	Double boxoffice;
	Double budget;
	Double rating;
	List<CastMovieAssignment> castMovieAssignment;
	public Movie() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Movie(String name, Double boxoffice, Double budget, Double rating,
			List<CastMovieAssignment> castMovieAssignment) {
		super();
		this.name = name;
		this.boxoffice = boxoffice;
		this.budget = budget;
		this.rating = rating;
		this.castMovieAssignment = castMovieAssignment;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Double getBoxoffice() {
		return boxoffice;
	}
	public void setBoxoffice(Double boxoffice) {
		this.boxoffice = boxoffice;
	}
	public Double getBudget() {
		return budget;
	}
	public void setBudget(Double budget) {
		this.budget = budget;
	}
	public Double getRating() {
		return rating;
	}
	public void setRating(Double rating) {
		this.rating = rating;
	}
	public List<CastMovieAssignment> getCastMovieAssignment() {
		return castMovieAssignment;
	}
	public void setCastMovieAssignment(List<CastMovieAssignment> castMovieAssignment) {
		this.castMovieAssignment = castMovieAssignment;
	}

	
}




CAST:

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Cast {
	//Your code here
	String name;
	String nationality;
	String gender;
	Date dob;
	List<CastMovieAssignment> castMovieAssignment;
	
	public static CastMovieAssignment getTopActor(List<Cast> castList){
		//Your code here
		CastMovieAssignment cma = new CastMovieAssignment();
		Double max=0.0;
		for(Cast c:castList)
		{
			List<CastMovieAssignment> l = c.getCastMovieAssignment();
			for(CastMovieAssignment cm:l)
			{
				if(cm.getSalary()>max)
				{
					max = cm.getSalary();
					cma = cm;
				}
			}
		}
		return cma;
		}
	
	public static List<Cast> prefill() throws ParseException
	{
		List<Cast> castList=new ArrayList<>();
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		castList.add(new Cast("Robert Downey","USA","Male",sdf.parse("04-04-1965"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Gwyneth Paltrow","USA","Female",sdf.parse("27-09-1972"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Chris Hemsworth","Australia","Male",sdf.parse("11-08-1983"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Tom Hiddleston","UK","Male",sdf.parse("09-02-1981"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Scarlett Johansson","USA","Female",sdf.parse("22-11-1984"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Mark Ruffalo","USA","Male",sdf.parse("22-11-1967"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Benedict Cumberbatch","UK","Male",sdf.parse("19-07-1976"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Chris Evans","USA","Male",sdf.parse("13-06-1981"),new ArrayList<CastMovieAssignment>()));
		castList.add(new Cast("Sebastian Stan","USA","Male",sdf.parse("13-08-1982"),new ArrayList<CastMovieAssignment>()));
		return castList;
	}

	public Cast(String name, String nationality, String gender, Date dob,
			List<CastMovieAssignment> castMovieAssignment) {
		super();
		this.name = name;
		this.nationality = nationality;
		this.gender = gender;
		this.dob = dob;
		this.castMovieAssignment = castMovieAssignment;
	}

	public Cast() {
		super();
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getNationality() {
		return nationality;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Date getDob() {
		return dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	public List<CastMovieAssignment> getCastMovieAssignment() {
		return castMovieAssignment;
	}

	public void setCastMovieAssignment(List<CastMovieAssignment> castMovieAssignment) {
		this.castMovieAssignment = castMovieAssignment;
	}
	
	
	
	}



CASTMOVIEASSIGNMENT



public class CastMovieAssignment {
	//Your code here
	Double salary;
	String role;
	Movie movie;
	Cast cast;
	public CastMovieAssignment() {
		super();
		// TODO Auto-generated constructor stub
	}
	public CastMovieAssignment(Double salary, String role, Movie movie, Cast cast) {
		super();
		this.salary = salary;
		this.role = role;
		this.movie = movie;
		this.cast = cast;
	}
	public Double getSalary() {
		return salary;
	}
	public void setSalary(Double salary) {
		this.salary = salary;
	}
	public String getRole() {
		return role;
	}
	public void setRole(String role) {
		this.role = role;
	}
	public Movie getMovie() {
		return movie;
	}
	public void setMovie(Movie movie) {
		this.movie = movie;
	}
	public Cast getCast() {
		return cast;
	}
	public void setCast(Cast cast) {
		this.cast = cast;
	}
	
	
	
}
Parking Lot
Requirement 1:
Let’s start off by creating two Vehicle objects and check whether they are equal.
 
1) Create a Vehicle Class with the following attributes:
Member Field Name	Type
registrationNo	String
name	String
type	String
weight	Double
ticket	Ticket

2) Create a Ticket Class with the following attributes:
Member Field Name	Type
ticketNo	String
parkedTime	  java.util.Date
cost	Double
3) Mark all the attributes as private
4) Create / Generate appropriate Getters & Setters
5) Add a default constructor and a parameterized constructor to take in all attributes in the given order
   Vehicle(String registrationNo, String name, String type,Double weight, Ticket ticket)
   Ticket(String ticketNo, java.util.Date parkedTime, Double cost)
 
6) When the “Vehicle” object is printed, it should display the following details: [Override the toString method]
Print format:
Registration No:"registrationNo"
Name:"name"
Type:"type"
Weight:"weight"
Ticket No:"ticketNo"
 

7) Two Vehicles are considered same if they have the same registrationNo, and name. Implement the logic in the appropriate function. (Case – insensitive) [Override the equals method]

8) The input format consists of Vehicle details separated by comma in the below order,
registrationNo, name, type, weight,ticketNo,parkedTime,cost
9) The Input to your program would be details of two Vehicles, you need to display their details as given in "6th point(refer above)" and compare the two Vehicles and display if the Vehicles are same or different.

Note: There is an empty line between display statements. Print the empty lines in main function.
              Display one digit after the decimal point for Double datatype.

Sample Input  & Output 1:

Enter Vehicle 1 details:
KL 75 F 9562,Pulsar,TwoWheeler,200,A1-032,12-05-2018 14:25:23,50
Enter Vehicle 2 details:
KL 75 F 9562,Pulsar,TwoWheeler,200,A1-032,12-05-2018 14:25:23,50

Vehicle 1

Registration No:KL 75 F 9562
Name:Pulsar
Type:TwoWheeler
Weight:200.0
Ticket No:A1-032

Vehicle 2

Registration No:KL 75 F 9562
Name:Pulsar
Type:TwoWheeler
Weight:200.0
Ticket No:A1-032

Vehicle 1 is same as Vehicle 2

Sample Input  & Output 2:

Enter Vehicle 1 details:
AP 19 QS 4556,R3,TwoWheeler,196,A1-002,10-05-2018 11:05:21,100
Enter Vehicle 2 details:
MH 23 F 7856,Gixer,TwoWheeler,221,A1-013,11-05-2018 05:21:40,75

Vehicle 1

Registration No:AP 19 QS 4556
Name:R3
Type:TwoWheeler
Weight:196.0
Ticket No:A1-002

Vehicle 2

Registration No:MH 23 F 7856
Name:Gixer
Type:TwoWheeler
Weight:221.0
Ticket No:A1-013

Vehicle 1 and Vehicle 2 are different

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;


public class Main {
	public static void main(String args[]) throws IOException, ParseException{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss",Locale.ENGLISH);

		System.out.println("Enter Vehicle 1 details:");
		String line=reader.readLine();
		String str[]=line.split(",",7);
		Date d1=formatter.parse(str[5]);
		Ticket t1=new Ticket(str[4],d1,Double.parseDouble(str[6]));
		Vehicle v1=new Vehicle(str[0],str[1],str[2],Double.parseDouble(str[3]),t1);
		
		System.out.print("Enter Vehicle 2 details:\n");
		String line1=reader.readLine();
		String str1[]=line1.split(",",7);
		Date d2=formatter.parse(str1[5]);
		Ticket t2=new Ticket(str1[4],d2,Double.parseDouble(str1[6]));
		Vehicle v2=new Vehicle(str1[0],str1[1],str1[2],Double.parseDouble(str1[3]),t2);

		System.out.println();
		System.out.println("Vehicle 1");
		System.out.println();
		System.out.print(v1 + "\n");
		System.out.println();
		System.out.print("Vehicle 2\n");
		System.out.println();
		System.out.print(v2 + "\n");
		System.out.println();
		//System.out.println(t1.getParkedTime());

		if(v1.getRegistrationNo().equalsIgnoreCase(v2.getRegistrationNo()) && v1.getName().equalsIgnoreCase(v2.getName()))
		{
			System.out.println("Vehicle 1 is same as Vehicle 2");
		}
		else
			System.out.println("Vehicle 1 and Vehicle 2 are different");
	} 
}
import java.util.Date;

public class Ticket {
	
	private String ticketNo;
	private Date parkedTime;
	private double cost;
	public String getTicketNo() {
		return ticketNo;
	}
	public void setTicketNo(String ticketNo) {
		this.ticketNo = ticketNo;
	}
	public Date getParkedTime() {
		return parkedTime;
	}
	public void setParkedTime(Date parkedTime) {
		this.parkedTime = parkedTime;
	}
	public double getCost() {
		return cost;
	}
	public void setCost(double cost) {
		this.cost = cost;
	}
	public Ticket() {
		super();
	}
	public Ticket(String ticketNo, Date parkedTime, double cost) {
		super();
		this.ticketNo = ticketNo;
		this.parkedTime = parkedTime;
		this.cost = cost;
	}
	
}
public class Vehicle {
	
	private String registrationNo, name, type;
	private double weight;
	private Ticket ticket;
	public String getRegistrationNo() {
		return registrationNo;
	}
	public void setRegistrationNo(String registrationNo) {
		this.registrationNo = registrationNo;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public double getWeight() {
		return weight;
	}
	public void setWeight(double weight) {
		this.weight = weight;
	}
	public Ticket getTicket() {
		return ticket;
	}
	public void setTicket(Ticket ticket) {
		this.ticket = ticket;
	}
	public Vehicle() {
		super();
	}
	public Vehicle(String registrationNo, String name, String type, double weight, Ticket ticket) {
		super();
		this.registrationNo = registrationNo;
		this.name = name;
		this.type = type;
		this.weight = weight;
		this.ticket = ticket;
	}
	@Override
	public String toString() {
		return "Registration No:" + registrationNo + "\nName:" + name + "\nType:" + type + "\nWeight:" + weight
				+ "\nTicket No:" + ticket.getTicketNo();
	}
	
	
		//Your code goes here
}
Requirement 2:
Now we are gonna start creating a ParkingLot and add Vehicles to it. Start with creating a ParkingLot and use menu-driven approach to add, remove, display details of the Vehicles in the ParkingLot.

a)Create a Class Vehicle with the following attributes: 

Member Field Name	Type
registrationNo	String
name	String
type	String
weight	Double
ticket	Ticket

b)Create a Class Ticket with the following attributes: 

Member Field Name	Type
ticketNo	String
parkedTime	Date
cost	Double

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: 
              Vehicle( String registrationNo, String name, String type, Double weight,Ticket ticket )
               Ticket(String ticketNo, Date parkedTime, Double cost) 

c)Create a Class ParkingLot with the following attributes: 

Member Field Name	Type
name	String
vehicleList	List<Vehicle>

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: ParkingLot( String name, List<Vehicle> vehicleList ). In constructor pass the vehicleList value as an empty list. Only one ParkingLot will be present at a time.

d) Create the following static method in Vehicle class, 
Method Name	Description
public static Vehicle createVehicle(String detail)	This method accepts a string which contains vehicle details separated by commas. Split the details and create a vehicle object from the details and return it.
The Vehicle and Ticket details should be given as a comma-separated value in the below order,
registrationNo, name, type, weight, ticketNo, parkedTime, cost

e) Create the following methods in ParkingLot class, 
Method Name	Description
public void addVehicleToParkingLot(Vehicle vehicle)	This method accepts a vehicle object and adds the vehicle to the vehicle list of the current ParkingLot.
public Boolean removeVehicleFromParkingLot(String registrationNo)	This method will get the registrationNo of the vehicle and delete the vehicle with the specified registrationNo from the current ParkingLot.
If a vehicle with the given registrationNo found, delete the vehicle and returntrue. If a vehicle with the registrationNo is not found return false.
public void displayVehicles()	This method will display the vehicle list in the current ParkingLot.
If the vehicle list is empty display "No vehicles to show", else
display "Vehicles in [parkingLot name]" and display all the vehicle details in the specified format. Where [parkingLot name] specifies the name of the parkingLot.

After deletion, if true is returned print "Vehicle successfully deleted", else print "Vehicle not found in parkinglot".

Note: The above print statements should be present in the main method.

Print format:  System.out.format("%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No"); 
Display 1 digit after decimal point in Double. 


Sample Input and Output: 
Enter the name of the Parking Lot:
A1
1.Add Vehicle
2.Delete Vehicle
3.Display Vehicles
4.Exit
Enter your choice:
1
TN 56 AS 5489,R15,TwoWheeler,150,A1-001,11-05-2018 15:05:23,50
Vehicle successfully added
1.Add Vehicle
2.Delete Vehicle
3.Display Vehicles
4.Exit
Enter your choice:
3
Vehicles in A1
Registration No Name       Type         Weight  Ticket No
TN 56 AS 5489   R15        TwoWheeler   150.0   A1-001
1.Add Vehicle
2.Delete Vehicle
3.Display Vehicles
4.Exit
Enter your choice:
2
Enter the registration number of the vehicle to be deleted:
TN 56 AS 5489
Vehicle successfully deleted
1.Add Vehicle
2.Delete Vehicle
3.Display Vehicles
4.Exit
Enter your choice:
2
Enter the registration number of the vehicle to be deleted:
TN 56 AS 5489
Vehicle not found in parkinglot
1.Add Vehicle
2.Delete Vehicle
3.Display Vehicles
4.Exit
Enter your choice:
3
No vehicles to show
1.Add Vehicle
2.Delete Vehicle
3.Display Vehicles
4.Exit
Enter your choice:
4



REQUIREMENT-3
Requirement 3:
   In this requirement, you need to validate the registrationNo of the Vehicle.

a)Create a class Main with the following static methods:
Method Name	Description
static Boolean validateRegistrationNo(String registrationNo)	Validate the registrationNo based on the rules given below. Returnstrue if registrationNo is valid else return false

b) While validating a registrationNo follow the below rules.

1.The first 2 UPPERCASE letters indicate the state or Union Territory to which the vehicle is registered.
2. The second part contains 1-2 digit numbers which are the sequential number of a district.
3. Third part contains 0-2 uppercase letters.
4. The fourth part contains 1-4 digit number which is unique to each number plate.
5. Each part is separated by space.

Valid Format:TS 01 K 1562

Note: Print "Registration No. is valid" if registrationNo is valid else print "Registration No. is invalid".
            All the above print statements are present in the main method.

[All text in bold corresponds to input]
Sample Input and Output 1:

Enter the registration no. to be validated:
TS 02 AB 9651
Registration No. is valid

Sample Input and Output 2:

Enter the registration no. to be validated:
UP 458 H 5462
Registration No. is invalid

Sample Input and Output 3:
Enter the registration no. to be validated:
TS 02 9651
Registration No. is valid

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		System.out.println("Enter the registration no. to be validated:");
		String s = reader.readLine();
		if (validateRegistrationNo(s) == true) {
			System.out.println("Registration No. is valid");
		} else {
			System.out.println("Registration No. is invalid");
		}
	}
	static Boolean validateRegistrationNo(String registrationNo) {
		
		Pattern p = Pattern.compile("[A-Z]{2}[\\s]{1}[0-9]{2}[\\s]{1}[A-Z]{2}[\\s]{1}[0-9]{4}$");
		Pattern p1 = Pattern.compile("[A-Z]{2}[\\s]{1}[0-9]{2}[\\s]{1}[0-9]{4}$");

		Matcher m = p.matcher(registrationNo);
		Matcher m1 = p1.matcher(registrationNo);

		if (m.find()||m1.find()) {
			return true;
		} else {
			return false;
		}

	}
}
REQUIREMENT-4
Requirement 4:
In this requirement develop a feature in which you can search a List of Vehicles by type, and parkedTime.

a) Create a Class Vehicle with the following attributes:
 
Member Field Name	Type
registrationNo	String
name	String
type	String
weight	Double
ticket	Ticket

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Vehicle( String registrationNo, String name, String type, Double weight ,Ticket ticket)

b) Create a Class Ticket with the following attributes:
 
Member Field Name	Type
ticketNo	String
parkedTime	Date
cost	Double
Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Ticket( String ticketNo,  Date parkedTime, Double cost)

c) Create a class VehicleBO with the following methods,
 
Method Name	Description
public List<Vehicle> findVehicle(List<Vehicle> vehicleList,String type)	This method accepts a list of vehicles and type as arguments and returns a list of vehicles that matches with the given type.
public List<Vehicle> findVehicle(List<Vehicle> vehicleList,Date parkedTime)	This method accepts a list of vehicles and parkedTime as arguments and returns a list of vehicles that matches with the given parkedTime.

The Vehicle and Ticket details should be given as a comma-separated value in the below order,
registrationNo, name, type, weight,ticketNo,parkedTime,cost

When the “vehicle” object is printed, it should display the following details
Print format:
System.out.format("%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No");

Note: The vehicle lists are displayed in the main method.
            If any other choice is selected, display "Invalid Choice"
            If the search detail is not found, display "No such vehicle is present"
            Display one digit after the decimal point for Double Datatype.

Sample test case 1:
Enter the number of vehicles:
6
AP 19 QS 4556,R3,TwoWheeler,196,A1-002,10-05-2018 11:05:21,100
MP 01 LK 0001,Hornet,TwoWheeler,163,A1-009,09-05-2018 08:13:24,50
MH 23 F 7856,Gixer,TwoWheeler,221,A1-013,11-05-2018 05:21:40,75
GA 45 RF 9515,Duke,TwoWheeler,240,A1-024,10-05-2018 05:16:26,75
GJ 83 AX 0545,Ciaz,FourWheeler,530,B4-030,10-05-2018 08:25:33,150
HR 46 S 4523,Swift,FourWheeler,846,B4-021,09-05-2018 07:14:13,200
Enter a search type:
1.By type
2.By parked time
1
Enter the vehicle type
FourWheeler 
Registration No	Name	Type	Weight	Ticket No
GJ 83 AX 0545	Ciaz	FourWheeler	530.0	B4-030
HR 46 S 4523	Swift	FourWheeler	846.0	B4-021
                
Sample test case 2: 

Enter the number of vehicles:
6
AP 19 QS 4556,R3,TwoWheeler,196,A1-002,10-05-2018 11:05:21,100
MP 01 LK 0001,Hornet,TwoWheeler,163,A1-009,09-05-2018 08:13:24,50
MH 23 F 7856,Gixer,TwoWheeler,221,A1-013,11-05-2018 05:21:40,75
GA 45 RF 9515,Duke,TwoWheeler,240,A1-024,11-05-2018 05:21:40,75
GJ 83 AX 0545,Ciaz,FourWheeler,530,B4-030,10-05-2018 08:25:33,150
HR 46 S 4523,Swift,FourWheeler,846,B4-021,09-05-2018 07:14:13,200
Enter a search type:
1.By type
2.By parked time
2
Enter the parked time:
11-05-2018 05:21:40 
Registration No	Name	Type	Weight	Ticket No
MH 23 F 7856	Gixer	TwoWheeler	221.0	A1-013
GA 45 RF 9515	Duke	TwoWheeler	240.0	A1-024

import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.text.ParseException;

import java.text.SimpleDateFormat;

import java.util.ArrayList;

import java.util.Date;

import java.util.List;

import java.util.Locale;



public class Main {
   
public static void main(String[] args) throws ParseException, IOException{

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss",Locale.ENGLISH);

		System.out.println("Enter the number of vehicles:");
		
		Integer n=Integer.parseInt(br.readLine());
		
		String details[]=new String[n];
		
		List<Vehicle> list=new ArrayList<Vehicle>();

		Vehicle vehicle[]=new Vehicle[n];
		
		Ticket t[]=new Ticket[n];
		
		for(int i=0;i<n;i++)
		{
			
		details[i]=br.readLine();
			
		String s[]=details[i].split(",",7);
			
		Date d=formatter.parse(s[5]);
			
		t[i]=new Ticket(s[4],d,Double.parseDouble(s[6]));

			 vehicle[i]=new Vehicle(s[0],s[1],s[2],Double.parseDouble(s[3]),t[i]);

			list.add(vehicle[i]);
		}

		//Your code here

		System.out.println("Enter a search type:\n1.By type\n2.By parked time");

		int choice=Integer.parseInt(br.readLine());

		VehicleBO VBo=new VehicleBO();

		switch(choice)
		{

		case 1:
		{

			System.out.println("Enter the vehicle type:");

			String type=br.readLine();

			List<Vehicle> byVehicle=VBo.findVehicle(list, type);

			if(byVehicle.size()!=0)
	{

				System.out.format("%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No");
				for(Vehicle v:byVehicle)
					v.toString();
					
			}
			else
				System.out.println("No such vehicle is present");
		}
		break;
		case 2:
		{
			System.out.println("Enter the parked time:");
			String parkedTime=br.readLine();
			List<Vehicle> byVehicle=VBo.findVehicle(list, formatter.parse(parkedTime));
			if(byVehicle.size()!=0)
			{
				System.out.format("%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No");
				for(Vehicle v:byVehicle)
				v.toString();
				
			}
			else
				System.out.println("No such vehicle is present");
			
		}
		break;
		default:System.out.print("Invalid choice");
		}
	}
}
import java.util.Date;

public class Ticket {

	
	private String ticketNo;

	private Date parkedTime;

	private double cost;

	public String getTicketNo() {

		return ticketNo;

	}
	
	public void setTicketNo(String ticketNo) {

		this.ticketNo = ticketNo;

	}
	
	public Date getParkedTime() {

		return parkedTime;

	}
	
	public void setParkedTime(Date parkedTime) {

		this.parkedTime = parkedTime;

	}
	
	public double getCost() {

		return cost;

	}

	public void setCost(double cost) {

		this.cost = cost;
	
	}
	
	public Ticket() {

		super();
	
	}

	public Ticket(String ticketNo, Date parkedTime, double cost) {

		super();
		
		this.ticketNo = ticketNo;
		
		this.parkedTime = parkedTime;
		
		this.cost = cost;
	
	}
	

}
public class Vehicle {

	
	private String registrationNo, name, type;

	private double weight;
	private Ticket ticket;

	public String getRegistrationNo() {

		return registrationNo;
	}

	public void setRegistrationNo(String registrationNo) {

		this.registrationNo = registrationNo;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public String getType() {

		return type;
	}

	public void setType(String type) {

		this.type = type;
	}

	public double getWeight() {

		return weight;
	}

	public void setWeight(double weight) {

		this.weight = weight;
	}

	public Ticket getTicket() {

		return ticket;
	}

	public void setTicket(Ticket ticket) {

		this.ticket = ticket;
	}

	public Vehicle() {

		super();

	}

	public Vehicle(String registrationNo, String name, String type, double weight, Ticket ticket) {

		super();

		this.registrationNo = registrationNo;

		this.name = name;

		this.type = type;

		this.weight = weight;

		this.ticket = ticket;

	}

	@Override

	public String toString() {

		System.out.format("%-15s %-10s %-12s %-7s %s\n",registrationNo,name,type,weight,ticket.getTicketNo());

		return "";

	}
	
	
	
		//Your code goes here
}
import java.util.ArrayList;

import java.util.Date;

import java.util.List;


public class VehicleBO {

	public List<Vehicle> findVehicle(List<Vehicle> vehicleList,String type){

		List<Vehicle> search=new ArrayList<Vehicle>();

		for(Vehicle v:vehicleList)
		{

			if(v.getType().equalsIgnoreCase(type))

				search.add(v);
		}

		return search;
	}
	
	
	public List<Vehicle> findVehicle(List<Vehicle> vehicleList,Date parkedTime){

		List<Vehicle> search=new ArrayList<Vehicle>();
		
		for(Vehicle v:vehicleList)
		{

			if(v.getTicket().getParkedTime().equals(parkedTime))

				search.add(v);
		
		}
		
	return search;

	}

}
REQUIREMENT-5
Requirement 5:

In this requirement, you need to sort the list of vehicles based on weight, and parkedTime.

a) Create a Class Vehicle with the following attributes: 

Member Field Name	Type
registrationNo	String
name	String
type	String
weight	Double
ticket	Ticket

Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order: Vehicle( String registrationNo, String name, String type, Double weight, Ticket ticket )

b) Create the following static methods in the Vehicle class, 

Method Name	Description
static Vehicle createVehicle(String detail)	This method accepts a String. The vehicle detail separated by commas is passed as the argument. Split the details and create a vehicle object and returns it.

c)  Create a Class Ticket with the following attributes: 
Member Field Name	Type
ticketNo	String
parkedTime	Date
cost	Double

Mark all the attributes as private, Create / Generate appropriate Getters & Setters,  Add a default constructor and a parameterized constructor to take in all attributes in the given order: Ticket( String ticketNo,  Date parkedTime, Double cost ) 

The vehicle details should be given as a comma-separated value in the below order,
registrationNo, name, type, weight, ticektNo, parkedTime, cost

d) The Vehicle class should implement the Comparable interface which sorts the Vehicle list based on weight. While comparing, all the weight attributes in the list are unique.

e) Create a class parkedTimeComparator which implements Comparator interface and sort the Vehicle list based on parkingTime. While comparing, all the parkingTime attributes in the list are unique.

Get the number of Vehicles and vehicle details and create a vehicle list. Sort the Vehicles according to the given option and display the list.

When the “vehicle” object is printed, it should display the following details
Print format:
System.out.format( "%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No" );
Display one digit after decimal point for Double datatype. 


Sample test case 1: 

Enter the number of the vehicles:
5
WB 91 F 1649,Vento,FourWheeler,530,B4-035,10-05-2018 20:45:27,300
PN 67 FK 0065,Polo,FourWheeler,543,B4-041,11-05-2018 21:35:56,150
GA 45 RF 9515,Duke,TwoWheeler,240,A1-024,10-05-2018 05:16:26,75
CH 51 P 9636,Ninja,TwoWheeler,287,A1-015,12-05-2018 15:05:30,100
KL 75 F 9562,Pulsar,TwoWheeler,200,A1-032,12-05-2018 14:25:23,50
Enter a type to sort:
1.Sort by weight
2.Sort by parked time
1 
Registration No	Name	Type	Weight	Ticket No
KL 75 F 9562	Pulsar	TwoWheeler	200.0	A1-032
GA 45 RF 9515	Duke	TwoWheeler	240.0	A1-024
CH 51 P 9636 	Ninja	TwoWheeler	287.0	 A1-015
WB 91 F 1649 	Vento	FourWheeler	530.0	B4-035
PN 67 FK 0065	Polo	FourWheeler	543.0	B4-041
              

Sample test case 2: 

Enter the number of the vehicles:
5
MH 23 F 7856,Gixer,TwoWheeler,221,A1-013,11-05-2018 05:21:40,75
GA 45 RF 9515,Duke,TwoWheeler,240,A1-024,10-05-2018 05:16:26,75
WB 91 F 1649,Vento,FourWheeler,530,B4-035,10-05-2018 20:45:27,300
PN 67 FK 0065,Polo,FourWheeler,543,B4-041,11-05-2018 21:35:56,150
GJ 83 AX 0545,Ciaz,FourWheeler,530,B4-030,10-05-2018 08:25:33,150
Enter a type to sort:
1.Sort by weight
2.Sort by parked time
2 
Registration No	Name	Type	Weight	Ticket No
GA 45 RF 9515	Duke	TwoWheeler	240.0	A1-024
GJ 83 AX 0545	Ciaz	FourWheeler	530.0	B4-030
WB 91 F 1649	Vento	FourWheeler	530.0	B4-035
MH 23 F 7856	Gixer	TwoWheeler	221.0	A1-013
PN 67 FK 0065	Polo	FourWheeler	543.0	B4-041

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;

public class Main {
    public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss",Locale.ENGLISH);
		System.out.println("Enter the number of the vehicles:");
		int n;
		Date d1;
		n = Integer.parseInt(br.readLine());
		
		List<Vehicle> productList = new ArrayList<Vehicle>();
		List<Ticket> pro=new ArrayList<>();
		for(int i = 0;i < n;i++)
		{
			String line=br.readLine();
			String str[]=line.split(",");
			d1=formatter.parse(str[5]);
			Ticket t1=new Ticket(str[4],d1,Double.parseDouble(str[6]));
			Vehicle v1=new Vehicle(str[0],str[1],str[2],Double.parseDouble(str[3]),t1);
			productList.add(v1);
			pro.add(t1);
			//productList.add(Vehicle.createVehicle(br.readLine()));
	   }
		int choice;
		System.out.println("Enter a type to sort:\n1.Sort by weight\n2.Sort by parked time");
		choice = Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:Collections.sort(productList);
		
		System.out.format("%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No");
		
			
			for(Vehicle p:productList)
		{
				//System.out.format("%-15s %-10s %-12s %-7s %s \n",p.getRegistrationNo(),p.getName(),p.getType(),p.getWeight(),p.getTicket());
			p.toString();
		}
			
		//Set<Vehicle> s=new TreeSet<Vehicle>(productList);
		
		break;
		case 2:Collections.sort(productList, new ParkedTimeComparator());
		System.out.format("%-15s %-10s %-12s %-7s %s\n","Registration No","Name","Type","Weight","Ticket No");
		
			for(Vehicle p:productList)
		{
			//System.out.format("%-15s %-10s %-12s %-7s %s \n",p.getRegistrationNo(),p.getName(),p.getType(),p.getWeight(),p.getTicket());
			p.toString();
		}
		
		break;
		
		       
		}
	}
}
import java.util.Comparator;

public class ParkedTimeComparator implements Comparator<Vehicle>{

	public int compare(Vehicle s1, Vehicle s2) {
		// TODO Auto-generated method stub
		return s1.getTicket().getParkedTime().compareTo(s2.getTicket().getParkedTime());
	}
}
import java.util.Date;

public class Ticket {
	private String ticketNo;
	private Date parkedTime;
	private double cost;
	public String getTicketNo() {
		return ticketNo;
	}
	public void setTicketNo(String ticketNo) {
		this.ticketNo = ticketNo;
	}
	public Date getParkedTime() {
		return parkedTime;
	}
	public void setParkedTime(Date parkedTime) {
		this.parkedTime = parkedTime;
	}
	public double getCost() {
		return cost;
	}
	public void setCost(double cost) {
		this.cost = cost;
	}
	public Ticket() {
		
	}
	public Ticket(String ticketNo, Date parkedTime, double cost) {
		super();
		this.ticketNo = ticketNo;
		this.parkedTime = parkedTime;
		this.cost = cost;
	}
}
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class Vehicle implements Comparable<Vehicle>{
	private String registrationNo;
	private String name;
	private String type;
	private double weight;
	private Ticket ticket;
	
	public String getRegistrationNo() {
		return registrationNo;
	}
	public void setRegistrationNo(String registrationNo) {
		this.registrationNo = registrationNo;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public double getWeight() {
		return weight;
	}
	public void setWeight(double weight) {
		this.weight = weight;
	}
	public Ticket getTicket() {
		return ticket;
	}
	public void setTicket(Ticket ticket) {
		this.ticket = ticket;
	}
	public Vehicle() {
		
	}
	public Vehicle(String registrationNo, String name, String type, double weight, Ticket ticket) {
		super();
		this.registrationNo = registrationNo;
		this.name = name;
		this.type = type;
		this.weight = weight;
		this.ticket = ticket;
	}
	static SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss",Locale.ENGLISH);
	public static Vehicle createVehicle(String detail) throws ParseException{
			Vehicle s = null;
			Date d1;
			String[] arr = detail.split(",");
			d1=formatter.parse(arr[5]);
			Ticket t1=new Ticket(arr[4],d1,Double.parseDouble(arr[6]));
			s = new Vehicle(arr[0],arr[1],arr[2],Double.parseDouble(arr[3]),t1);
			return s;
			
		}

	public int compareTo(Vehicle s1) {
		
		double s2 = this.getWeight();
		double s3 = s1.getWeight();
		if (s2>s3)
			return 1;
		else if(s2<s3)
			return -1;
		else 
			return 0;
	}
	@Override
	public String toString() {
		System.out.format("%-15s %-10s %-12s %-7s %s\n",registrationNo,name,type,weight,ticket.getTicketNo());
	
	return "";
	}
	
	
}
REQUIREMENT-6
Requirement 6:
In this requirement, given a list of vehicles, you need to find type wise count of vehicles.

a)Create a Class Vehicle with the following attributes:
Member Field Name	Type
registrationNo	String
name	String
type	String
weight	Double


Mark all the attributes as private, Create / Generate appropriate Getters & Setters, Add a default constructor and a parameterized constructor to take in all attributes in the given order:  Vehicle(String registrationNo, String name, String type,Double weight)

b) Create the following static method in Vehicle class,
Method name	Description
public static Vehicle createVehicle(String detail)	This method accepts a string which contains vehicle details separated by commas. Split the details and create a vehicle object from the details and return it.
public static Map<String,Integer> typeWiseCount(List<Vehicle>vehicleList)	This method accepts a list of vehicles and returns a tree map with typewise count of vehicles.

The Vehicle details should be given as a comma-separated value in the below order,
registrationNo, name, type, weight 

Print format: 
System.out.format("%-15s %s\n","Type","No. of Vehicles"); 

Sample Input and Output 1: 

Enter the number of vehicles
6
MP 01 LK 0001,Hornet,TwoWheeler,163
GA 45 RF 9515 ,Duke ,Two Wheeler,240
CH 51 P 9636 ,Ninja ,Two Wheeler,287
UP 12 FV 4681,Rapid,FourWheeler,684
WB 91 F 1649,Vento,FourWheeler,530
PN 67 FK 0065,Polo,FourWheeler,543
Type            No. of Vehicles
FourWheeler     3
TwoWheeler      3

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		
				
		System.out.println("Enter the number of vehicles");
		
		int n;
		Vehicle pr=new Vehicle();
		List<Vehicle> vehicleList=new ArrayList<Vehicle>();
		n=Integer.parseInt(br.readLine());
		for(int i=0;i<n;i++)
		{
			String line=br.readLine();
			Vehicle pp=Vehicle.createVehicle(line);
			vehicleList.add(pp);
			
			
		}
		System.out.format("%-15s %s\n","Type","No. of Vehicles");
		Map<String,Integer> pn=Vehicle.typeWiseCount(vehicleList);
		for(Map.Entry<String,Integer> entry : pn.entrySet())
		{
			System.out.format("%-15s %s\n",entry.getKey(),entry.getValue());
		}
		
		
		//write your code here
		
	}
}
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Vehicle {
	private String registrationNo;
	private String name;
	private String type;
	private double weight;
	//write your code here

	
	
	public String getRegistrationNo() {
		return registrationNo;
	}

	public void setRegistrationNo(String registrationNo) {
		this.registrationNo = registrationNo;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public double getWeight() {
		return weight;
	}

	public void setWeight(double weight) {
		this.weight = weight;
	}
	public Vehicle()
	{
		
	}
	
public Vehicle(String registrationNo, String name, String type, double weight) {
		super();
		this.registrationNo = registrationNo;
		this.name = name;
		this.type = type;
		this.weight = weight;
	}

public static Vehicle createVehicle(String line) {
	Vehicle p=null;
	String[] arr=line.split(",",4);
	p=new Vehicle(arr[0],arr[1],arr[2],Double.parseDouble(arr[3]));
	
	
	return p;
		//write your code here
		
	}
	public static Map<String,Integer> typeWiseCount(List<Vehicle> vehicleList) {
		Map<String,Integer> cmap=new TreeMap();
		int n=0;
		for(Vehicle p:vehicleList) {
			if(cmap.containsKey(p.getType()))
			{
				
				n=cmap.get(p.getType());
				n++;
				cmap.put(p.getType(),n);
				
				
			}
			else
				cmap.put(p.getType(),1);
		}
		
		
		
		return cmap;
		
		//write your code here		
		
	}
}
SEAT REQUIREMENT-1

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException, NumberFormatException {
		int seatNo;
		String type;
		double price;
		String passengerName, gender;
		BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
		Seat s[] = new Seat[2];
		// System.out.println();
		for (int i = 0; i < 2; i++) {
			System.out.println("Enter seat " + (i + 1) + " detail:");
			String Line = b.readLine();
			String str1[] = Line.split(",", 5);
			seatNo = Integer.parseInt(str1[0]);
			type = str1[1];
			price = Double.parseDouble(str1[2]);
			passengerName = str1[3];
			gender = str1[4];
			s[i] = new Seat(seatNo, type, price, passengerName, gender);
		}
		System.out.println();
		for (int i = 0; i < 2; i++) {
			System.out.println("Seat " + (i + 1) + ":");
			String s1 = s[i].toString();
			System.out.println(s1);
			System.out.println();
		}
		if (s[0].getSeatNo() == (s[1].getSeatNo())
				&& s[0].getType().toLowerCase().equals(s[1].getType().toLowerCase())) {
			System.out.println("Seat 1 is same as Seat 2");
		} else {
			System.out.println("Seat 1 and Seat 2 are different");
		}
	}

}

public class Seat {

	private int seatNo;
	private String type;
	private double price;
	private String passengerName, gender;

	public int getSeatNo() {
		return seatNo;
	}

	public void setSeatNo(int seatNo) {
		this.seatNo = seatNo;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public String getPassengerName() {
		return passengerName;
	}

	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Seat() {

	}

	public Seat(int seatNo, String type, double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.price = price;
		this.passengerName = passengerName;
		this.gender = gender;
	}

	@Override
	public String toString() {
		return "Seat No:" + seatNo + "\nType:" + type + "\nPrice:" + String.format("%.1f", price) + "\nPassenger Name:"
				+ passengerName + "\nGender:" + gender;
	}

}
REQUIREMENT-2
import java.io.BufferedReader;
import java.io.IOException;

import java.io.InputStreamReader;

public class Main 
{
	public static void main(String arge[]) {
		
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	
	
		
System.out.println("Enter the reference id of the ticket:");
	
System.out.println("Enter the date of journey of the ticket:");
	
System.out.println("1.Add Seat\n2.Delete Seat\n3.Display Seats\n4.Exit\nEnter your choice:");
	
//write your code here
	}
}
public class Seat {
	
	//write your code here
	
	public static Seat createSeat(String line)  {
		//write your code here
	}
}

public class Ticket {
	
	//write your code here
	
	public void addSeatToTicket(Seat seat) {
		//write your code here
	}
	
	public Boolean removeSeatFromTicket(Integer seatNo) {
		//write your code here	
	}
	
	public void displaySeats() {
		//write your code here
	}
}
REQUIREMENT 3
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the RefId to be validated:");
		String refId = r.readLine();
		boolean b = validateRefId(refId);
		if (b)
			System.out.println("RefId is valid");
		else
			System.out.println("RefId is invalid");
	}

	static Boolean validateRefId(String refId) {
		if (refId.matches("[A-Z]{2,4}[-][A-Z0-9]{3,4}[ ][A-Z]{2,4}[-][A-Z0-9]{3,4}"))
			return true;
		else
			return false;
	}

}
REQUIREMENT-6
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Main {

	public static void main(String args[]) throws NumberFormatException, IOException, ParseException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of seats");
		int n;
		Seat pr = new Seat();
		List<Seat> productList = new ArrayList<Seat>();
		n = Integer.parseInt(br.readLine());
		for (int i = 0; i < n; i++) {
			String line = br.readLine();
			Seat pp = Seat.createSeat(line);
			productList.add(pp);
		}
		System.out.format("%-15s %s\n", "Gender", "No. of Seats");
		Map<String, Integer> pn = Seat.genderWiseCount(productList);
		for (Map.Entry<String, Integer> entry : pn.entrySet()) {
			System.out.format("%-15s %s\n", entry.getKey(), entry.getValue());
		}

	}
} import java.text.ParseException;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Seat {

	private int seatNo;
	private String type;
	private double price;
	private String passengerName, gender;

	public int getSeatNo() {
		return seatNo;
	}

	public void setSeatNo(int seatNo) {
		this.seatNo = seatNo;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public String getPassengerName() {
		return passengerName;
	}

	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Seat() {
		super();
	}

	public Seat(int seatNo, String type, double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.price = price;
		this.passengerName = passengerName;
		this.gender = gender;
	}

	public static Seat createSeat(String detail) throws NumberFormatException, ParseException {
		Seat p = null;
		String[] arr = detail.split(",", 5);
		p = new Seat(Integer.parseInt(arr[0]), arr[1], Double.parseDouble(arr[2]), arr[3], arr[4]);

		return p;

	}

	public static Map<String, Integer> genderWiseCount(List<Seat> productList) {

		Map<String, Integer> cmap = new TreeMap();
		int n = 0;
		for (Seat p : productList) {
			if (cmap.containsKey(p.getGender())) {

				n = cmap.get(p.getGender());
				n++;
				cmap.put(p.getGender(), n);

			} else
				cmap.put(p.getGender(), 1);
		}

		return cmap;

	}
}

DEVELOPER REQUIREMENT-1
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		//Your code goes here
		System.out.println("Enter developer 1 details:");
		String d1=reader.readLine();
		String[] arr1=d1.split(",");
		Developer dev1=new Developer(arr1[0],arr1[1]);
		
		//Your code goes here
		System.out.println("Enter developer 2 details:");
		//Your code goes here
		String d2=reader.readLine();
		String[] arr2=d2.split(",");
		Developer dev2=new Developer(arr2[0],arr2[1]);
		System.out.println();
		System.out.println("Developer 1");
		System.out.println(dev1);
		System.out.println();
		System.out.println("Developer 2");
		System.out.println(dev2);
		System.out.println();
		if(dev1.equals(dev2))
		{
			System.out.println("Developer 1 is same as Developer 2");
		}
		else
		{
			System.out.println("Developer 1 and Developer 2 are different");
		}
	} 
}
public class Developer {
	
//Your code goes here
	private String name;
	
private String email;
	
public String getName() {
		
return name;
	}
	
public void setName(String name) {
		
this.name = name;
	}
	
public String getEmail() {
		
return email;
	}
	
public void setEmail(String email) {
		
this.email = email;
	}
	
public Developer(String name, String email) {
		
super();
		
this.name = name;
		
this.email = email;
	}
	
public Developer() {
		
super();
		
// TODO Auto-generated constructor stub
	}
	
@Override
	
public boolean equals(Object o) 
	{
		
boolean check=false;
		
Developer d=(Developer) o;
		
if(this.name.equalsIgnoreCase(d.getName())&&this.email.equals(d.getEmail()))
		
{
			
check=true;
		
}
		
return check;
	}
	
@Override
	
public String toString() {
		
return "Name:" + name + "\nEmail:" + email;
	
}
	
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {

    public static void main(String[] args) throws IOException{
    	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    	
    	System.out.println("Enter the email to be validated:");
    	//Your code goes here
    	String mailId=reader.readLine();
    	System.out.println(validateEmail(mailId)?"Email is valid":"Email is invalid");
 }
    
 static Boolean validateEmail(String email)
 {
	 Boolean check=false;
	 if(email.matches("[A-Za-z]{1}[a-zA-Z0-9._]*[@]{1}[a-zA-Z]+[.]{1}[a-zA-Z]{2,6}"))
	 {
		 check=true;
	 }
	 return check;
 } 
}
3
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				
		System.out.println("Enter the number of Apps:");
		int n=Integer.parseInt(br.readLine());
		List<App> appList =new ArrayList<App>();
		for(int i=0;i<n;i++){
			String s=br.readLine();
			String arr[]=s.split(",");
			App app=new App(arr[0],arr[1],Integer.parseInt(arr[2]),Double.parseDouble(arr[3]));
			appList.add(app);
		}
		
		System.out.println("Enter a search type:\n1.By Category\n2.By Size");
		
		//write your code here
	    int ch=Integer.parseInt(br.readLine());
	    AppBO ap=new AppBO();
	    switch(ch){
	    case 1:
	    	System.out.println("Enter the Category:");
	    	String category=br.readLine();
	    	
	    	List<App> app1=ap.findApp(appList, category);
	    	if(app1.size()>0)
	    	{
	    	String result=String.format("%-10s %-15s %-5s %s","Name","Category","Size","No. Of Downloads");
	    	System.out.println(result);
	    	for(App a:app1){
	    	System.out.println(a);
	    	}
	    	}
	    	else
	    	{
	    		System.out.println("No such app is present");
	    	}
	    	
	    	break;
	    case 2:
	    	System.out.println("Enter the size:");
	    	Double size=Double.parseDouble(br.readLine());
	    	List<App> app2=ap.findApp(appList, size);
	    	if(app2.size()>0)
	    	{
	    	String result=String.format("%-10s %-15s %-5s %s","Name","Category","Size","No. Of Downloads");
	    	System.out.println(result);
	    	for(App a:app2)
	    	{
	    	System.out.println(a);
	    	}
	    	}
	    	else
	    	{
	    		System.out.println("No such app is present");
	    	}
	    	break;
	    default:
	    	System.out.println("Invalid Choice");
	    }
		
	}
}
import java.util.ArrayList;
import java.util.List;

public class AppBO {
	public List<App> findApp(List<App> appList, String category) {
		//write your code here
		List<App> finalApp=new ArrayList<App>();
		for(App a:appList){
			if(a.getCategory().equals(category)){
				finalApp.add(a);
			}
		}
		return finalApp;
	}
	
	public List<App> findApp(List<App> appList, Double size) {
		//write your code here
		List<App> finalApp=new ArrayList<App>();
		for(App a:appList){
			if(a.getSize()<size){
				finalApp.add(a);
			}
		}
		return finalApp;
	}
}
import java.text.DecimalFormat;

public class App {
	
	//write your code here
	private String name;
	private String category;
	private Integer noOfDownloads;
	private Double size;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public Integer getNoOfDownloads() {
		return noOfDownloads;
	}
	public void setNoOfDownloads(Integer noOfDownloads) {
		this.noOfDownloads = noOfDownloads;
	}
	public Double getSize() {
		return size;
	}
	public void setSize(Double size) {
		this.size = size;
	}
	public App() {
		super();
		// TODO Auto-generated constructor stub
	}
	public App(String name, String category, Integer noOfDownloads, Double size) {
		super();
		this.name = name;
		this.category = category;
		this.noOfDownloads = noOfDownloads;
		this.size = size;
	}
	@Override
	public String toString() {
		DecimalFormat df=new DecimalFormat(".#");
		String result=String.format("%-10s %-15s %-5s %s",name,category,df.format(size),noOfDownloads);
		return result;
	}
	
	
}
REQUIREMENT-4
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of apps:");
		//Your code here
		int app=Integer.parseInt(br.readLine());
	
		List<App> appList=new ArrayList<App>();
		for(int i=0;i<app;i++)
		{
			String str=br.readLine();
			String arr[]=str.split(",");
			App a=new App(arr[0],arr[1],Integer.parseInt(arr[2]),Double.parseDouble(arr[3]));
			appList.add(a);
		}
		System.out.format("%-15s %s\n","Category","Count");
		Map<String,Integer> map1=App.categoryWiseCount(appList);
		for(Map.Entry<String, Integer> mp:map1.entrySet())
		{
			System.out.format("%-15s %s\n",mp.getKey(),mp.getValue());
		}
	}
}
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class App {
	//Your code here
	private String name;
	private String category;
	private Integer noOfDownloads;
	private Double size;
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public Integer getNoOfDownloads() {
		return noOfDownloads;
	}

	public void setNoOfDownloads(Integer noOfDownloads) {
		this.noOfDownloads = noOfDownloads;
	}

	public Double getSize() {
		return size;
	}

	public void setSize(Double size) {
		this.size = size;
	}
	public App() {
		super();
		// TODO Auto-generated constructor stub
	}

	public App(String name, String category, Integer noOfDownloads, Double size) {
		super();
		this.name = name;
		this.category = category;
		this.noOfDownloads = noOfDownloads;
		this.size = size;
	}

	public static Map<String,Integer> categoryWiseCount(List<App> appList) {
		//Your code here
		Map<String,Integer> catMap=new TreeMap<>();
		for(App a:appList)
		{
			int count=0;
			for(App a1:appList)
			{
				if(a.getCategory().equals(a1.getCategory()))
				{
					count++;
				}
			}
			catMap.put(a.getCategory(), count);
		}
		return catMap;
	}
}
REQUIREMENT-5
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of reviews:");
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		//Your code here
		int nor=Integer.parseInt(br.readLine());
		List<Review> rlist=new ArrayList<Review>();
 		for(int i=0;i<nor;i++)
		{
			String str=br.readLine();
			String arr[]=str.split(",");
			rlist.add(new Review(arr[0],arr[1],arr[2],Double.parseDouble(arr[3]),sdf.parse(arr[4])));
		}
 		System.out.println("Enter a type to sort:\n1.Sort by rating\n2.Sort by posted date");
 		int search=Integer.parseInt(br.readLine());
 		switch(search)
 		{
 		case 1:
 			Collections.sort(rlist);
 			System.out.format("%-15s %-20s %-15s %-10s %s\n","Reviewer Name","Reviewer Email","Description","Rating","Posted Date"); 
  			for(int r=0;r<rlist.size();r++)
 			{
 				System.out.print(rlist.get(r));
 			}
 			break;
 		case 2:
 			Collections.sort(rlist,new PostedDateComparator());
 			System.out.format("%-15s %-20s %-15s %-10s %s\n","Reviewer Name","Reviewer Email","Description","Rating","Posted Date");
 			for(int r=0;r<rlist.size();r++)
 			{
 				System.out.print(rlist.get(r));
 			}
 			break;
 		}
	}
}
import java.util.Comparator;

public class PostedDateComparator implements Comparator<Review>{

	@Override
	public int compare(Review r1, Review r2) {
		// TODO Auto-generated method stub
		return r1.getPostedDate().compareTo(r2.getPostedDate());
	}
	//Your code here
}
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
public class Review implements Comparable<Review>{
	//Your code here	
	private String reviewerName;
	private String reviewerEmail;
	private String description;
	private Double rating;
	private java.util.Date postedDate;
	public String getReviewerName() {
		return reviewerName;
	}
	public void setReviewerName(String reviewerName) {
		this.reviewerName = reviewerName;
	}
	public String getReviewerEmail() {
		return reviewerEmail;
	}
	public void setReviewerEmail(String reviewerEmail) {
		this.reviewerEmail = reviewerEmail;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public Double getRating() {
		return rating;
	}
	public void setRating(Double rating) {
		this.rating = rating;
	}
	public java.util.Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(java.util.Date postedDate) {
		this.postedDate = postedDate;
	}
	public Review(String reviewerName, String reviewerEmail, String description, Double rating, Date postedDate) {
		super();
		this.reviewerName = reviewerName;
		this.reviewerEmail = reviewerEmail;
		this.description = description;
		this.rating = rating;
		this.postedDate = postedDate;
	}
	public Review() {
		super();
		// TODO Auto-generated constructor stub
	}
	@Override
	public int compareTo(Review o) 
	{	
		return this.rating.compareTo(o.getRating());
	}
	@Override
	public String toString() {
		DecimalFormat df=new DecimalFormat(".#");
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		return String.format("%-15s %-20s %-15s %-10s %s\n",reviewerName,reviewerEmail,description,df.format(rating),sdf.format(postedDate));
	}
}
REQUIREMENT-6
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				
		System.out.println("Enter the number of reviews:");
		
		//write your code here
		int nor=Integer.parseInt(br.readLine());
		List<App> appList=App.prefill();
		for(int i=0;i<nor;i++){
			String str=br.readLine();
		    String arr[]=str.split(",");
		    SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		    for(App app:appList){
		    	if(app.getName().equals(arr[5])){
		    Review r=new Review(arr[0],arr[1],arr[2],Double.parseDouble(arr[3]),sdf.parse(arr[4]),app);
		    app.getReviewList().add(r);
		    	}
		    	
		    }
		    
		    }
		
		App a=App.getTrendingApp(appList);
		System.out.println("The trending app is "+a.getName());
	}
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class App {
	
	//write your code here
	private String name;
	private String category;
	private Integer noOfDownloads;
	private Double size;
	private List<Review> reviewList;
	
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public Integer getNoOfDownloads() {
		return noOfDownloads;
	}

	public void setNoOfDownloads(Integer noOfDownloads) {
		this.noOfDownloads = noOfDownloads;
	}

	public Double getSize() {
		return size;
	}

	public void setSize(Double size) {
		this.size = size;
	}

	public List<Review> getReviewList() {
		return reviewList;
	}

	public void setReviewList(List<Review> reviewList) {
		this.reviewList = reviewList;
	}

	public App() {
		super();
		// TODO Auto-generated constructor stub
	}

	public App(String name, String category, Integer noOfDownloads, Double size, List<Review> reviewList) {
		super();
		this.name = name;
		this.category = category;
		this.noOfDownloads = noOfDownloads;
		this.size = size;
		this.reviewList = reviewList;
	}

	public static List<App> prefill() {
		List<App> appList = new ArrayList<>();
		appList.add(new App("Whatsapp","Communication",Integer.parseInt("1296"),Double.parseDouble("16.5"),new ArrayList<Review>()));
		appList.add(new App("MX player","Video player",Integer.parseInt("512"),Double.parseDouble("20.0"),new ArrayList<Review>()));
		appList.add(new App("Facebook","Social",Integer.parseInt("750"),Double.parseDouble("54.0"),new ArrayList<Review>()));
		appList.add(new App("UC browser","Browser",Integer.parseInt("456"),Double.parseDouble("34.0"),new ArrayList<Review>()));
		appList.add(new App("IMO","Communication",Integer.parseInt("526"),Double.parseDouble("10.5"),new ArrayList<Review>()));
		appList.add(new App("Hotstar","Entertainment",Integer.parseInt("400"),Double.parseDouble("65.0"),new ArrayList<Review>()));
		appList.add(new App("Opera mini","Browser",Integer.parseInt("365"),Double.parseDouble("26.3"),new ArrayList<Review>()));
		appList.add(new App("Airtel TV","Entertainment",Integer.parseInt("569"),Double.parseDouble("56.3"),new ArrayList<Review>()));
		appList.add(new App("VLC player","Video player",Integer.parseInt("623"),Double.parseDouble("37.5"),new ArrayList<Review>()));
		appList.add(new App("Twitter","Social",Integer.parseInt("783"),Double.parseDouble("12.6"),new ArrayList<Review>()));
		appList.add(new App("Instagram","Social",Integer.parseInt("800"),Double.parseDouble("62.5"),new ArrayList<Review>()));
		appList.add(new App("Jio tv","Entertainment",Integer.parseInt("296"),Double.parseDouble("45.5"),new ArrayList<Review>()));
		appList.add(new App("Hike","Communication",Integer.parseInt("540"),Double.parseDouble("30.0"),new ArrayList<Review>()));
		return appList;
	}
		
	public static App getTrendingApp(List<App> appLis) {
		
		//write your code here
		
		TreeMap<Double,App> usemap=new TreeMap<Double,App>();
		for(App app:appLis){
			Double amount=0.0;
			int count=0;
			for(Review r:app.getReviewList()){
				amount=amount+r.getRating();
				count++;
			}
			amount=amount/count;
			if(!String.valueOf(amount).equals("NaN")){
			usemap.put(amount, app);
			}
		}
	Double hrating=usemap.lastKey();
	
	List<App> hrapp=new ArrayList<App>();
	for(Map.Entry<Double, App> mp:usemap.entrySet()){
		if(mp.getKey()==hrating){
			hrapp.add(mp.getValue());
		}
	}
		if(hrapp.size()==2)
		{
			int d=hrapp.get(0).getNoOfDownloads();
			if(hrapp.get(1).getNoOfDownloads()>d){
				return hrapp.get(1);
			}
			else{
				return hrapp.get(0);
			}
		}
		else{
			return hrapp.get(0);
		}
	
	}
}
import java.text.SimpleDateFormat;
import java.util.Date;

public class Review{
	//Your code here
	private String reviewerName;
	private String reviewerEmail;
	private String description;
	private Double rating;
	private java.util.Date postedDate;
	private App app;
	public String getReviewerName() {
		return reviewerName;
	}
	public void setReviewerName(String reviewerName) {
		this.reviewerName = reviewerName;
	}
	public String getReviewerEmail() {
		return reviewerEmail;
	}
	public void setReviewerEmail(String reviewerEmail) {
		this.reviewerEmail = reviewerEmail;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public Double getRating() {
		return rating;
	}
	public void setRating(Double rating) {
		this.rating = rating;
	}
	public java.util.Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(java.util.Date postedDate) {
		this.postedDate = postedDate;
	}
	public Review() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public String toString() {
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		String result=String.format("%-15s %-20s %-15s %-10s %s", reviewerName,reviewerEmail,description,rating,sdf.format(postedDate));
		return result;
	}
	public Review(String reviewerName, String reviewerEmail, String description, Double rating, Date postedDate,App app) {
		super();
		this.reviewerName = reviewerName;
		this.reviewerEmail = reviewerEmail;
		this.description = description;
		this.rating = rating;
		this.postedDate = postedDate;
		this.app=app;
	}
	public App getApp() {
		return app;
	}
	public void setApp(App app) {
		this.app = app;
	}
	
	
}
							SHOP
Requirement-1
 import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

public class Main {
	
public static void main(String args[]) throws IOException, ParseException, NumberFormatException {

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
	
	SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
		
System.out.print("Enter Product 1 details:");
		
String str = reader.readLine();
		
String[] str1 = str.split(",", 6);
	
	String name = str1[0];
		
String productCode = str1[1];
		
String brandName = str1[2];
		
int stockLeft = Integer.parseInt(str1[3]);
		
double price = Double.parseDouble(str1[4]);

		Date d = sdf.parse(str1[5]);
		
Product prod1 = new Product(name, productCode, brandName, stockLeft, price, d);
		
System.out.println("\nEnter Product 2 details:");
		
String s = reader.readLine();
		
String[] s1 = s.split(",", 6);
		
String name1 = s1[0];
		
String productCode1 = s1[1];
		
String brandName1 = s1[2];
		
int stockLeft1 = Integer.parseInt(s1[3]);
	
	double price1 = Double.parseDouble(s1[4]);

		Date d1 = sdf.parse(s1[5]);
		
Product prod2 = new Product(name1, productCode1, brandName1, stockLeft1, price1, d1);
	
	System.out.println("\nProduct 1\n");
		
System.out.println(prod1);
		
System.out.println("\nProduct 2\n");
		
System.out.println(prod2);
		
if (prod1.getName().toLowerCase().equals(prod2.getName().toLowerCase())
		
		&& prod1.getProductCode().toLowerCase().equals(prod2.getProductCode().toLowerCase())) {
		
	System.out.println("\nProduct 1 is same as Product 2");
		} else {
			
System.out.println("\nProduct 1 and Product 2 are different");
		}
	}
}



 import java.text.SimpleDateFormat;
import java.util.Date;

public class Product {
	private String name, productCode, brandName;
	private int stockLeft;
	private double price;
	private Date expiryDate;
	SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getProductCode() {
		return productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	public String getBrandName() {
		return brandName;
	}

	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}

	public int getStockLeft() {
		return stockLeft;
	}

	public void setStockLeft(int stockLeft) {
		this.stockLeft = stockLeft;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public Date getExpiryDate() {
		return expiryDate;
	}

	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}

	public Product() {
		super();
	}

	public Product(String name, String productCode, String brandName, int stockLeft, double price, Date expiryDate) {
		super();
		this.name = name;
		this.productCode = productCode;
		this.brandName = brandName;
		this.stockLeft = stockLeft;
		this.price = price;
		this.expiryDate = expiryDate;
	}

	@Override
	public String toString() {
		return "Name:" + name + "\nProduct Code:" + productCode + "\nBrand Name:" + brandName + "\nStock Left:"
				+ stockLeft + "\nPrice:" + price + "\nExpiry Date:" + sdf.format(expiryDate);
	}

}
----------------------------------------------------------
Requirement-2

 import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String[] args){
		try
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter the name of the Shop:");
			String refid=new String(br.readLine());
			Shop t=new Shop();
			t.setName(refid);
		
		List<Product> al=new ArrayList<Product>();

      	do
			{
				System.out.println("1.Add Product\n2.Delete Product\n3.Display Products\n4.Exit\nEnter your choice:");
				int n=Integer.parseInt(br.readLine());
				//Seat seat[]=new Seat[2];
				switch(n)
				{
					case 1:
						{
							String details=br.readLine();
							Product product=Product.createProduct(details);
							if(product!=null)
							{
								t=new Shop(refid,al);
								t.addProductToShop(product);
								System.out.println("Product successfully added");
							}
						}
					break;
					case 2:
						{
							System.out.println("Enter the productCode of the product to be deleted:");
							String productCode=br.readLine();
							if(t.removeProductFromShop(productCode))
								System.out.println("Product successfully deleted");
							else
								System.out.println("Product not found in the Shop");
						}
					break;
					case 3:
					{
						//new Ticket(refid,date,al);
						if(t!=null)
							t.displayProducts();
						else
							System.out.println("No products to show");
					}
					break;
					case 4:
					{
						System.exit(0);
					}
					break;
					default:
				}
				
			}while(true);
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.println(e);
		}
	}
}

 import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Product {
   private String name;
    private String productCode;
  private  String brandName;
   private int stockLeft;
  private  double price;
   private Date expirydate;
   SimpleDateFormat fr=new SimpleDateFormat("dd-MM-yyyy");
	public String getName() {
	return name;
}

public void setName(String name) {
	this.name = name;
}

public String getProductCode() {
	return productCode;
}

public void setProductCode(String productCode) {
	this.productCode = productCode;
}

public String getBrandName() {
	return brandName;
}

public void setBrandName(String brandName) {
	this.brandName = brandName;
}

public int getStockLeft() {
	return stockLeft;
}

public void setStockLeft(int stockLeft) {
	this.stockLeft = stockLeft;
}

public double getPrice() {
	return price;
}

public void setPrice(double price) {
	this.price = price;
}

public Date getExpirydate() {
	return expirydate;
}

public void setExpirydate(Date expirydate) {
	this.expirydate = expirydate;
}

	public Product() {
	super();
}

	public Product(String name, String productCode, String brandName, int stockLeft, double price, Date expirydate) {
	super();
	this.name = name;
	this.productCode = productCode;
	this.brandName = brandName;
	this.stockLeft = stockLeft;
	this.price = price;
	this.expirydate = expirydate;
}

	public static Product createProduct(String product) throws NumberFormatException, ParseException{
		String s[]=product.split(",");
		SimpleDateFormat fr=new SimpleDateFormat("dd-MM-yyyy");
		Product obj=new Product(s[0],s[1],s[2],Integer.parseInt(s[3]),Double.parseDouble(s[4]),fr.parse(s[5]));
		//System.out.println(s[5]);
		return obj;
	
	}


	@Override
	public String toString() {
		System.out.format("%-15s %-15s %-12s %-12s %-7s %s",name,productCode,brandName,stockLeft,price,fr.format(expirydate));
	return "";
	}
}

 import java.util.ArrayList;
import java.util.List;

public class Shop {
	String name;
	List<Product> productList=new ArrayList<Product>();
	
	public Shop() {
		
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Product> getProductList() {
		return productList;
	}

	public void setProductList(List<Product> productList) {
		this.productList = productList;
	}

	public Shop(String name, List<Product> productList) {
		super();
		this.name = name;
		this.productList = productList;
	}

	public void addProductToShop(Product product){
	 productList.add(product);
	 //System.out.println("" +productList);
	}
	
	public Boolean removeProductFromShop(String productCode){
		Boolean b=new Boolean(false);
		for(Product p : productList){
			if(p.getProductCode().equals(productCode) ){
				
				productList.remove(p);
				//productList.remove(productList.get(p.g));
				return true;
			}
				
			
		}
		return b;
	}
	public void displayProducts(){
		if(productList.size()==0)
			System.out.println("No products to show");
		else
		{
			System.out.println("Products in "+name);
			System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name"
					, "Stock left","Price","Expiry date");
			for(Product p : productList)
				System.out.println(p.toString());
		}
	}
}

Requirement-3

  import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the product code to be validated:");
		String productCode = reader.readLine();
		boolean b2 = validateProductCode(productCode);
		if (b2) {
			System.out.println("Product code is valid");
		} else {
			System.out.println("Product code is invalid");
		}
	}

	static Boolean validateProductCode(String productCode) {
		if (productCode.matches("[#]{1}[A-Z]{2,3}[ ][0-9]{2}[ ][A-Z]{2,3}[-][0-9]{2,4}")) {
			return true;
		} else {
			return false;
		}
	}
}

Requirement-4
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


public class Main {
    public static void main(String[] args) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat formatter = new SimpleDateFormat("dd-mm-yyyy");
		
		System.out.println("Enter the number of products:");
		Integer n=Integer.parseInt(br.readLine());
		String details[]=new String[n];
		List<Product> list=new ArrayList<Product>();
		Product p[]=new Product[n];
		for(int i=0;i<n;i++)
		{
			details[i]=br.readLine();
			String s[]=details[i].split(",");
			Date d;
			d=formatter.parse(s[5]);
			p[i]=new Product(s[0],s[1],s[2],Integer.parseInt(s[3]),Double.parseDouble(s[4]),d);
			list.add(p[i]);
		}
		System.out.println("Enter a search type:\n1.By brand name\n2.By price");
		int choice=Integer.parseInt(br.readLine());
		ProductBO PBo=new ProductBO();
		switch(choice)
		{
		case 1:
		{
			System.out.println("Enter the brand name:");
			String brandName=br.readLine();
			List<Product> byBname=PBo.findProduct(list, brandName);
			if(byBname.size()!=0)
			{
				System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name","Stock left","Price","Expiry date");
				for(Product v:byBname)
					v.toString();
					
			}
			else
				System.out.println("No such product is present");
		}
		break;
		case 2:
		{
			System.out.println("Enter the price:");
			double price=Double.parseDouble(br.readLine());
			List<Product> byprice=PBo.findProduct(list, price);
			if(byprice.size()!=0)
			{
				System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name","Stock left","Price","Expiry date");
				for(Product v:byprice)
				v.toString();
				
			}
			else
				System.out.println("No such product is present");
			
		}
		break;
		default:System.out.print("Invalid choice");
		}
    }
}


 


import java.text.SimpleDateFormat;
import java.util.Date;

public class Product {
	private String name,productCode,brandName;
	private int stockLeft;
	private double price;
	private Date expiryDate;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getProductCode() {
		return productCode;
	}
	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}
	public String getBrandName() {
		return brandName;
	}
	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}
	public int getStockLeft() {
		return stockLeft;
	}
	public void setStockLeft(int stockLeft) {
		this.stockLeft = stockLeft;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public Date getExpiryDate() {
		return expiryDate;
	}
	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}
	
	public Product() {
		
	}
	SimpleDateFormat formatter = new SimpleDateFormat("dd-mm-yyyy");
	public Product(String name, String productCode, String brandName, int stockLeft, double price, Date expiryDate) {
		super();
		this.name = name;
		this.productCode = productCode;
		this.brandName = brandName;
		this.stockLeft = stockLeft;
		this.price = price;
		this.expiryDate = expiryDate;
	}
	@Override
	public String toString() {
		System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n",name,productCode,brandName,stockLeft,price,formatter.format(expiryDate));
		return "";
	}
	
	
	
}

 


import java.util.ArrayList;
import java.util.List;

public class ProductBO {
	public List<Product> findProduct(List<Product> ProductList,String brandName){
		List<Product> search=new ArrayList<Product>();
		for(Product v:ProductList)
		{
			if(v.getBrandName().equalsIgnoreCase(brandName))
				search.add(v);
		}
		return search;
	}
	
	public List<Product> findProduct(List<Product> ProductList,Double price){
		List<Product> search=new ArrayList<Product>();
	
		for(Product v:ProductList)
		{
			if(v.getPrice()==price)
				search.add(v);
			}
		
		return search;
	}

}

 


Requirement-5

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of the products:");
		int n;
		
		List<Product> productList = new ArrayList<Product>();
		n = Integer.parseInt(br.readLine());
		for(int i = 0;i < n;i++)
		{
			String line = br.readLine();
			Product pp = Product.createProduct(line);
			productList.add(pp);
	   }
		int choice;
		System.out.println("Enter a type to sort:\n1.Sort by stock left\n2.Sort by price\n3.Sort by expiry date");
		choice = Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:Collections.sort(productList);
		System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name","Stock left","Price","Expiry date");
		for(Product p:productList)
		{
			p.toString();
		}
		break;
		case 2:Collections.sort(productList,new PriceComparator());
		System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name","Stock left","Price","Expiry date");
		for(Product p:productList)
		{
			p.toString();
			//System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n",p.getName(),p.getProductCode(),p.getBrandName(),p.getStockLeft(),p.getPrice(),p.getExpiryDate());;
		}
		break;
		case 3:Collections.sort(productList, new ExpiryDateComparator());
		System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name","Stock left","Price","Expiry date");
		for(Product p:productList) {
			p.toString();
		}
		break;
		       
		}
		
		
		
	}
}

 


 import java.util.Comparator;

public class ExpiryDateComparator implements Comparator<Product>{
	@Override
	public int compare(Product p1, Product p2) {
		// TODO Auto-generated method stub
		return p1.getExpiryDate().compareTo(p2.getExpiryDate());
	}

	

}


import java.util.Comparator;

public class PriceComparator implements Comparator<Product>{

	@Override
	public int compare(Product arg0, Product arg1) {
		if(arg0.getPrice()>arg1.getPrice())
			return 1;
		else if (arg0.getPrice()<arg1.getPrice())
			return -1;
		else
		return 0;
	}

	//Your code here
		
}
 


 import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Formatter;

public class Product implements Comparable<Product>{
	private String name,productCode,brandName;
	private int stockLeft;
	private double price;
	private Date expiryDate;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getProductCode() {
		return productCode;
	}
	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}
	public String getBrandName() {
		return brandName;
	}
	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}
	public int getStockLeft() {
		return stockLeft;
	}
	public void setStockLeft(int stockLeft) {
		this.stockLeft = stockLeft;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public Date getExpiryDate() {
		return expiryDate;
	}
	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}
	
	public Product() {
		
	}
	static SimpleDateFormat formatter = new SimpleDateFormat("dd-mm-yyyy");
	public Product(String name, String productCode, String brandName, int stockLeft, double price, Date expiryDate) {
		super();
		this.name = name;
		this.productCode = productCode;
		this.brandName = brandName;
		this.stockLeft = stockLeft;
		this.price = price;
		this.expiryDate = expiryDate;
	}
		public static Product createProduct(String detail) throws ParseException{
			Product s = null;
		
			String[] arr = detail.split(",");
			Date d=formatter.parse(arr[5]);
			s = new Product(arr[0],arr[1],arr[2],Integer.parseInt(arr[3]),Double.parseDouble(arr[4]),d);
			return s;
		}
		public int compareTo(Product p) {
			
			int p1=this.getStockLeft();
			int p2=p.getStockLeft();
			if (p1>p2)
				return 1;
			else if(p1<p2)
				return -1;
			else 
				return 0;
		}
		@Override
		public String toString() {
			System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n",name,productCode,brandName,stockLeft,price,formatter.format(expiryDate));
			return "";
		}
		
		
		
}



Requirement-6

 import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of products");
		int n;
		Product pr = new Product();
		List<Product> productList = new ArrayList<Product>();
		n = Integer.parseInt(br.readLine());
		for (int i = 0; i < n; i++) {
			String line = br.readLine();
			Product pp = Product.createProduct(line);
			productList.add(pp);
		}
		System.out.format("%-15s %s\n", "Brand", "No. of Products");
		Map<String, Integer> pn = Product.brandWiseCount(productList);
		for (Map.Entry<String, Integer> entry : pn.entrySet()) {
			System.out.format("%-15s %s\n", entry.getKey(), entry.getValue());
		}
	}
}
 import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Product {

	private String name;
	private String productCode;
	private String brandName;
	private int stockLeft;
	private double price;
	private Date expiryDate;
	static SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getProductCode() {
		return productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	public String getBrandName() {
		return brandName;
	}

	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}

	public int getStockLeft() {
		return stockLeft;
	}

	public void setStockLeft(int stockLeft) {
		this.stockLeft = stockLeft;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public Date getExpiryDate() {
		return expiryDate;
	}

	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}

	public Product() {
		super();
	}

	public Product(String name, String productCode, String brandName, int stockLeft, double price, Date expiryDate) {
		super();
		this.name = name;
		this.productCode = productCode;
		this.brandName = brandName;
		this.stockLeft = stockLeft;
		this.price = price;
		this.expiryDate = expiryDate;
	}

	public static Product createProduct(String line) throws NumberFormatException, ParseException {
		Product p = null;
		String[] arr = line.split(",", 6);
		p = new Product(arr[0], arr[1], arr[2], Integer.parseInt(arr[3]), Double.parseDouble(arr[4]),
				sdf.parse(arr[5]));
		return p;
	}

	public static Map<String, Integer> brandWiseCount(List<Product> productList) {
		Map<String, Integer> cmap = new TreeMap();
		int n = 0;
		for (Product p : productList) {
			if (cmap.containsKey(p.getBrandName())) {
				n = cmap.get(p.getBrandName());
				n++;
				cmap.put(p.getBrandName(), n);
			} else {
				cmap.put(p.getBrandName(), 1);
			}
		}
		return cmap;
	}
}

YOUTUBE
REQUIREMENT-1
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String args[]) throws IOException {
		BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
		System.out.print("\nEnter user 1 details:");
		String s = r.readLine();
		String a[] = s.split(",");
		User u = new User(a[0], a[1]);
		System.out.println("\nEnter user 2 details:");
		String s1 = r.readLine();
		String b[] = s1.split(",");
		User u1 = new User(b[0], b[1]);
		System.out.println("\nUser 1\n" + u);
		System.out.println("\nUser 2\n" + u1);
		if (u.equals(u1)) {
			System.out.println("\nUser 1 is same as User 2");
		} else {
			System.out.println("\nUser 1 and User 2 are different");
		}
	}

}


public class User {
	private String name, email;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public User() {
		super();
	}

	public User(String name, String email) {
		super();
		this.name = name;
		this.email = email;
	}

	@Override
	public String toString() {
		return "Name:" + name + "\nEmail:" + email;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

}

REQUIREMENT-2
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Main {

    public static void main(String[] args) throws IOException{
    	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    	
    	System.out.println("Enter the email to be validated:");
    	//Your code goes here 
    	String mailId=reader.readLine();
    	System.out.println(validateEmail(mailId)?"Email is valid":"Email is invalid");

}

	private static boolean validateEmail(String mailId) {
		// TODO Auto-generated method stub
		Boolean check=false;
		 if(mailId.matches("[A-Za-z]{1}[a-zA-Z0-9._]*[@]{1}[a-zA-Z]+[.]{1}[a-zA-Z]{2,6}"))
		 {
			 check=true;
		 }
		 return check;
	 } 
	}
REQUIREMENT-3

 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Main {
	public static void main(String[] args) throws NumberFormatException, ParseException, IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of videos:");
		
		int n;
		Video pr=new Video();
		List<Video> videoList=new ArrayList<Video>();
		n=Integer.parseInt(br.readLine());
		for(int i=0;i<n;i++)
		{
			String line=br.readLine();
			Video pp=Video.createVideo(line);
			videoList.add(pp);
			
			
		}
		System.out.format("%-2s %s\n","Category","Count");
		Map<String,Integer> pn=Video.getCategoryWiseCount(videoList);
		for(Map.Entry<String,Integer> entry : pn.entrySet())
		{
			System.out.format("%-2s %s\n",entry.getKey(),entry.getValue());
		}
		
	}


	}



 import java.text.ParseException;
import java.text.SimpleDateFormat;
	import java.util.Date;
	import java.util.List;
	import java.util.Map;
	import java.util.TreeMap;
	public class Video {
	

		private String name,category;
		private Date duration,postedDate;
		private int noOfViews,noOfLikes;
		static SimpleDateFormat sd=new SimpleDateFormat("dd-MM-yyyy");
		static SimpleDateFormat sdf=new SimpleDateFormat("mm:ss");
		
		
		
		
		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public String getCategory() {
			return category;
		}

		public void setCategory(String category) {
			this.category = category;
		}

		public Date getDuration() {
			return duration;
		}

		public void setDuration(Date duration) {
			this.duration = duration;
		}

		public Date getPostedDate() {
			return postedDate;
		}

		public void setPostedDate(Date postedDate) {
			this.postedDate = postedDate;
		}

		public int getNoOfViews() {
			return noOfViews;
		}

		public void setNoOfViews(int noOfViews) {
			this.noOfViews = noOfViews;
		}

		public int getNoOfLikes() {
			return noOfLikes;
		}

		public void setNoOfLikes(int noOfLikes) {
			this.noOfLikes = noOfLikes;
		}
		

		public Video() {
			super();
		}

		public Video(String name, String category, Date duration, Date postedDate, int noOfViews, int noOfLikes) {
			super();
			this.name = name;
			this.category = category;
			this.duration = duration;
			this.postedDate = postedDate;
			this.noOfViews = noOfViews;
			this.noOfLikes = noOfLikes;
		}

		public static Video createVideo(String detail) throws NumberFormatException, ParseException {
			Video p=null;
			String[] arr=detail.split(",",6);
			p=new Video(arr[0],arr[1],sdf.parse(arr[2]),sd.parse(arr[3]),Integer.parseInt(arr[4]),Integer.parseInt(arr[5]));
			
			
			return p;
			
		}
		
		

	public static Map<String,Integer> getCategoryWiseCount(List<Video> videoList){
		//Your code here

			Map<String,Integer> cmap=new TreeMap();
			int n=0;
			for(Video p:videoList) {
				if(cmap.containsKey(p.getCategory()))
				{
					
					n=cmap.get(p.getCategory());
					n++;
					cmap.put(p.getCategory(),n);
					
					
				}
				else
					cmap.put(p.getCategory(),1);
			}
			
			
			
			return cmap;
			
		}
	}

		
	



REQUIREMENT-4
 import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of videos:");
		int n;
		List<Video> productList = new ArrayList<Video>();
		n = Integer.parseInt(br.readLine());
		for(int i = 0;i < n;i++)
		{
			String line = br.readLine();
			Video v = Video.createProduct(line);
			productList.add(v);
	   }
		int choice;
		System.out.println("Enter a type to sort:\n1.Sort by posted date\n2.Sort by no of views");		
		choice = Integer.parseInt(br.readLine());
		switch(choice)
		{
		case 1:Collections.sort(productList);
//		System.out.format("%-25s %-10s %-10s %-12s %-8s %s\n","Name","Category","Duration","Posted Date","Views","Likes");
		System.out.format("%-2s %-2s %-2s %-2s %-2s %s\n","Name","Category","Duration","Posted Date","Views","Likes");

		for(Video v:productList)
		{
			v.toString();
		}
		break;
		case 2:Collections.sort(productList,new ViewComparator());
		System.out.format("%-2s %-2s %-2s %-2s %-2s %s\n","Name","Category","Duration","Posted Date","Views","Likes");
		for(Video v:productList)
		{
			v.toString();
		}
		break;
		
		}
		
	}
}


 
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Video implements Comparable<Video>{
	private String name,category;
	private Date duration,postedDate;
	private int noOfViews,noOfLikes;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public Date getDuration() {
		return duration;
	}
	public void setDuration(Date duration) {
		this.duration = duration;
	}
	public Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(Date postedDate) {
		this.postedDate = postedDate;
	}
	public int getNoOfViews() {
		return noOfViews;
	}
	public void setNoOfViews(int noOfViews) {
		this.noOfViews = noOfViews;
	}
	public int getNoOfLikes() {
		return noOfLikes;
	}
	public void setNoOfLikes(int noOfLikes) {
		this.noOfLikes = noOfLikes;
	}	
	public Video() {
		
	}
	public Video(String name, String category, Date duration, Date postedDate, int noOfViews, int noOfLikes) {
		super();
		this.name = name;
		this.category = category;
		this.duration = duration;
		this.postedDate = postedDate;
		this.noOfViews = noOfViews;
		this.noOfLikes = noOfLikes;
		
	}
	
	static SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
	static SimpleDateFormat f1=new SimpleDateFormat("mm:ss");
	
	public static Video createProduct(String detail) throws ParseException{
		Video v = null;
	
		String[] arr = detail.split(",");
		Date d=formatter.parse(arr[3]);
		v = new Video(arr[0],arr[1],f1.parse(arr[2]),d,Integer.parseInt(arr[4]),Integer.parseInt(arr[5]));
		return v;
	}
	public int compareTo(Video v) {
		
		Date p1=this.getPostedDate();
		Date p2=v.getPostedDate();
		if (p1.after(p2))
			return 1;
		else if(p1.before(p2))
			return -1;
		else 
			return 0;
	}
	@Override
	public String toString() {
		System.out.format("%-2s %-2s %-2s %-2s %-2s %s\n",name,category,f1.format(duration),formatter.format(postedDate),noOfViews,noOfLikes);
		return "";
	}
	
}


 import java.util.Comparator;

public class ViewComparator	implements Comparator<Video>{

	@Override
	public int compare(Video v1, Video v2) {
		if(v1.getNoOfViews()>v2.getNoOfViews())
			return 1;
		else if(v1.getNoOfViews()<v2.getNoOfViews())
			return -1;
		else
		return 0;
	}
	
}


REQUIREMENT-5
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat f = new SimpleDateFormat("mm:ss");
		System.out.println("Enter the number of videos:");
		Integer n=Integer.parseInt(br.readLine());
		String details[]=new String[n];
		List<Video> videolist=new ArrayList<Video>();
		Video p[]=new Video[n];
		for(int i=0;i<n;i++)
		{
			details[i]=br.readLine();
			String s[]=details[i].split(",");
			Date d;
			d=formatter.parse(s[3]);
			User name=User.prefill().get(0);
			p[i]=new Video(s[0],s[1],f.parse(s[2]),d,Integer.parseInt(s[4]),Integer.parseInt(s[5]),name);
			videolist.add(p[i]);
		}
		System.out.println("Enter a search type:\n1.By Category\n2.By Username");
		int choice=Integer.parseInt(br.readLine());
		VideoBO VBo=new VideoBO();
		switch(choice)
		{
		case 1:
		{
			System.out.println("Enter the Category:");
			String category=br.readLine();
			List<Video> bycategory=VBo.findVideo(videolist, category);
			if(bycategory.size()!=0)
			{
				System.out.format("%-25s %-10s %-10s %-10s %-8s %-8s %s\n","Name","Category","Duration","Posted Date","Views","Likes","Posted By");
				for(Video v:bycategory)
					v.toString();
					
			}
			else
				System.out.println("No such video is present");
		}
		break;
	case 2:
		{
		System.out.println("Enter the price:");
			String username=br.readLine();
			List<Video> byusername=VBo.findVideo(videolist,username);
			if(byusername.size()!=0)
			{
				System.out.format("%-15s %-15s %-12s %-12s %-7s %s\n","Name","Product code","Brand name","Stock left","Price","Expiry date");
				for(Video v:byusername)
				v.toString();
				
			}
			else
				System.out.println("No such video is present");
			
		}
			break;
		default:System.out.print("Invalid choice");
		}
  	}
}
 
import java.util.ArrayList;
import java.util.List;

public class User {
	
	String name;
	String email;
	List<Video> videoList;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public List<Video> getVideoList() {
		return videoList;
	}
	public void setVideoList(List<Video> videoList) {
		this.videoList = videoList;
	}
	public User(String string, String string2, ArrayList<Video> arrayList) {
		
	}
	public static List<User> prefill(){
		List<User> list = new ArrayList<>();
		list.add(new User("Walter","walter@gmail.com",new ArrayList<Video>()));
		list.add(new User("Winn","winn@gmail.com",new ArrayList<Video>()));
		list.add(new User("James","james@gmail.com",new ArrayList<Video>()));
		list.add(new User("John","john@gmail.com",new ArrayList<Video>()));
		list.add(new User("Dean","dean@gmail.com",new ArrayList<Video>()));
		list.add(new User("Sam","sam@gmail.com",new ArrayList<Video>()));
		return list;
	}
}
 


import java.text.SimpleDateFormat;
import java.util.Date;

public class Video  {
	private String name,category;
	private Date duration,postedDate;
	private int noOfViews,noOfLikes;
	private User user;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public Date getDuration() {
		return duration;
	}
	public void setDuration(Date duration) {
		this.duration = duration;
	}
	public Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(Date postedDate) {
		this.postedDate = postedDate;
	}
	public int getNoOfViews() {
		return noOfViews;
	}
	public void setNoOfViews(int noOfViews) {
		this.noOfViews = noOfViews;
	}
	public int getNoOfLikes() {
		return noOfLikes;
	}
	public void setNoOfLikes(int noOfLikes) {
		this.noOfLikes = noOfLikes;
	}
	public User getUser() {
		return user;
	}
	public void setUser(User user) {
		this.user = user;
	}
	
	public Video() {
		
	}
	static SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
	static SimpleDateFormat f1=new SimpleDateFormat("mm:ss");
	
	public Video(String name, String category, Date duration, Date postedDate, int noOfViews, int noOfLikes,User user) {
		super();
		this.name = name;
		this.category = category;
		this.duration = duration;
		this.postedDate = postedDate;
		this.noOfViews = noOfViews;
		this.noOfLikes = noOfLikes;
		this.user = user;
	}
	@Override
	public String toString() {
		System.out.format("%-25s %-10s %-10s %-10s %-8s %-8s %s\n",name,category,f1.format(duration),formatter.format(postedDate),noOfViews,noOfLikes,user.getName());
		return "";
	}
	
	
}
 


import java.util.ArrayList;
import java.util.List;

public class VideoBO {
	public List<Video> findVideo(List<Video> videoList,String category){
		
		List<Video> search=new ArrayList<Video>();
		for(Video v:videoList)
		{
			if(v.getCategory().equalsIgnoreCase(category))
				search.add(v);
		}
		
		return search;
		
	}
	public List<Video> findVideo(List<Video> videoList,List<String> username){
		List<Video> search=new ArrayList<Video>();
		
		for(Video v:videoList)
		{
			if(v.getName().equals(username))
				search.add(v);
		}	
		
		return search;
		
	}
}
 
REQUIREMENT-6
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.List;

public class Main {
	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//Your code goes here...
		System.out.println("Enter the number of videos:");
		//Your code goes here...
		
int n=Integer.parseInt(br.readLine());
		
		SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
		
		String s;
		String s1[];
		List<User> userList=User.prefill();
		
		
		for(int i=0;i<n;i++){
			s=br.readLine();
			s1=s.split(",");
			
			for(User u:userList){
			
				if(u.getName().equals(s1[1])){
					
					u.getVideoList().add(new Video(s1[0],u,Double.parseDouble(s1[2]),sdf.parse(s1[3])));
					
				}
				
			}
			
			
		}
		
		UPI fav=UPI.favouriteUPI(upiList);
		
		
		System.out.println("Maximum amount is transferred to "+fav.getUser().getName());
		
		
		
		System.out.println("Enter a search type:\n1.By Category\n2.By Username");
		//Your code goes here...
     	}
}
 

import java.util.ArrayList;
import java.util.List;

public class User{
	private String name;
	private String email;
	private List<Video> VideoList;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public List<Video> getVideoList() {
		return VideoList;
	}
	public void setVideoList(List<Video> videoList) {
		VideoList = videoList;
	}
	public User(String name, String email, List<Video> videoList) {
		super();
		this.name = name;
		this.email = email;
		VideoList = videoList;
	}
	
	
	public User(){
		
	}
	
	

	public static List<User> prefill(){
		List<User> list = new ArrayList<>();
		list.add(new User("Walter","walter@gmail.com",new ArrayList<Video>()));
		list.add(new User("Winn","winn@gmail.com",new ArrayList<Video>()));
		list.add(new User("James","james@gmail.com",new ArrayList<Video>()));
		list.add(new User("John","john@gmail.com",new ArrayList<Video>()));
		list.add(new User("Dean","dean@gmail.com",new ArrayList<Video>()));
		list.add(new User("Sam","sam@gmail.com",new ArrayList<Video>()));
		return list;
	}
	
	public User popularUser(List<User> UserList){
		double t,big=0.0;
		for(User u:UserList){
			t=0.0;
				for(Video o:u.getVideoList()){
					t+=o.getNoOfLikes();
				}
				if(t>big){
					big=t;
				}
				
		}
		
		for(User u:UserList){
			t=0.0;
			
			for(Video o:u.getVideoList()){
				
				t+=o.getNoOfViews();
				
			}
			
			if(t==big){
				
				return u;
			}
		
		}

	
		return null;

		
		
	}
}

import java.util.Date;

public class Video{
	private String name;
	private String category;
	private Date duration;
	private Date postedDate;
	private Integer noOfViews;
	private Integer noOfLikes;
	private User user;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public Date getDuration() {
		return duration;
	}
	public void setDuration(Date duration) {
		this.duration = duration;
	}
	public Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(Date postedDate) {
		this.postedDate = postedDate;
	}
	public Integer getNoOfViews() {
		return noOfViews;
	}
	public void setNoOfViews(Integer noOfViews) {
		this.noOfViews = noOfViews;
	}
	public Integer getNoOfLikes() {
		return noOfLikes;
	}
	public void setNoOfLikes(Integer noOfLikes) {
		this.noOfLikes = noOfLikes;
	}
	public User getUser() {
		return user;
	}
	public void setUser(User user) {
		this.user = user;
	}
	public Video(String name, String category, Date duration, Date postedDate, Integer noOfViews, Integer noOfLikes,
			User user) {
		super();
		this.name = name;
		this.category = category;
		this.duration = duration;
		this.postedDate = postedDate;
		this.noOfViews = noOfViews;
		this.noOfLikes = noOfLikes;
		this.user = user;
	}
	
	
	public Video(){
		
	}
	
}

DEVELOPER

REQUIREMENT-1
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		//Your code goes here
		System.out.println("Enter developer 1 details:");
		String d1=reader.readLine();
		String[] arr1=d1.split(",");
		Developer dev1=new Developer(arr1[0],arr1[1]);
		
		//Your code goes here
		System.out.println("Enter developer 2 details:");
		//Your code goes here
		String d2=reader.readLine();
		String[] arr2=d2.split(",");
		Developer dev2=new Developer(arr2[0],arr2[1]);
		System.out.println();
		System.out.println("Developer 1");
		System.out.println(dev1);
		System.out.println();
		System.out.println("Developer 2");
		System.out.println(dev2);
		System.out.println();
		if(dev1.equals(dev2))
		{
			System.out.println("Developer 1 is same as Developer 2");
		}
		else
		{
			System.out.println("Developer 1 and Developer 2 are different");
		}
	} 
}

public class Developer {
	//Your code goes here
	private String name;
	private String email;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Developer(String name, String email) {
		super();
		this.name = name;
		this.email = email;
	}
	public Developer() {
		super();
		// TODO Auto-generated constructor stub
	}
	@Override
	public boolean equals(Object o) 
	{
		boolean check=false;
		Developer d=(Developer) o;
		if(this.name.equalsIgnoreCase(d.getName())&&this.email.equals(d.getEmail()))
		{
			check=true;
		}
		return check;
	}
	@Override
	public String toString() {
		return "Name:" + name + "\nEmail:" + email;
	}
	
}


REQUIREMENT-2

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {

    public static void main(String[] args) throws IOException{
    	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    	
    	System.out.println("Enter the email to be validated:");
    	//Your code goes here
    	String mailId=reader.readLine();
    	System.out.println(validateEmail(mailId)?"Email is valid":"Email is invalid");
 }
    
 static Boolean validateEmail(String email)
 {
	 Boolean check=false;
	 if(email.matches("[A-Za-z]{1}[a-zA-Z0-9._]*[@]{1}[a-zA-Z]+[.]{1}[a-zA-Z]{2,6}"))
	 {
		 check=true;
	 }
	 return check;
 } 
}


REQUIREMENT-3
import java.text.DecimalFormat;

public class App {
	
	//write your code here
	private String name;
	private String category;
	private Integer noOfDownloads;
	private Double size;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public Integer getNoOfDownloads() {
		return noOfDownloads;
	}
	public void setNoOfDownloads(Integer noOfDownloads) {
		this.noOfDownloads = noOfDownloads;
	}
	public Double getSize() {
		return size;
	}
	public void setSize(Double size) {
		this.size = size;
	}
	public App() {
		super();
		// TODO Auto-generated constructor stub
	}
	public App(String name, String category, Integer noOfDownloads, Double size) {
		super();
		this.name = name;
		this.category = category;
		this.noOfDownloads = noOfDownloads;
		this.size = size;
	}
	@Override
	public String toString() {
		DecimalFormat df=new DecimalFormat(".#");
		String result=String.format("%-10s %-15s %-5s %s",name,category,df.format(size),noOfDownloads);
		return result;
	}
	
	
}


import java.util.ArrayList;
import java.util.List;

public class AppBO {
	public List<App> findApp(List<App> appList, String category) {
		//write your code here
		List<App> finalApp=new ArrayList<App>();
		for(App a:appList){
			if(a.getCategory().equals(category)){
				finalApp.add(a);
			}
		}
		return finalApp;
	}
	
	public List<App> findApp(List<App> appList, Double size) {
		//write your code here
		List<App> finalApp=new ArrayList<App>();
		for(App a:appList){
			if(a.getSize()<size){
				finalApp.add(a);
			}
		}
		return finalApp;
	}
}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				
		System.out.println("Enter the number of Apps:");
		int n=Integer.parseInt(br.readLine());
		List<App> appList =new ArrayList<App>();
		for(int i=0;i<n;i++){
			String s=br.readLine();
			String arr[]=s.split(",");
			App app=new App(arr[0],arr[1],Integer.parseInt(arr[2]),Double.parseDouble(arr[3]));
			appList.add(app);
		}
		
		System.out.println("Enter a search type:\n1.By Category\n2.By Size");
		
		//write your code here
	    int ch=Integer.parseInt(br.readLine());
	    AppBO ap=new AppBO();
	    switch(ch){
	    case 1:
	    	System.out.println("Enter the Category:");
	    	String category=br.readLine();
	    	
	    	List<App> app1=ap.findApp(appList, category);
	    	if(app1.size()>0)
	    	{
	    	String result=String.format("%-10s %-15s %-5s %s","Name","Category","Size","No. Of Downloads");
	    	System.out.println(result);
	    	for(App a:app1){
	    	System.out.println(a);
	    	}
	    	}
	    	else
	    	{
	    		System.out.println("No such app is present");
	    	}
	    	
	    	break;
	    case 2:
	    	System.out.println("Enter the size:");
	    	Double size=Double.parseDouble(br.readLine());
	    	List<App> app2=ap.findApp(appList, size);
	    	if(app2.size()>0)
	    	{
	    	String result=String.format("%-10s %-15s %-5s %s","Name","Category","Size","No. Of Downloads");
	    	System.out.println(result);
	    	for(App a:app2)
	    	{
	    	System.out.println(a);
	    	}
	    	}
	    	else
	    	{
	    		System.out.println("No such app is present");
	    	}
	    	break;
	    default:
	    	System.out.println("Invalid Choice");
	    }
		
	}
}


REQUIREMENT-4
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class App {
	//Your code here
	private String name;
	private String category;
	private Integer noOfDownloads;
	private Double size;
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public Integer getNoOfDownloads() {
		return noOfDownloads;
	}

	public void setNoOfDownloads(Integer noOfDownloads) {
		this.noOfDownloads = noOfDownloads;
	}

	public Double getSize() {
		return size;
	}

	public void setSize(Double size) {
		this.size = size;
	}
	public App() {
		super();
		// TODO Auto-generated constructor stub
	}

	public App(String name, String category, Integer noOfDownloads, Double size) {
		super();
		this.name = name;
		this.category = category;
		this.noOfDownloads = noOfDownloads;
		this.size = size;
	}

	public static Map<String,Integer> categoryWiseCount(List<App> appList) {
		//Your code here
		Map<String,Integer> catMap=new TreeMap<>();
		for(App a:appList)
		{
			int count=0;
			for(App a1:appList)
			{
				if(a.getCategory().equals(a1.getCategory()))
				{
					count++;
				}
			}
			catMap.put(a.getCategory(), count);
		}
		return catMap;
	}
}



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of apps:");
		//Your code here
		int app=Integer.parseInt(br.readLine());
	
		List<App> appList=new ArrayList<App>();
		for(int i=0;i<app;i++)
		{
			String str=br.readLine();
			String arr[]=str.split(",");
			App a=new App(arr[0],arr[1],Integer.parseInt(arr[2]),Double.parseDouble(arr[3]));
			appList.add(a);
		}
		System.out.format("%-15s %s\n","Category","Count");
		Map<String,Integer> map1=App.categoryWiseCount(appList);
		for(Map.Entry<String, Integer> mp:map1.entrySet())
		{
			System.out.format("%-15s %s\n",mp.getKey(),mp.getValue());
		}
	}
}

REQUIREMENT-5
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the number of reviews:");
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		//Your code here
		int nor=Integer.parseInt(br.readLine());
		List<Review> rlist=new ArrayList<Review>();
 		for(int i=0;i<nor;i++)
		{
			String str=br.readLine();
			String arr[]=str.split(",");
			rlist.add(new Review(arr[0],arr[1],arr[2],Double.parseDouble(arr[3]),sdf.parse(arr[4])));
		}
 		System.out.println("Enter a type to sort:\n1.Sort by rating\n2.Sort by posted date");
 		int search=Integer.parseInt(br.readLine());
 		switch(search)
 		{
 		case 1:
 			Collections.sort(rlist);
 			System.out.format("%-15s %-20s %-15s %-10s %s\n","Reviewer Name","Reviewer Email","Description","Rating","Posted Date"); 
  			for(int r=0;r<rlist.size();r++)
 			{
 				System.out.print(rlist.get(r));
 			}
 			break;
 		case 2:
 			Collections.sort(rlist,new PostedDateComparator());
 			System.out.format("%-15s %-20s %-15s %-10s %s\n","Reviewer Name","Reviewer Email","Description","Rating","Posted Date");
 			for(int r=0;r<rlist.size();r++)
 			{
 				System.out.print(rlist.get(r));
 			}
 			break;
 		}
	}
}

import java.util.Comparator;

public class PostedDateComparator implements Comparator<Review>{

	@Override
	public int compare(Review r1, Review r2) {
		// TODO Auto-generated method stub
		return r1.getPostedDate().compareTo(r2.getPostedDate());
	}
	//Your code here
}


import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
public class Review implements Comparable<Review>{
	//Your code here	
	private String reviewerName;
	private String reviewerEmail;
	private String description;
	private Double rating;
	private java.util.Date postedDate;
	public String getReviewerName() {
		return reviewerName;
	}
	public void setReviewerName(String reviewerName) {
		this.reviewerName = reviewerName;
	}
	public String getReviewerEmail() {
		return reviewerEmail;
	}
	public void setReviewerEmail(String reviewerEmail) {
		this.reviewerEmail = reviewerEmail;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public Double getRating() {
		return rating;
	}
	public void setRating(Double rating) {
		this.rating = rating;
	}
	public java.util.Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(java.util.Date postedDate) {
		this.postedDate = postedDate;
	}
	public Review(String reviewerName, String reviewerEmail, String description, Double rating, Date postedDate) {
		super();
		this.reviewerName = reviewerName;
		this.reviewerEmail = reviewerEmail;
		this.description = description;
		this.rating = rating;
		this.postedDate = postedDate;
	}
	public Review() {
		super();
		// TODO Auto-generated constructor stub
	}
	@Override
	public int compareTo(Review o) 
	{	
		return this.rating.compareTo(o.getRating());
	}
	@Override
	public String toString() {
		DecimalFormat df=new DecimalFormat(".#");
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		return String.format("%-15s %-20s %-15s %-10s %s\n",reviewerName,reviewerEmail,description,df.format(rating),sdf.format(postedDate));
	}
}

REQUIREMENT-6
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class App {
	
	//write your code here
	private String name;
	private String category;
	private Integer noOfDownloads;
	private Double size;
	private List<Review> reviewList;
	
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public Integer getNoOfDownloads() {
		return noOfDownloads;
	}

	public void setNoOfDownloads(Integer noOfDownloads) {
		this.noOfDownloads = noOfDownloads;
	}

	public Double getSize() {
		return size;
	}

	public void setSize(Double size) {
		this.size = size;
	}

	public List<Review> getReviewList() {
		return reviewList;
	}

	public void setReviewList(List<Review> reviewList) {
		this.reviewList = reviewList;
	}

	public App() {
		super();
		// TODO Auto-generated constructor stub
	}

	public App(String name, String category, Integer noOfDownloads, Double size, List<Review> reviewList) {
		super();
		this.name = name;
		this.category = category;
		this.noOfDownloads = noOfDownloads;
		this.size = size;
		this.reviewList = reviewList;
	}

	public static List<App> prefill() {
		List<App> appList = new ArrayList<>();
		appList.add(new App("Whatsapp","Communication",Integer.parseInt("1296"),Double.parseDouble("16.5"),new ArrayList<Review>()));
		appList.add(new App("MX player","Video player",Integer.parseInt("512"),Double.parseDouble("20.0"),new ArrayList<Review>()));
		appList.add(new App("Facebook","Social",Integer.parseInt("750"),Double.parseDouble("54.0"),new ArrayList<Review>()));
		appList.add(new App("UC browser","Browser",Integer.parseInt("456"),Double.parseDouble("34.0"),new ArrayList<Review>()));
		appList.add(new App("IMO","Communication",Integer.parseInt("526"),Double.parseDouble("10.5"),new ArrayList<Review>()));
		appList.add(new App("Hotstar","Entertainment",Integer.parseInt("400"),Double.parseDouble("65.0"),new ArrayList<Review>()));
		appList.add(new App("Opera mini","Browser",Integer.parseInt("365"),Double.parseDouble("26.3"),new ArrayList<Review>()));
		appList.add(new App("Airtel TV","Entertainment",Integer.parseInt("569"),Double.parseDouble("56.3"),new ArrayList<Review>()));
		appList.add(new App("VLC player","Video player",Integer.parseInt("623"),Double.parseDouble("37.5"),new ArrayList<Review>()));
		appList.add(new App("Twitter","Social",Integer.parseInt("783"),Double.parseDouble("12.6"),new ArrayList<Review>()));
		appList.add(new App("Instagram","Social",Integer.parseInt("800"),Double.parseDouble("62.5"),new ArrayList<Review>()));
		appList.add(new App("Jio tv","Entertainment",Integer.parseInt("296"),Double.parseDouble("45.5"),new ArrayList<Review>()));
		appList.add(new App("Hike","Communication",Integer.parseInt("540"),Double.parseDouble("30.0"),new ArrayList<Review>()));
		return appList;
	}
		
	public static App getTrendingApp(List<App> appLis) {
		
		//write your code here
		
		TreeMap<Double,App> usemap=new TreeMap<Double,App>();
		for(App app:appLis){
			Double amount=0.0;
			int count=0;
			for(Review r:app.getReviewList()){
				amount=amount+r.getRating();
				count++;
			}
			amount=amount/count;
			if(!String.valueOf(amount).equals("NaN")){
			usemap.put(amount, app);
			}
		}
	Double hrating=usemap.lastKey();
	
	List<App> hrapp=new ArrayList<App>();
	for(Map.Entry<Double, App> mp:usemap.entrySet()){
		if(mp.getKey()==hrating){
			hrapp.add(mp.getValue());
		}
	}
		if(hrapp.size()==2)
		{
			int d=hrapp.get(0).getNoOfDownloads();
			if(hrapp.get(1).getNoOfDownloads()>d){
				return hrapp.get(1);
			}
			else{
				return hrapp.get(0);
			}
		}
		else{
			return hrapp.get(0);
		}
	
	}
}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
public class Main {
	public static void main(String args[]) throws NumberFormatException, IOException, ParseException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				
		System.out.println("Enter the number of reviews:");
		
		//write your code here
		int nor=Integer.parseInt(br.readLine());
		List<App> appList=App.prefill();
		for(int i=0;i<nor;i++){
			String str=br.readLine();
		    String arr[]=str.split(",");
		    SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		    for(App app:appList){
		    	if(app.getName().equals(arr[5])){
		    Review r=new Review(arr[0],arr[1],arr[2],Double.parseDouble(arr[3]),sdf.parse(arr[4]),app);
		    app.getReviewList().add(r);
		    	}
		    	
		    }
		    
		    }
		
		App a=App.getTrendingApp(appList);
		System.out.println("The trending app is "+a.getName());
	}
}


import java.text.SimpleDateFormat;
import java.util.Date;

public class Review{
	//Your code here
	private String reviewerName;
	private String reviewerEmail;
	private String description;
	private Double rating;
	private java.util.Date postedDate;
	private App app;
	public String getReviewerName() {
		return reviewerName;
	}
	public void setReviewerName(String reviewerName) {
		this.reviewerName = reviewerName;
	}
	public String getReviewerEmail() {
		return reviewerEmail;
	}
	public void setReviewerEmail(String reviewerEmail) {
		this.reviewerEmail = reviewerEmail;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public Double getRating() {
		return rating;
	}
	public void setRating(Double rating) {
		this.rating = rating;
	}
	public java.util.Date getPostedDate() {
		return postedDate;
	}
	public void setPostedDate(java.util.Date postedDate) {
		this.postedDate = postedDate;
	}
	public Review() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public String toString() {
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		String result=String.format("%-15s %-20s %-15s %-10s %s", reviewerName,reviewerEmail,description,rating,sdf.format(postedDate));
		return result;
	}
	public Review(String reviewerName, String reviewerEmail, String description, Double rating, Date postedDate,App app) {
		super();
		this.reviewerName = reviewerName;
		this.reviewerEmail = reviewerEmail;
		this.description = description;
		this.rating = rating;
		this.postedDate = postedDate;
		this.app=app;
	}
	public App getApp() {
		return app;
	}
	public void setApp(App app) {
		this.app = app;
	}
	
	
}


TICKET

REQUIREMENT-1

public class StrEquals 
{
	private int seatNo;
	private String type;
	private double price;
	private String passengerName;
	private String gender;
	public StrEquals(int seatNo, String type, double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.price = price;
		this.passengerName = passengerName;
		this.gender = gender;
	}
	public int getSeatNo() {
		return seatNo;
	}
	public void setSeatNo(int seatNo) {
		this.seatNo = seatNo;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public String getPassengerName() {
		return passengerName;
	}
	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	@Override
	public String toString() {
		return "seatNo:" + seatNo + "\ntype:" + type + "\nprice:" + price + "\npassengerName:"
				+ passengerName + "\ngender=" + gender ;
	}
	
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main1 {

	

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		InputStreamReader isr=new InputStreamReader(System.in);
		BufferedReader br=new BufferedReader(isr);
		StrEquals k[]=new StrEquals[2];
		for(int i=0;i<2;i++)
		{
			System.out.println("enter the seat"+(i+1)+":details");
			String s=br.readLine();
			String[] a=s.split(",");
			k[i]=new StrEquals(Integer.parseInt(a[0]),a[1],Double.parseDouble(a[2]),a[3],a[4]);
					
		}
		System.out.println();
		System.out.println("seat 1:\n"+k[0].toString());
		System.out.println();
		System.out.println("seat 2:\n"+k[1].toString());
		if(k[0].getSeatNo()==k[1].getSeatNo()&&k[0].getType().equals(k[1].getType()))
		{
			System.out.println("same");
		}
		else
			System.out.println("not same");
		
		
		

	}

}

REQUIREMENT-2
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Main 
{
	public static void main(String arge[])
	{
		//BLR-MR12 CN-EG01/U16
		//05-06-2018
		//19,Seater,800,Natasha,Female
		//22,SemiSleeper,850,Jane,Female
		//20,Sleeper,1550,cecile,Female
		try
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter the reference id of the ticket:");
			String refid=new String(br.readLine());
			Ticket t=new Ticket();
			t.setRefld(refid);
			System.out.println("Enter the date of journey of the ticket:");
			String dt=br.readLine();
			SimpleDateFormat fr=new SimpleDateFormat("dd-MM-yyyy");
			Date date=fr.parse(dt);
			t.setDateOfJourney(date);
			List<Seat> al=new ArrayList<Seat>();
			//Ticket t=new Ticket();
			Ticket t1=null;
			do
			{
				System.out.println("1.Add Seat\n2.Delete Seat\n3.Display Seats\n4.Exit\nEnter your choice:");
				int n=Integer.parseInt(br.readLine());
				//Seat seat[]=new Seat[2];
				switch(n)
				{
					case 1:
						{
							String details=br.readLine();
							Seat seat=Seat.createSeat(details);
							if(seat!=null)
							{
								t1=new Ticket(refid,date,al);
								t1.addSeatToTicket(seat);
								System.out.println("Seat sucessfully added");
							}
						}
					break;
					case 2:
						{
							System.out.println("Enter the seat number to be deleted:");
							int seatNo=Integer.parseInt(br.readLine());
							if(t1.removeSeatFromTicket(seatNo))
								System.out.println("Seat successfully deleted");
							else
								System.out.println("Seat not found in ticket");
						}
					break;
					case 3:
					{
						//new Ticket(refid,date,al);
						if(t1!=null)
							t1.displaySeats();
						else
							System.out.println("No seats to show");
					}
					break;
					case 4:
					{
						System.exit(0);
					}
					break;
					default:
				}
				
			}while(true);
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.println(e);
		}
	}
}

public class Seat 
{
	private Integer seatNo;
	private String type,passengerName,gender;
	private double price;
	public Seat()
	{
		;
	}
	@Override
	public String toString()
	{
		/*System.out.format("%-8s %-12s %-5s %-15s %s\n",""
				+ "Seat No","Type","Price","Passenger Name","Gender");*/
		System.out.format("%-8s %-12s %-5s %-15s %s\n"
				+ "",seatNo,type,price,passengerName,gender);
		return "";
	}
	public Seat(Integer seatNo, String type,double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.passengerName = passengerName;
		this.gender = gender;
		this.price = price;
	}
	public Integer getSeatNo() {
		return seatNo;
	}
	public void setSeatNo(Integer seatNo) {
		this.seatNo = seatNo;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public String getPassengerName() {
		return passengerName;
	}
	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public static Seat createSeat(String line)  
	{
		String s[]=line.split(",");
		Seat obj=new Seat(Integer.parseInt(s[0]),s[1],Double.parseDouble(s[2]),s[3],s[4]);
		return obj;
		//write your code here
	}
}

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

public class Ticket {
	
	//write your code here
	private String refld;
	private Date dateOfJourney;
	List<Seat> seatList=new ArrayList<Seat>();
	public Ticket()
	{
		
	}
	public void addSeatToTicket(Seat seat) 
	{
		seatList.add(seat);
	//this.setSeatList(seatList);
		
	}
	public Boolean removeSeatFromTicket(Integer seatNo)
	{
		Boolean b=new Boolean(false);
		for(int i=0;i<seatList.size();i++)
		{
			if(seatList.get(i).getSeatNo()==seatNo)
			{
				seatList.remove(seatList.get(i));
				b=true;
			}
			else
				b=false;
		}
		return b;
	}
	public void displaySeats()
	{
		if(seatList.size()==0)
			System.out.println("No seats to show");
		else
		{
			System.out.println("Seats in "+refld);
			System.out.format("%-8s %-12s %-5s %-15s %s\n","Seat No","Type",""
					+ "Price","Passenger Name","Gender");
			for(int i=0;i<seatList.size();i++)
				System.out.println(seatList.get(i).toString());
		}
	}
	public String getRefld() {
		return refld;
	}

	public void setRefld(String refld) {
		this.refld = refld;
	}

	public Date getDateOfJourney() {
		return dateOfJourney;
	}

	public void setDateOfJourney(Date dateOfJourney) {
		this.dateOfJourney = dateOfJourney;
	}

	public List<Seat> getSeatList() {
		return seatList;
	}

	public void setSeatList(List<Seat> seatList) {
		this.seatList = seatList;
	}

	public Ticket(String refld, Date dateOfJourney, List<Seat> seatList) {
		super();
		this.refld = refld;
		this.dateOfJourney = dateOfJourney;
		this.seatList = seatList;
	}
}


REQUIREMENT-3
public class Main {

public static void main(String[] args) {

System.out.println("Enter the RefId to be validaed");
Scanner sc = new Scanner(System.in);
String refId = sc.nextLine();
if(validateRefId(refId)==true)
{
System.out.println("valid");
}
else
{
System.out.println("invalid");
}
}

static boolean validateRefId(String refId) {

Pattern p = Pattern.compile("^[A-Z]{2,4}[-]{1}[ULMS]{1}[A-Z0-9]{2,3}[\\s]{1}[A-Z]{2,4}[-]{1}[A-Z0-9]{3,4}$");
Matcher m = p.matcher(refId);
if (m.find()) {
//System.out.println("valid");
return true;
} else
//System.out.println("invalid");
return false;
}

}
REQUIREMENT-4
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class Main {

	public static void main(String[] args)
	{
		try
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter the number of seats");
			Integer n=new Integer(Integer.parseInt(br.readLine()));
			String details[]=new String[n];
			List<Seat> list=new ArrayList<Seat>();
			Seat seat[]=new Seat[n];
			for(int i=0;i<n;i++)
			{
				details[i]=br.readLine();
				String s[]=details[i].split(",");
				 seat[i]=new Seat(Integer.parseInt(s[0]),s[1],Double.parseDouble(s[2]),s[3],s[4]);
				list.add(seat[i]);
			}
			System.out.println("Enter a search type:\n1.By Seat No\n2.By Gender");
			int choice=Integer.parseInt(br.readLine());
			SeatBO seatBo=new SeatBO();
			switch(choice)
			{
			case 1:
			{
				System.out.println("Enter the Seat No");
				Integer seatNo=Integer.parseInt(br.readLine());
				List<Seat> bySeat=seatBo.findSeat(list, seatNo);
				if(bySeat.size()!=0)
				{
					System.out.format("%-8s %-12s %-5s %-15s %s\n",""
							+ "Seat No","Type","Price","Passenger Name","Gender");
					for(int i=0;i<bySeat.size();i++)
						System.out.println(bySeat.get(i).toString());
						
				}
				else
					System.out.println("No such seat is present");
			}
			break;
			case 2:
			{
				System.out.println("Enter the Gender:");
				String gender=br.readLine();
				List<Seat> byGender=seatBo.findSeat(list, gender);
				if(byGender.size()!=0)
				{
					System.out.format("%-8s %-12s %-5s %-15s %s\n",""
							+ "Seat No","Type","Price","Passenger Name","Gender");
					for(int i=0;i<byGender.size();i++)
						System.out.println(byGender.get(i).toString());
					
				}
				else
					System.out.println("No such seat is present");
				
			}
			break;
			default:System.out.println("Invalid choice");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

	}
/*10,Sleeper,600,Water,Male
13,SemiSeater,550,Lucas,Male
11,Seater,500,Brandon,Male
12,Sleeper,600,Will,Male
15,SemiSleeper,550,Caitlin,Female
16,Seater,500,Sara,Female
20,Sleeper,600,Alex,Female*/
}


public class Seat 
{
	private Integer seatNo;
	private String type;
	private Double price;
	private String passengerName;
	private String gender;
	public Seat() {
		// TODO Auto-generated constructor stub
	}
	public Seat(Integer seatNo, String type, Double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.price = price;
		this.passengerName = passengerName;
		this.gender = gender;
	}
	public Integer getSeatNo() {
		return seatNo;
	}
	public void setSeatNo(Integer seatNo) {
		this.seatNo = seatNo;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public Double getPrice() {
		return price;
	}
	public void setPrice(Double price) {
		this.price = price;
	}
	public String getPassengerName() {
		return passengerName;
	}
	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	@Override
	public String toString()
	{
		/*System.out.format("%-8s %-12s %-5s %-15s %s\n",""
				+ "Seat No","Type","Price","Passenger Name","Gender");*/
		System.out.format("%-8s %-12s %-5s %-15s %s\n"
				+ "",seatNo,type,price,passengerName,gender);
		return "";
	}
}

import java.util.ArrayList;
import java.util.List;

public class SeatBO
{
	public List<Seat> findSeat(List<Seat> seatList,Integer seatNo)
	{
		List<Seat> search=new ArrayList<Seat>();
		for(int i=0;i<seatList.size();i++)
		{
			if(seatList.get(i).getSeatNo()==seatNo)
				search.add(seatList.get(i));
		}
		return search;	
	}
	public List<Seat> findSeat(List<Seat> seatList,String gender)
	{
		List<Seat> search=new ArrayList<Seat>();
		for(int i=0;i<seatList.size();i++)
		{
			if(seatList.get(i).getGender().equalsIgnoreCase(gender))
				search.add(seatList.get(i));
		}
		return search;	
	}
	
}

REQUIREMENT-5
package aug13req5;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main1 {

	public static void main(String[] args) throws NumberFormatException, IOException, ParseException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		List<Seat> list = new ArrayList<>();
		System.out.println("Enter the number of seats:");
		int n = Integer.parseInt(br.readLine());
		for (int i = 0; i < n; i++) {
			String detail = br.readLine();
			list.add(Seat.createSeat(detail));
		}
		System.out.println("Enter a type to sort:\n1.Sort by Seat No\n2.Sort by Passenger Name");
		int choice = Integer.parseInt(br.readLine());
		switch (choice) {
		case 1:
			Collections.sort(list, new PasSeat());
			System.out.format("%-8s %-12s %-5s %-15s%s\n", "Seat No", "Type", "Price", "Passenger Name", "Gender");
			for (Seat s1 : list) {
				System.out.format("%-8s %-12s %-5s %-15s%s\n", s1.getSeatNo(), s1.getType(), s1.getPrice(),
						s1.getPassengerName(), s1.getGender());
			}
			break;
		case 2:
			Collections.sort(list, new PasNamCom());
                        System.out.format("%-8s %-12s %-5s %-15s%s\n", "Seat No", "Type", "Price", "Passenger Name", "Gender");
			
			for (Seat s2 : list) {
				System.out.format("%-8s %-12s %-5s %-15s%s\n", s2.getSeatNo(), s2.getType(), s2.getPrice(),
						s2.getPassengerName(), s2.getGender());
			}
			break;
		}
	}

}

package aug13req5;

import java.util.Comparator;

public class PasNamCom implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		// TODO Auto-generated method stub
		Seat s1=(Seat)o1;
		Seat s2=(Seat)o2;
		return s1.getPassengerName().compareTo(s2.getPassengerName());
	}

}


package aug13req5;

import java.util.Comparator;

public class PasSeat implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		// TODO Auto-generated method stub
		Seat s1 = (Seat) o1;
		Seat s2 = (Seat) o2;
		if (s1.getSeatNo() == s2.getSeatNo()) {
			return 1;
		} else {
			return 0;
		}
	}

}

package aug13req5;

import java.text.ParseException;

public class Seat {

	private int seatNo;
	private String type;
	private double price;
	private String passengerName;
	private String gender;

	public Seat(int seatNo, String type, double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.price = price;
		this.passengerName = passengerName;
		this.gender = gender;
	}

	public int getSeatNo() {
		return seatNo;
	}

	public void setSeatNo(int seatNo) {
		this.seatNo = seatNo;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public String getPassengerName() {
		return passengerName;
	}

	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public static Seat createSeat(String detail) throws NumberFormatException, ParseException {

		String s[] = detail.split(",");
		Seat obj = new Seat(Integer.parseInt(s[0]), s[1], Double.parseDouble(s[2]), s[3], s[4]);
		return obj;
	}

}

REQUIREMENT-6
package dictionary6;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class Main {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		System.out.println("Enter the number of the contacts:");
		int num = Integer.parseInt(br.readLine());
		ArrayList<Contact> ar = new ArrayList<Contact>();
		Map<String, Integer> dom = new TreeMap<String, Integer>();

		for (int i = 0; i < num; i++) {
			String s[] = br.readLine().split(",");
			ar.add(new Contact(Integer.parseInt(s[0]), s[1], Double.parseDouble(s[2]), s[3], s[4]));

		}

		dom = Contact.getContactCountForDomain(ar);

		System.out.format("%-15s %s\n", "Domain Name", "Count");

		Set<String> keys = dom.keySet();
		Iterator<String> it = keys.iterator();
		while (it.hasNext()) {
			String key = it.next();
			int value = dom.get(key);
			System.out.format("%-15s %s\n", key, dom.get(key));
		}
	}
}



import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Contact {

	private int seatNo;
	private String type;
	private double price;
	private String passengerName;
	private String gender;

	
	public Contact(int seatNo, String type, double price, String passengerName, String gender) {
		super();
		this.seatNo = seatNo;
		this.type = type;
		this.price = price;
		this.passengerName = passengerName;
		this.gender = gender;
	}

	public int getSeatNo() {
		return seatNo;
	}

	public void setSeatNo(int seatNo) {
		this.seatNo = seatNo;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public String getPassengerName() {
		return passengerName;
	}

	public void setPassengerName(String passengerName) {
		this.passengerName = passengerName;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Contact() {
	}

	@Override
	public String toString() {
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		System.out.printf("%-15s %-15s %-20s %-15s %-20s %-15s %s", seatNo,type,price,passengerName,gender);
		return "";
	}

	static Map<String, Integer> getContactCountForDomain(List<Contact> list) {
		TreeMap<String, Integer> domainCount = new TreeMap<String, Integer>();
		for (int i = 0; i < list.size(); i++) {
			Contact con = list.get(i);
			// System.out.println(con.getEmail());
			String domain = con.getGender();

			if (domainCount.containsKey(domain)) {
				domainCount.put(domain, domainCount.get(domain) + 1);
			} else
				domainCount.put(domain, 1);
		}
		return domainCount;
	
	}

}
s